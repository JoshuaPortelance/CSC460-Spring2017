
project_3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00800200  00001886  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001812  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000015e8  00800200  00800200  00001886  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001886  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000018b8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002c8  00000000  00000000  000018f8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003176  00000000  00000000  00001bc0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000167d  00000000  00000000  00004d36  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001b79  00000000  00000000  000063b3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000007fc  00000000  00000000  00007f2c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000fa5  00000000  00000000  00008728  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001912  00000000  00000000  000096cd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002a8  00000000  00000000  0000afdf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	7a c0       	rjmp	.+244    	; 0xf6 <__ctors_end>
       2:	00 00       	nop
       4:	8b c0       	rjmp	.+278    	; 0x11c <__bad_interrupt>
       6:	00 00       	nop
       8:	89 c0       	rjmp	.+274    	; 0x11c <__bad_interrupt>
       a:	00 00       	nop
       c:	87 c0       	rjmp	.+270    	; 0x11c <__bad_interrupt>
       e:	00 00       	nop
      10:	85 c0       	rjmp	.+266    	; 0x11c <__bad_interrupt>
      12:	00 00       	nop
      14:	83 c0       	rjmp	.+262    	; 0x11c <__bad_interrupt>
      16:	00 00       	nop
      18:	81 c0       	rjmp	.+258    	; 0x11c <__bad_interrupt>
      1a:	00 00       	nop
      1c:	7f c0       	rjmp	.+254    	; 0x11c <__bad_interrupt>
      1e:	00 00       	nop
      20:	7d c0       	rjmp	.+250    	; 0x11c <__bad_interrupt>
      22:	00 00       	nop
      24:	7b c0       	rjmp	.+246    	; 0x11c <__bad_interrupt>
      26:	00 00       	nop
      28:	79 c0       	rjmp	.+242    	; 0x11c <__bad_interrupt>
      2a:	00 00       	nop
      2c:	77 c0       	rjmp	.+238    	; 0x11c <__bad_interrupt>
      2e:	00 00       	nop
      30:	75 c0       	rjmp	.+234    	; 0x11c <__bad_interrupt>
      32:	00 00       	nop
      34:	73 c0       	rjmp	.+230    	; 0x11c <__bad_interrupt>
      36:	00 00       	nop
      38:	71 c0       	rjmp	.+226    	; 0x11c <__bad_interrupt>
      3a:	00 00       	nop
      3c:	6f c0       	rjmp	.+222    	; 0x11c <__bad_interrupt>
      3e:	00 00       	nop
      40:	6d c0       	rjmp	.+218    	; 0x11c <__bad_interrupt>
      42:	00 00       	nop
      44:	fd c5       	rjmp	.+3066   	; 0xc40 <__vector_17>
      46:	00 00       	nop
      48:	69 c0       	rjmp	.+210    	; 0x11c <__bad_interrupt>
      4a:	00 00       	nop
      4c:	67 c0       	rjmp	.+206    	; 0x11c <__bad_interrupt>
      4e:	00 00       	nop
      50:	65 c0       	rjmp	.+202    	; 0x11c <__bad_interrupt>
      52:	00 00       	nop
      54:	63 c0       	rjmp	.+198    	; 0x11c <__bad_interrupt>
      56:	00 00       	nop
      58:	61 c0       	rjmp	.+194    	; 0x11c <__bad_interrupt>
      5a:	00 00       	nop
      5c:	5f c0       	rjmp	.+190    	; 0x11c <__bad_interrupt>
      5e:	00 00       	nop
      60:	5d c0       	rjmp	.+186    	; 0x11c <__bad_interrupt>
      62:	00 00       	nop
      64:	5b c0       	rjmp	.+182    	; 0x11c <__bad_interrupt>
      66:	00 00       	nop
      68:	59 c0       	rjmp	.+178    	; 0x11c <__bad_interrupt>
      6a:	00 00       	nop
      6c:	57 c0       	rjmp	.+174    	; 0x11c <__bad_interrupt>
      6e:	00 00       	nop
      70:	55 c0       	rjmp	.+170    	; 0x11c <__bad_interrupt>
      72:	00 00       	nop
      74:	53 c0       	rjmp	.+166    	; 0x11c <__bad_interrupt>
      76:	00 00       	nop
      78:	51 c0       	rjmp	.+162    	; 0x11c <__bad_interrupt>
      7a:	00 00       	nop
      7c:	4f c0       	rjmp	.+158    	; 0x11c <__bad_interrupt>
      7e:	00 00       	nop
      80:	4d c0       	rjmp	.+154    	; 0x11c <__bad_interrupt>
      82:	00 00       	nop
      84:	4b c0       	rjmp	.+150    	; 0x11c <__bad_interrupt>
      86:	00 00       	nop
      88:	49 c0       	rjmp	.+146    	; 0x11c <__bad_interrupt>
      8a:	00 00       	nop
      8c:	47 c0       	rjmp	.+142    	; 0x11c <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 b2 0a 	jmp	0x1564	; 0x1564 <__vector_36>
      94:	43 c0       	rjmp	.+134    	; 0x11c <__bad_interrupt>
      96:	00 00       	nop
      98:	0c 94 77 0a 	jmp	0x14ee	; 0x14ee <__vector_38>
      9c:	3f c0       	rjmp	.+126    	; 0x11c <__bad_interrupt>
      9e:	00 00       	nop
      a0:	3d c0       	rjmp	.+122    	; 0x11c <__bad_interrupt>
      a2:	00 00       	nop
      a4:	3b c0       	rjmp	.+118    	; 0x11c <__bad_interrupt>
      a6:	00 00       	nop
      a8:	39 c0       	rjmp	.+114    	; 0x11c <__bad_interrupt>
      aa:	00 00       	nop
      ac:	37 c0       	rjmp	.+110    	; 0x11c <__bad_interrupt>
      ae:	00 00       	nop
      b0:	35 c0       	rjmp	.+106    	; 0x11c <__bad_interrupt>
      b2:	00 00       	nop
      b4:	33 c0       	rjmp	.+102    	; 0x11c <__bad_interrupt>
      b6:	00 00       	nop
      b8:	31 c0       	rjmp	.+98     	; 0x11c <__bad_interrupt>
      ba:	00 00       	nop
      bc:	2f c0       	rjmp	.+94     	; 0x11c <__bad_interrupt>
      be:	00 00       	nop
      c0:	2d c0       	rjmp	.+90     	; 0x11c <__bad_interrupt>
      c2:	00 00       	nop
      c4:	2b c0       	rjmp	.+86     	; 0x11c <__bad_interrupt>
      c6:	00 00       	nop
      c8:	29 c0       	rjmp	.+82     	; 0x11c <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0c 94 19 0b 	jmp	0x1632	; 0x1632 <__vector_51>
      d0:	25 c0       	rjmp	.+74     	; 0x11c <__bad_interrupt>
      d2:	00 00       	nop
      d4:	23 c0       	rjmp	.+70     	; 0x11c <__bad_interrupt>
      d6:	00 00       	nop
      d8:	21 c0       	rjmp	.+66     	; 0x11c <__bad_interrupt>
      da:	00 00       	nop
      dc:	1f c0       	rjmp	.+62     	; 0x11c <__bad_interrupt>
      de:	00 00       	nop
      e0:	1d c0       	rjmp	.+58     	; 0x11c <__bad_interrupt>
      e2:	00 00       	nop
      e4:	d5 04       	cpc	r13, r5
      e6:	b2 04       	cpc	r11, r2
      e8:	d5 04       	cpc	r13, r5
      ea:	e1 04       	cpc	r14, r1
      ec:	d8 04       	cpc	r13, r8
      ee:	ee 04       	cpc	r14, r14
      f0:	f4 04       	cpc	r15, r4
      f2:	01 05       	cpc	r16, r1
      f4:	03 05       	cpc	r16, r3

000000f6 <__ctors_end>:
      f6:	11 24       	eor	r1, r1
      f8:	1f be       	out	0x3f, r1	; 63
      fa:	cf ef       	ldi	r28, 0xFF	; 255
      fc:	d1 e2       	ldi	r29, 0x21	; 33
      fe:	de bf       	out	0x3e, r29	; 62
     100:	cd bf       	out	0x3d, r28	; 61
     102:	00 e0       	ldi	r16, 0x00	; 0
     104:	0c bf       	out	0x3c, r16	; 60

00000106 <__do_clear_bss>:
     106:	27 e1       	ldi	r18, 0x17	; 23
     108:	a0 e0       	ldi	r26, 0x00	; 0
     10a:	b2 e0       	ldi	r27, 0x02	; 2
     10c:	01 c0       	rjmp	.+2      	; 0x110 <.do_clear_bss_start>

0000010e <.do_clear_bss_loop>:
     10e:	1d 92       	st	X+, r1

00000110 <.do_clear_bss_start>:
     110:	a8 3e       	cpi	r26, 0xE8	; 232
     112:	b2 07       	cpc	r27, r18
     114:	e1 f7       	brne	.-8      	; 0x10e <.do_clear_bss_loop>
     116:	d1 d5       	rcall	.+2978   	; 0xcba <main>
     118:	0c 94 07 0c 	jmp	0x180e	; 0x180e <_exit>

0000011c <__bad_interrupt>:
     11c:	71 cf       	rjmp	.-286    	; 0x0 <__vectors>

0000011e <CSwitch>:
Exit_Kernel:
        /*
          * This is the "top" half of CSwitch(), generally called by the kernel.
          * Assume I = 0, i.e., all interrupts are disabled.
          */
        SAVECTX
     11e:	0f 92       	push	r0
     120:	1f 92       	push	r1
     122:	2f 92       	push	r2
     124:	3f 92       	push	r3
     126:	4f 92       	push	r4
     128:	5f 92       	push	r5
     12a:	6f 92       	push	r6
     12c:	7f 92       	push	r7
     12e:	8f 92       	push	r8
     130:	9f 92       	push	r9
     132:	af 92       	push	r10
     134:	bf 92       	push	r11
     136:	cf 92       	push	r12
     138:	df 92       	push	r13
     13a:	ef 92       	push	r14
     13c:	ff 92       	push	r15
     13e:	0f 93       	push	r16
     140:	1f 93       	push	r17
     142:	2f 93       	push	r18
     144:	3f 93       	push	r19
     146:	4f 93       	push	r20
     148:	5f 93       	push	r21
     14a:	6f 93       	push	r22
     14c:	7f 93       	push	r23
     14e:	8f 93       	push	r24
     150:	9f 93       	push	r25
     152:	af 93       	push	r26
     154:	bf 93       	push	r27
     156:	cf 93       	push	r28
     158:	df 93       	push	r29
     15a:	ef 93       	push	r30
     15c:	ff 93       	push	r31
     15e:	fc b7       	in	r31, 0x3c	; 60
     160:	ff 93       	push	r31
     162:	0f b7       	in	r16, 0x3f	; 63
     164:	0f 93       	push	r16
        /*
          * Now, we have saved the kernel's context.
          * Save the current H/W stack pointer into KernelSp.
          */
        in   r30, SPL
     166:	ed b7       	in	r30, 0x3d	; 61
        in   r31, SPH
     168:	fe b7       	in	r31, 0x3e	; 62
        sts  KernelSp, r30
     16a:	e0 93 de 17 	sts	0x17DE, r30	; 0x8017de <KernelSp>
        sts  KernelSp+1, r31
     16e:	f0 93 df 17 	sts	0x17DF, r31	; 0x8017df <KernelSp+0x1>
        /*
          * We are now ready to restore Cp's context, i.e.,
          * switching the H/W stack pointer to CurrentSp.
          */
        lds  r30, CurrentSp
     172:	e0 91 dc 17 	lds	r30, 0x17DC	; 0x8017dc <CurrentSp>
        lds  r31, CurrentSp+1
     176:	f0 91 dd 17 	lds	r31, 0x17DD	; 0x8017dd <CurrentSp+0x1>
        out  SPL, r30
     17a:	ed bf       	out	0x3d, r30	; 61
        out  SPH, r31
     17c:	fe bf       	out	0x3e, r31	; 62
        /*
          * We are now executing in Cp's stack.
          * Note: at the bottom of the Cp's context is its return address.
          */
        RESTORECTX
     17e:	0f 91       	pop	r16
     180:	0f bf       	out	0x3f, r16	; 63
     182:	ff 91       	pop	r31
     184:	fc bf       	out	0x3c, r31	; 60
     186:	ff 91       	pop	r31
     188:	ef 91       	pop	r30
     18a:	df 91       	pop	r29
     18c:	cf 91       	pop	r28
     18e:	bf 91       	pop	r27
     190:	af 91       	pop	r26
     192:	9f 91       	pop	r25
     194:	8f 91       	pop	r24
     196:	7f 91       	pop	r23
     198:	6f 91       	pop	r22
     19a:	5f 91       	pop	r21
     19c:	4f 91       	pop	r20
     19e:	3f 91       	pop	r19
     1a0:	2f 91       	pop	r18
     1a2:	1f 91       	pop	r17
     1a4:	0f 91       	pop	r16
     1a6:	ff 90       	pop	r15
     1a8:	ef 90       	pop	r14
     1aa:	df 90       	pop	r13
     1ac:	cf 90       	pop	r12
     1ae:	bf 90       	pop	r11
     1b0:	af 90       	pop	r10
     1b2:	9f 90       	pop	r9
     1b4:	8f 90       	pop	r8
     1b6:	7f 90       	pop	r7
     1b8:	6f 90       	pop	r6
     1ba:	5f 90       	pop	r5
     1bc:	4f 90       	pop	r4
     1be:	3f 90       	pop	r3
     1c0:	2f 90       	pop	r2
     1c2:	1f 90       	pop	r1
     1c4:	0f 90       	pop	r0
        reti         /* re-enable all global interrupts */
     1c6:	18 95       	reti

000001c8 <Enter_Kernel>:
Enter_Kernel:
        /*
          * This is the "bottom" half of CSwitch(). We are still executing in
          * Cp's context.
          */
        SAVECTX
     1c8:	0f 92       	push	r0
     1ca:	1f 92       	push	r1
     1cc:	2f 92       	push	r2
     1ce:	3f 92       	push	r3
     1d0:	4f 92       	push	r4
     1d2:	5f 92       	push	r5
     1d4:	6f 92       	push	r6
     1d6:	7f 92       	push	r7
     1d8:	8f 92       	push	r8
     1da:	9f 92       	push	r9
     1dc:	af 92       	push	r10
     1de:	bf 92       	push	r11
     1e0:	cf 92       	push	r12
     1e2:	df 92       	push	r13
     1e4:	ef 92       	push	r14
     1e6:	ff 92       	push	r15
     1e8:	0f 93       	push	r16
     1ea:	1f 93       	push	r17
     1ec:	2f 93       	push	r18
     1ee:	3f 93       	push	r19
     1f0:	4f 93       	push	r20
     1f2:	5f 93       	push	r21
     1f4:	6f 93       	push	r22
     1f6:	7f 93       	push	r23
     1f8:	8f 93       	push	r24
     1fa:	9f 93       	push	r25
     1fc:	af 93       	push	r26
     1fe:	bf 93       	push	r27
     200:	cf 93       	push	r28
     202:	df 93       	push	r29
     204:	ef 93       	push	r30
     206:	ff 93       	push	r31
     208:	fc b7       	in	r31, 0x3c	; 60
     20a:	ff 93       	push	r31
     20c:	0f b7       	in	r16, 0x3f	; 63
     20e:	0f 93       	push	r16
        /*
          * Now, we have saved the Cp's context.
          * Save the current H/W stack pointer into CurrentSp.
          */
        in   r30, SPL
     210:	ed b7       	in	r30, 0x3d	; 61
        in   r31, SPH
     212:	fe b7       	in	r31, 0x3e	; 62
        sts  CurrentSp, r30
     214:	e0 93 dc 17 	sts	0x17DC, r30	; 0x8017dc <CurrentSp>
        sts  CurrentSp+1, r31
     218:	f0 93 dd 17 	sts	0x17DD, r31	; 0x8017dd <CurrentSp+0x1>
        /*
          * We are now ready to restore kernel's context, i.e.,
          * switching the H/W stack pointer back to KernelSp.
          */
        lds  r30, KernelSp
     21c:	e0 91 de 17 	lds	r30, 0x17DE	; 0x8017de <KernelSp>
        lds  r31, KernelSp+1
     220:	f0 91 df 17 	lds	r31, 0x17DF	; 0x8017df <KernelSp+0x1>
        out  SPL, r30
     224:	ed bf       	out	0x3d, r30	; 61
        out  SPH, r31
     226:	fe bf       	out	0x3e, r31	; 62
        /*
          * We are now executing in kernel's stack.
          */
       RESTORECTX
     228:	0f 91       	pop	r16
     22a:	0f bf       	out	0x3f, r16	; 63
     22c:	ff 91       	pop	r31
     22e:	fc bf       	out	0x3c, r31	; 60
     230:	ff 91       	pop	r31
     232:	ef 91       	pop	r30
     234:	df 91       	pop	r29
     236:	cf 91       	pop	r28
     238:	bf 91       	pop	r27
     23a:	af 91       	pop	r26
     23c:	9f 91       	pop	r25
     23e:	8f 91       	pop	r24
     240:	7f 91       	pop	r23
     242:	6f 91       	pop	r22
     244:	5f 91       	pop	r21
     246:	4f 91       	pop	r20
     248:	3f 91       	pop	r19
     24a:	2f 91       	pop	r18
     24c:	1f 91       	pop	r17
     24e:	0f 91       	pop	r16
     250:	ff 90       	pop	r15
     252:	ef 90       	pop	r14
     254:	df 90       	pop	r13
     256:	cf 90       	pop	r12
     258:	bf 90       	pop	r11
     25a:	af 90       	pop	r10
     25c:	9f 90       	pop	r9
     25e:	8f 90       	pop	r8
     260:	7f 90       	pop	r7
     262:	6f 90       	pop	r6
     264:	5f 90       	pop	r5
     266:	4f 90       	pop	r4
     268:	3f 90       	pop	r3
     26a:	2f 90       	pop	r2
     26c:	1f 90       	pop	r1
     26e:	0f 90       	pop	r0
        /*
          * We are ready to return to the caller of CSwitch() (or Exit_Kernel()).
          * Note: We should NOT re-enable interrupts while kernel is running.
          *         Therefore, we use "ret", and not "reti".
          */
       ret
     270:	08 95       	ret

00000272 <Idle_Task>:
unsigned int Now()
{
	unsigned int temp_time = TCNT1;
	unsigned int time = (10 * current_tick) + (temp_time / 2000);
	return time;
}
     272:	ff cf       	rjmp	.-2      	; 0x272 <Idle_Task>

00000274 <Task_Terminate>:
     274:	80 91 b4 04 	lds	r24, 0x04B4	; 0x8004b4 <KernelActive>
     278:	90 91 b5 04 	lds	r25, 0x04B5	; 0x8004b5 <KernelActive+0x1>
     27c:	89 2b       	or	r24, r25
     27e:	69 f0       	breq	.+26     	; 0x29a <Task_Terminate+0x26>
     280:	f8 94       	cli
     282:	e0 91 b8 04 	lds	r30, 0x04B8	; 0x8004b8 <Cp>
     286:	f0 91 b9 04 	lds	r31, 0x04B9	; 0x8004b9 <Cp+0x1>
     28a:	e8 5f       	subi	r30, 0xF8	; 248
     28c:	fe 4f       	sbci	r31, 0xFE	; 254
     28e:	83 e0       	ldi	r24, 0x03	; 3
     290:	80 83       	st	Z, r24
     292:	80 e1       	ldi	r24, 0x10	; 16
     294:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <__TEXT_REGION_LENGTH__+0x70010b>
     298:	97 cf       	rjmp	.-210    	; 0x1c8 <Enter_Kernel>
     29a:	08 95       	ret

0000029c <enqueue>:
     29c:	fc 01       	movw	r30, r24
     29e:	80 a1       	ldd	r24, Z+32	; 0x20
     2a0:	91 a1       	ldd	r25, Z+33	; 0x21
     2a2:	40 97       	sbiw	r24, 0x10	; 16
     2a4:	19 f4       	brne	.+6      	; 0x2ac <enqueue+0x10>
     2a6:	8c e0       	ldi	r24, 0x0C	; 12
     2a8:	88 b9       	out	0x08, r24	; 8
     2aa:	ff cf       	rjmp	.-2      	; 0x2aa <enqueue+0xe>
     2ac:	a4 a1       	ldd	r26, Z+36	; 0x24
     2ae:	b5 a1       	ldd	r27, Z+37	; 0x25
     2b0:	aa 0f       	add	r26, r26
     2b2:	bb 1f       	adc	r27, r27
     2b4:	ae 0f       	add	r26, r30
     2b6:	bf 1f       	adc	r27, r31
     2b8:	11 96       	adiw	r26, 0x01	; 1
     2ba:	7c 93       	st	X, r23
     2bc:	6e 93       	st	-X, r22
     2be:	80 a1       	ldd	r24, Z+32	; 0x20
     2c0:	91 a1       	ldd	r25, Z+33	; 0x21
     2c2:	01 96       	adiw	r24, 0x01	; 1
     2c4:	91 a3       	std	Z+33, r25	; 0x21
     2c6:	80 a3       	std	Z+32, r24	; 0x20
     2c8:	84 a1       	ldd	r24, Z+36	; 0x24
     2ca:	95 a1       	ldd	r25, Z+37	; 0x25
     2cc:	01 96       	adiw	r24, 0x01	; 1
     2ce:	60 e1       	ldi	r22, 0x10	; 16
     2d0:	70 e0       	ldi	r23, 0x00	; 0
     2d2:	0e 94 c7 0b 	call	0x178e	; 0x178e <__divmodhi4>
     2d6:	95 a3       	std	Z+37, r25	; 0x25
     2d8:	84 a3       	std	Z+36, r24	; 0x24
     2da:	08 95       	ret

000002dc <dequeue>:
     2dc:	cf 93       	push	r28
     2de:	df 93       	push	r29
     2e0:	fc 01       	movw	r30, r24
     2e2:	80 a1       	ldd	r24, Z+32	; 0x20
     2e4:	91 a1       	ldd	r25, Z+33	; 0x21
     2e6:	89 2b       	or	r24, r25
     2e8:	19 f4       	brne	.+6      	; 0x2f0 <dequeue+0x14>
     2ea:	8d e0       	ldi	r24, 0x0D	; 13
     2ec:	88 b9       	out	0x08, r24	; 8
     2ee:	ff cf       	rjmp	.-2      	; 0x2ee <dequeue+0x12>
     2f0:	a2 a1       	ldd	r26, Z+34	; 0x22
     2f2:	b3 a1       	ldd	r27, Z+35	; 0x23
     2f4:	aa 0f       	add	r26, r26
     2f6:	bb 1f       	adc	r27, r27
     2f8:	ae 0f       	add	r26, r30
     2fa:	bf 1f       	adc	r27, r31
     2fc:	cd 91       	ld	r28, X+
     2fe:	dc 91       	ld	r29, X
     300:	20 a1       	ldd	r18, Z+32	; 0x20
     302:	31 a1       	ldd	r19, Z+33	; 0x21
     304:	21 50       	subi	r18, 0x01	; 1
     306:	31 09       	sbc	r19, r1
     308:	31 a3       	std	Z+33, r19	; 0x21
     30a:	20 a3       	std	Z+32, r18	; 0x20
     30c:	22 a1       	ldd	r18, Z+34	; 0x22
     30e:	33 a1       	ldd	r19, Z+35	; 0x23
     310:	c9 01       	movw	r24, r18
     312:	01 96       	adiw	r24, 0x01	; 1
     314:	60 e1       	ldi	r22, 0x10	; 16
     316:	70 e0       	ldi	r23, 0x00	; 0
     318:	0e 94 c7 0b 	call	0x178e	; 0x178e <__divmodhi4>
     31c:	93 a3       	std	Z+35, r25	; 0x23
     31e:	82 a3       	std	Z+34, r24	; 0x22
     320:	ce 01       	movw	r24, r28
     322:	df 91       	pop	r29
     324:	cf 91       	pop	r28
     326:	08 95       	ret

00000328 <Dispatch>:
     328:	80 91 02 05 	lds	r24, 0x0502	; 0x800502 <ReadyQSystem+0x20>
     32c:	90 91 03 05 	lds	r25, 0x0503	; 0x800503 <ReadyQSystem+0x21>
     330:	18 16       	cp	r1, r24
     332:	19 06       	cpc	r1, r25
     334:	1c f4       	brge	.+6      	; 0x33c <Dispatch+0x14>
     336:	82 ee       	ldi	r24, 0xE2	; 226
     338:	94 e0       	ldi	r25, 0x04	; 4
     33a:	1d c0       	rjmp	.+58     	; 0x376 <Dispatch+0x4e>
     33c:	80 91 28 05 	lds	r24, 0x0528	; 0x800528 <ReadyQTime+0x20>
     340:	90 91 29 05 	lds	r25, 0x0529	; 0x800529 <ReadyQTime+0x21>
     344:	18 16       	cp	r1, r24
     346:	19 06       	cpc	r1, r25
     348:	1c f4       	brge	.+6      	; 0x350 <Dispatch+0x28>
     34a:	88 e0       	ldi	r24, 0x08	; 8
     34c:	95 e0       	ldi	r25, 0x05	; 5
     34e:	13 c0       	rjmp	.+38     	; 0x376 <Dispatch+0x4e>
     350:	80 91 4e 05 	lds	r24, 0x054E	; 0x80054e <ReadyQRR+0x20>
     354:	90 91 4f 05 	lds	r25, 0x054F	; 0x80054f <ReadyQRR+0x21>
     358:	18 16       	cp	r1, r24
     35a:	19 06       	cpc	r1, r25
     35c:	1c f4       	brge	.+6      	; 0x364 <Dispatch+0x3c>
     35e:	8e e2       	ldi	r24, 0x2E	; 46
     360:	95 e0       	ldi	r25, 0x05	; 5
     362:	09 c0       	rjmp	.+18     	; 0x376 <Dispatch+0x4e>
     364:	80 91 dc 04 	lds	r24, 0x04DC	; 0x8004dc <ReadyQIdle+0x20>
     368:	90 91 dd 04 	lds	r25, 0x04DD	; 0x8004dd <ReadyQIdle+0x21>
     36c:	18 16       	cp	r1, r24
     36e:	19 06       	cpc	r1, r25
     370:	9c f4       	brge	.+38     	; 0x398 <Dispatch+0x70>
     372:	8c eb       	ldi	r24, 0xBC	; 188
     374:	94 e0       	ldi	r25, 0x04	; 4
     376:	b2 df       	rcall	.-156    	; 0x2dc <dequeue>
     378:	90 93 b9 04 	sts	0x04B9, r25	; 0x8004b9 <Cp+0x1>
     37c:	80 93 b8 04 	sts	0x04B8, r24	; 0x8004b8 <Cp>
     380:	fc 01       	movw	r30, r24
     382:	23 81       	ldd	r18, Z+3	; 0x03
     384:	34 81       	ldd	r19, Z+4	; 0x04
     386:	30 93 dd 17 	sts	0x17DD, r19	; 0x8017dd <CurrentSp+0x1>
     38a:	20 93 dc 17 	sts	0x17DC, r18	; 0x8017dc <CurrentSp>
     38e:	eb 5f       	subi	r30, 0xFB	; 251
     390:	fe 4f       	sbci	r31, 0xFE	; 254
     392:	82 e0       	ldi	r24, 0x02	; 2
     394:	80 83       	st	Z, r24
     396:	08 95       	ret
     398:	88 e1       	ldi	r24, 0x18	; 24
     39a:	88 b9       	out	0x08, r24	; 8
     39c:	ff cf       	rjmp	.-2      	; 0x39c <Dispatch+0x74>

0000039e <setReady>:
     39e:	cf 93       	push	r28
     3a0:	df 93       	push	r29
     3a2:	ec 01       	movw	r28, r24
     3a4:	8a 81       	ldd	r24, Y+2	; 0x02
     3a6:	81 30       	cpi	r24, 0x01	; 1
     3a8:	69 f0       	breq	.+26     	; 0x3c4 <setReady+0x26>
     3aa:	c8 f0       	brcs	.+50     	; 0x3de <setReady+0x40>
     3ac:	82 30       	cpi	r24, 0x02	; 2
     3ae:	31 f0       	breq	.+12     	; 0x3bc <setReady+0x1e>
     3b0:	83 30       	cpi	r24, 0x03	; 3
     3b2:	d1 f4       	brne	.+52     	; 0x3e8 <setReady+0x4a>
     3b4:	be 01       	movw	r22, r28
     3b6:	8c eb       	ldi	r24, 0xBC	; 188
     3b8:	94 e0       	ldi	r25, 0x04	; 4
     3ba:	14 c0       	rjmp	.+40     	; 0x3e4 <setReady+0x46>
     3bc:	be 01       	movw	r22, r28
     3be:	8e e2       	ldi	r24, 0x2E	; 46
     3c0:	95 e0       	ldi	r25, 0x05	; 5
     3c2:	10 c0       	rjmp	.+32     	; 0x3e4 <setReady+0x46>
     3c4:	be 01       	movw	r22, r28
     3c6:	88 e0       	ldi	r24, 0x08	; 8
     3c8:	95 e0       	ldi	r25, 0x05	; 5
     3ca:	68 df       	rcall	.-304    	; 0x29c <enqueue>
     3cc:	80 91 28 05 	lds	r24, 0x0528	; 0x800528 <ReadyQTime+0x20>
     3d0:	90 91 29 05 	lds	r25, 0x0529	; 0x800529 <ReadyQTime+0x21>
     3d4:	02 97       	sbiw	r24, 0x02	; 2
     3d6:	5c f0       	brlt	.+22     	; 0x3ee <setReady+0x50>
     3d8:	85 e0       	ldi	r24, 0x05	; 5
     3da:	88 b9       	out	0x08, r24	; 8
     3dc:	ff cf       	rjmp	.-2      	; 0x3dc <setReady+0x3e>
     3de:	be 01       	movw	r22, r28
     3e0:	82 ee       	ldi	r24, 0xE2	; 226
     3e2:	94 e0       	ldi	r25, 0x04	; 4
     3e4:	5b df       	rcall	.-330    	; 0x29c <enqueue>
     3e6:	03 c0       	rjmp	.+6      	; 0x3ee <setReady+0x50>
     3e8:	8c e7       	ldi	r24, 0x7C	; 124
     3ea:	88 b9       	out	0x08, r24	; 8
     3ec:	ff cf       	rjmp	.-2      	; 0x3ec <setReady+0x4e>
     3ee:	cb 5f       	subi	r28, 0xFB	; 251
     3f0:	de 4f       	sbci	r29, 0xFE	; 254
     3f2:	81 e0       	ldi	r24, 0x01	; 1
     3f4:	88 83       	st	Y, r24
     3f6:	df 91       	pop	r29
     3f8:	cf 91       	pop	r28
     3fa:	08 95       	ret

000003fc <Kernel_Create_Task_At>:
     3fc:	8f 92       	push	r8
     3fe:	9f 92       	push	r9
     400:	af 92       	push	r10
     402:	bf 92       	push	r11
     404:	cf 92       	push	r12
     406:	df 92       	push	r13
     408:	ef 92       	push	r14
     40a:	ff 92       	push	r15
     40c:	0f 93       	push	r16
     40e:	cf 93       	push	r28
     410:	df 93       	push	r29
     412:	ec 01       	movw	r28, r24
     414:	fc 01       	movw	r30, r24
     416:	35 96       	adiw	r30, 0x05	; 5
     418:	81 2c       	mov	r8, r1
     41a:	99 24       	eor	r9, r9
     41c:	93 94       	inc	r9
     41e:	df 01       	movw	r26, r30
     420:	c4 01       	movw	r24, r8
     422:	1d 92       	st	X+, r1
     424:	01 97       	sbiw	r24, 0x01	; 1
     426:	e9 f7       	brne	.-6      	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
     428:	e1 50       	subi	r30, 0x01	; 1
     42a:	ff 4f       	sbci	r31, 0xFF	; 255
     42c:	8a e3       	ldi	r24, 0x3A	; 58
     42e:	91 e0       	ldi	r25, 0x01	; 1
     430:	80 83       	st	Z, r24
     432:	31 97       	sbiw	r30, 0x01	; 1
     434:	90 83       	st	Z, r25
     436:	31 97       	sbiw	r30, 0x01	; 1
     438:	10 82       	st	Z, r1
     43a:	31 97       	sbiw	r30, 0x01	; 1
     43c:	60 83       	st	Z, r22
     43e:	31 97       	sbiw	r30, 0x01	; 1
     440:	70 83       	st	Z, r23
     442:	31 97       	sbiw	r30, 0x01	; 1
     444:	10 82       	st	Z, r1
     446:	de 01       	movw	r26, r28
     448:	a4 52       	subi	r26, 0x24	; 36
     44a:	bf 4f       	sbci	r27, 0xFF	; 255
     44c:	b2 97       	sbiw	r30, 0x22	; 34
     44e:	80 81       	ld	r24, Z
     450:	80 68       	ori	r24, 0x80	; 128
     452:	80 83       	st	Z, r24
     454:	bc 83       	std	Y+4, r27	; 0x04
     456:	ab 83       	std	Y+3, r26	; 0x03
     458:	b9 96       	adiw	r30, 0x29	; 41
     45a:	71 83       	std	Z+1, r23	; 0x01
     45c:	60 83       	st	Z, r22
     45e:	32 96       	adiw	r30, 0x02	; 2
     460:	10 82       	st	Z, r1
     462:	9d 96       	adiw	r26, 0x2d	; 45
     464:	11 96       	adiw	r26, 0x01	; 1
     466:	5c 93       	st	X, r21
     468:	4e 93       	st	-X, r20
     46a:	39 83       	std	Y+1, r19	; 0x01
     46c:	28 83       	st	Y, r18
     46e:	0a 83       	std	Y+2, r16	; 0x02
     470:	10 82       	st	Z, r1
     472:	39 96       	adiw	r30, 0x09	; 9
     474:	f1 82       	std	Z+1, r15	; 0x01
     476:	e0 82       	st	Z, r14
     478:	32 96       	adiw	r30, 0x02	; 2
     47a:	d1 82       	std	Z+1, r13	; 0x01
     47c:	c0 82       	st	Z, r12
     47e:	32 96       	adiw	r30, 0x02	; 2
     480:	b1 82       	std	Z+1, r11	; 0x01
     482:	a0 82       	st	Z, r10
     484:	32 96       	adiw	r30, 0x02	; 2
     486:	b1 82       	std	Z+1, r11	; 0x01
     488:	a0 82       	st	Z, r10
     48a:	32 96       	adiw	r30, 0x02	; 2
     48c:	11 82       	std	Z+1, r1	; 0x01
     48e:	10 82       	st	Z, r1
     490:	01 30       	cpi	r16, 0x01	; 1
     492:	21 f4       	brne	.+8      	; 0x49c <__LOCK_REGION_LENGTH__+0x9c>
     494:	84 e0       	ldi	r24, 0x04	; 4
     496:	74 97       	sbiw	r30, 0x14	; 20
     498:	80 83       	st	Z, r24
     49a:	02 c0       	rjmp	.+4      	; 0x4a0 <__LOCK_REGION_LENGTH__+0xa0>
     49c:	ce 01       	movw	r24, r28
     49e:	7f df       	rcall	.-258    	; 0x39e <setReady>
     4a0:	88 81       	ld	r24, Y
     4a2:	99 81       	ldd	r25, Y+1	; 0x01
     4a4:	df 91       	pop	r29
     4a6:	cf 91       	pop	r28
     4a8:	0f 91       	pop	r16
     4aa:	ff 90       	pop	r15
     4ac:	ef 90       	pop	r14
     4ae:	df 90       	pop	r13
     4b0:	cf 90       	pop	r12
     4b2:	bf 90       	pop	r11
     4b4:	af 90       	pop	r10
     4b6:	9f 90       	pop	r9
     4b8:	8f 90       	pop	r8
     4ba:	08 95       	ret

000004bc <Kernel_Create_Task>:
     4bc:	af 92       	push	r10
     4be:	bf 92       	push	r11
     4c0:	cf 92       	push	r12
     4c2:	df 92       	push	r13
     4c4:	ef 92       	push	r14
     4c6:	ff 92       	push	r15
     4c8:	0f 93       	push	r16
     4ca:	1f 93       	push	r17
     4cc:	e0 91 b2 04 	lds	r30, 0x04B2	; 0x8004b2 <Tasks>
     4d0:	f0 91 b3 04 	lds	r31, 0x04B3	; 0x8004b3 <Tasks+0x1>
     4d4:	70 97       	sbiw	r30, 0x10	; 16
     4d6:	61 f1       	breq	.+88     	; 0x530 <Kernel_Create_Task+0x74>
     4d8:	a9 e5       	ldi	r26, 0x59	; 89
     4da:	b6 e0       	ldi	r27, 0x06	; 6
     4dc:	e0 e0       	ldi	r30, 0x00	; 0
     4de:	f0 e0       	ldi	r31, 0x00	; 0
     4e0:	5c 91       	ld	r21, X
     4e2:	55 23       	and	r21, r21
     4e4:	31 f0       	breq	.+12     	; 0x4f2 <Kernel_Create_Task+0x36>
     4e6:	31 96       	adiw	r30, 0x01	; 1
     4e8:	ae 5d       	subi	r26, 0xDE	; 222
     4ea:	be 4f       	sbci	r27, 0xFE	; 254
     4ec:	e0 31       	cpi	r30, 0x10	; 16
     4ee:	f1 05       	cpc	r31, r1
     4f0:	b9 f7       	brne	.-18     	; 0x4e0 <Kernel_Create_Task+0x24>
     4f2:	57 01       	movw	r10, r14
     4f4:	68 01       	movw	r12, r16
     4f6:	79 01       	movw	r14, r18
     4f8:	04 2f       	mov	r16, r20
     4fa:	ab 01       	movw	r20, r22
     4fc:	bc 01       	movw	r22, r24
     4fe:	80 91 b2 04 	lds	r24, 0x04B2	; 0x8004b2 <Tasks>
     502:	90 91 b3 04 	lds	r25, 0x04B3	; 0x8004b3 <Tasks+0x1>
     506:	01 96       	adiw	r24, 0x01	; 1
     508:	90 93 b3 04 	sts	0x04B3, r25	; 0x8004b3 <Tasks+0x1>
     50c:	80 93 b2 04 	sts	0x04B2, r24	; 0x8004b2 <Tasks>
     510:	9f 01       	movw	r18, r30
     512:	2f 5f       	subi	r18, 0xFF	; 255
     514:	3f 4f       	sbci	r19, 0xFF	; 255
     516:	a2 e2       	ldi	r26, 0x22	; 34
     518:	b1 e0       	ldi	r27, 0x01	; 1
     51a:	ea 9f       	mul	r30, r26
     51c:	c0 01       	movw	r24, r0
     51e:	eb 9f       	mul	r30, r27
     520:	90 0d       	add	r25, r0
     522:	fa 9f       	mul	r31, r26
     524:	90 0d       	add	r25, r0
     526:	11 24       	eor	r1, r1
     528:	8c 5a       	subi	r24, 0xAC	; 172
     52a:	9a 4f       	sbci	r25, 0xFA	; 250
     52c:	67 df       	rcall	.-306    	; 0x3fc <Kernel_Create_Task_At>
     52e:	02 c0       	rjmp	.+4      	; 0x534 <Kernel_Create_Task+0x78>
     530:	80 e0       	ldi	r24, 0x00	; 0
     532:	90 e0       	ldi	r25, 0x00	; 0
     534:	1f 91       	pop	r17
     536:	0f 91       	pop	r16
     538:	ff 90       	pop	r15
     53a:	ef 90       	pop	r14
     53c:	df 90       	pop	r13
     53e:	cf 90       	pop	r12
     540:	bf 90       	pop	r11
     542:	af 90       	pop	r10
     544:	08 95       	ret

00000546 <Kernel_Chan_Init>:
     546:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <_edata>
     54a:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <_edata+0x1>
     54e:	40 97       	sbiw	r24, 0x10	; 16
     550:	18 f0       	brcs	.+6      	; 0x558 <Kernel_Chan_Init+0x12>
     552:	82 e0       	ldi	r24, 0x02	; 2
     554:	88 b9       	out	0x08, r24	; 8
     556:	ff cf       	rjmp	.-2      	; 0x556 <Kernel_Chan_Init+0x10>
     558:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <_edata>
     55c:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <_edata+0x1>
     560:	8b e2       	ldi	r24, 0x2B	; 43
     562:	82 9f       	mul	r24, r18
     564:	f0 01       	movw	r30, r0
     566:	83 9f       	mul	r24, r19
     568:	f0 0d       	add	r31, r0
     56a:	11 24       	eor	r1, r1
     56c:	ee 5f       	subi	r30, 0xFE	; 254
     56e:	fd 4f       	sbci	r31, 0xFD	; 253
     570:	91 e0       	ldi	r25, 0x01	; 1
     572:	90 83       	st	Z, r25
     574:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <_edata>
     578:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <_edata+0x1>
     57c:	82 9f       	mul	r24, r18
     57e:	f0 01       	movw	r30, r0
     580:	83 9f       	mul	r24, r19
     582:	f0 0d       	add	r31, r0
     584:	11 24       	eor	r1, r1
     586:	ee 5f       	subi	r30, 0xFE	; 254
     588:	fd 4f       	sbci	r31, 0xFD	; 253
     58a:	14 a2       	std	Z+36, r1	; 0x24
     58c:	13 a2       	std	Z+35, r1	; 0x23
     58e:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <_edata>
     592:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <_edata+0x1>
     596:	82 9f       	mul	r24, r18
     598:	f0 01       	movw	r30, r0
     59a:	83 9f       	mul	r24, r19
     59c:	f0 0d       	add	r31, r0
     59e:	11 24       	eor	r1, r1
     5a0:	ee 5f       	subi	r30, 0xFE	; 254
     5a2:	fd 4f       	sbci	r31, 0xFD	; 253
     5a4:	16 a2       	std	Z+38, r1	; 0x26
     5a6:	15 a2       	std	Z+37, r1	; 0x25
     5a8:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <_edata>
     5ac:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <_edata+0x1>
     5b0:	82 9f       	mul	r24, r18
     5b2:	f0 01       	movw	r30, r0
     5b4:	83 9f       	mul	r24, r19
     5b6:	f0 0d       	add	r31, r0
     5b8:	11 24       	eor	r1, r1
     5ba:	ee 5f       	subi	r30, 0xFE	; 254
     5bc:	fd 4f       	sbci	r31, 0xFD	; 253
     5be:	10 a6       	std	Z+40, r1	; 0x28
     5c0:	17 a2       	std	Z+39, r1	; 0x27
     5c2:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <_edata>
     5c6:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <_edata+0x1>
     5ca:	01 96       	adiw	r24, 0x01	; 1
     5cc:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <_edata+0x1>
     5d0:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <_edata>
     5d4:	08 95       	ret

000005d6 <Kernel_Chan_Send>:
     5d6:	af 92       	push	r10
     5d8:	bf 92       	push	r11
     5da:	cf 92       	push	r12
     5dc:	df 92       	push	r13
     5de:	ef 92       	push	r14
     5e0:	ff 92       	push	r15
     5e2:	0f 93       	push	r16
     5e4:	1f 93       	push	r17
     5e6:	cf 93       	push	r28
     5e8:	df 93       	push	r29
     5ea:	a0 91 b8 04 	lds	r26, 0x04B8	; 0x8004b8 <Cp>
     5ee:	b0 91 b9 04 	lds	r27, 0x04B9	; 0x8004b9 <Cp+0x1>
     5f2:	12 96       	adiw	r26, 0x02	; 2
     5f4:	8c 91       	ld	r24, X
     5f6:	12 97       	sbiw	r26, 0x02	; 2
     5f8:	81 30       	cpi	r24, 0x01	; 1
     5fa:	19 f4       	brne	.+6      	; 0x602 <Kernel_Chan_Send+0x2c>
     5fc:	83 e0       	ldi	r24, 0x03	; 3
     5fe:	88 b9       	out	0x08, r24	; 8
     600:	ff cf       	rjmp	.-2      	; 0x600 <Kernel_Chan_Send+0x2a>
     602:	fd 01       	movw	r30, r26
     604:	e3 5f       	subi	r30, 0xF3	; 243
     606:	fe 4f       	sbci	r31, 0xFE	; 254
     608:	20 81       	ld	r18, Z
     60a:	31 81       	ldd	r19, Z+1	; 0x01
     60c:	21 50       	subi	r18, 0x01	; 1
     60e:	31 09       	sbc	r19, r1
     610:	8b e2       	ldi	r24, 0x2B	; 43
     612:	82 9f       	mul	r24, r18
     614:	a0 01       	movw	r20, r0
     616:	83 9f       	mul	r24, r19
     618:	50 0d       	add	r21, r0
     61a:	11 24       	eor	r1, r1
     61c:	fa 01       	movw	r30, r20
     61e:	ee 5f       	subi	r30, 0xFE	; 254
     620:	fd 4f       	sbci	r31, 0xFD	; 253
     622:	90 81       	ld	r25, Z
     624:	91 11       	cpse	r25, r1
     626:	03 c0       	rjmp	.+6      	; 0x62e <Kernel_Chan_Send+0x58>
     628:	82 e0       	ldi	r24, 0x02	; 2
     62a:	88 b9       	out	0x08, r24	; 8
     62c:	ff cf       	rjmp	.-2      	; 0x62c <Kernel_Chan_Send+0x56>
     62e:	92 30       	cpi	r25, 0x02	; 2
     630:	19 f4       	brne	.+6      	; 0x638 <Kernel_Chan_Send+0x62>
     632:	84 e0       	ldi	r24, 0x04	; 4
     634:	88 b9       	out	0x08, r24	; 8
     636:	ff cf       	rjmp	.-2      	; 0x636 <Kernel_Chan_Send+0x60>
     638:	ed 01       	movw	r28, r26
     63a:	c1 5f       	subi	r28, 0xF1	; 241
     63c:	de 4f       	sbci	r29, 0xFE	; 254
     63e:	28 81       	ld	r18, Y
     640:	39 81       	ldd	r19, Y+1	; 0x01
     642:	32 a7       	std	Z+42, r19	; 0x2a
     644:	21 a7       	std	Z+41, r18	; 0x29
     646:	93 30       	cpi	r25, 0x03	; 3
     648:	89 f5       	brne	.+98     	; 0x6ac <Kernel_Chan_Send+0xd6>
     64a:	ef 01       	movw	r28, r30
     64c:	6f 01       	movw	r12, r30
     64e:	83 e2       	ldi	r24, 0x23	; 35
     650:	c8 0e       	add	r12, r24
     652:	d1 1c       	adc	r13, r1
     654:	da 01       	movw	r26, r20
     656:	ab 5f       	subi	r26, 0xFB	; 251
     658:	bd 4f       	sbci	r27, 0xFD	; 253
     65a:	7d 01       	movw	r14, r26
     65c:	5f 01       	movw	r10, r30
     65e:	b9 e2       	ldi	r27, 0x29	; 41
     660:	ab 0e       	add	r10, r27
     662:	b1 1c       	adc	r11, r1
     664:	f6 01       	movw	r30, r12
     666:	80 81       	ld	r24, Z
     668:	91 81       	ldd	r25, Z+1	; 0x01
     66a:	18 16       	cp	r1, r24
     66c:	19 06       	cpc	r1, r25
     66e:	dc f4       	brge	.+54     	; 0x6a6 <Kernel_Chan_Send+0xd0>
     670:	c7 01       	movw	r24, r14
     672:	34 de       	rcall	.-920    	; 0x2dc <dequeue>
     674:	8c 01       	movw	r16, r24
     676:	fc 01       	movw	r30, r24
     678:	e5 5f       	subi	r30, 0xF5	; 245
     67a:	fe 4f       	sbci	r31, 0xFE	; 254
     67c:	d5 01       	movw	r26, r10
     67e:	8d 91       	ld	r24, X+
     680:	9c 91       	ld	r25, X
     682:	91 83       	std	Z+1, r25	; 0x01
     684:	80 83       	st	Z, r24
     686:	c8 01       	movw	r24, r16
     688:	8a de       	rcall	.-748    	; 0x39e <setReady>
     68a:	80 91 b8 04 	lds	r24, 0x04B8	; 0x8004b8 <Cp>
     68e:	90 91 b9 04 	lds	r25, 0x04B9	; 0x8004b9 <Cp+0x1>
     692:	fc 01       	movw	r30, r24
     694:	22 81       	ldd	r18, Z+2	; 0x02
     696:	d8 01       	movw	r26, r16
     698:	12 96       	adiw	r26, 0x02	; 2
     69a:	3c 91       	ld	r19, X
     69c:	32 17       	cp	r19, r18
     69e:	10 f7       	brcc	.-60     	; 0x664 <Kernel_Chan_Send+0x8e>
     6a0:	7e de       	rcall	.-772    	; 0x39e <setReady>
     6a2:	42 de       	rcall	.-892    	; 0x328 <Dispatch>
     6a4:	df cf       	rjmp	.-66     	; 0x664 <Kernel_Chan_Send+0x8e>
     6a6:	81 e0       	ldi	r24, 0x01	; 1
     6a8:	88 83       	st	Y, r24
     6aa:	08 c0       	rjmp	.+16     	; 0x6bc <Kernel_Chan_Send+0xe6>
     6ac:	82 e0       	ldi	r24, 0x02	; 2
     6ae:	80 83       	st	Z, r24
     6b0:	b2 83       	std	Z+2, r27	; 0x02
     6b2:	a1 83       	std	Z+1, r26	; 0x01
     6b4:	ab 5f       	subi	r26, 0xFB	; 251
     6b6:	be 4f       	sbci	r27, 0xFE	; 254
     6b8:	83 e0       	ldi	r24, 0x03	; 3
     6ba:	8c 93       	st	X, r24
     6bc:	df 91       	pop	r29
     6be:	cf 91       	pop	r28
     6c0:	1f 91       	pop	r17
     6c2:	0f 91       	pop	r16
     6c4:	ff 90       	pop	r15
     6c6:	ef 90       	pop	r14
     6c8:	df 90       	pop	r13
     6ca:	cf 90       	pop	r12
     6cc:	bf 90       	pop	r11
     6ce:	af 90       	pop	r10
     6d0:	08 95       	ret

000006d2 <Kernel_Chan_Receive>:
     6d2:	ef 92       	push	r14
     6d4:	ff 92       	push	r15
     6d6:	0f 93       	push	r16
     6d8:	1f 93       	push	r17
     6da:	cf 93       	push	r28
     6dc:	df 93       	push	r29
     6de:	c0 91 b8 04 	lds	r28, 0x04B8	; 0x8004b8 <Cp>
     6e2:	d0 91 b9 04 	lds	r29, 0x04B9	; 0x8004b9 <Cp+0x1>
     6e6:	8a 81       	ldd	r24, Y+2	; 0x02
     6e8:	81 30       	cpi	r24, 0x01	; 1
     6ea:	19 f4       	brne	.+6      	; 0x6f2 <Kernel_Chan_Receive+0x20>
     6ec:	83 e0       	ldi	r24, 0x03	; 3
     6ee:	88 b9       	out	0x08, r24	; 8
     6f0:	ff cf       	rjmp	.-2      	; 0x6f0 <Kernel_Chan_Receive+0x1e>
     6f2:	fe 01       	movw	r30, r28
     6f4:	e3 5f       	subi	r30, 0xF3	; 243
     6f6:	fe 4f       	sbci	r31, 0xFE	; 254
     6f8:	e0 80       	ld	r14, Z
     6fa:	f1 80       	ldd	r15, Z+1	; 0x01
     6fc:	81 e0       	ldi	r24, 0x01	; 1
     6fe:	e8 1a       	sub	r14, r24
     700:	f1 08       	sbc	r15, r1
     702:	2b e2       	ldi	r18, 0x2B	; 43
     704:	2e 9d       	mul	r18, r14
     706:	c0 01       	movw	r24, r0
     708:	2f 9d       	mul	r18, r15
     70a:	90 0d       	add	r25, r0
     70c:	11 24       	eor	r1, r1
     70e:	8c 01       	movw	r16, r24
     710:	0e 5f       	subi	r16, 0xFE	; 254
     712:	1d 4f       	sbci	r17, 0xFD	; 253
     714:	d8 01       	movw	r26, r16
     716:	2c 91       	ld	r18, X
     718:	21 11       	cpse	r18, r1
     71a:	03 c0       	rjmp	.+6      	; 0x722 <Kernel_Chan_Receive+0x50>
     71c:	82 e0       	ldi	r24, 0x02	; 2
     71e:	88 b9       	out	0x08, r24	; 8
     720:	ff cf       	rjmp	.-2      	; 0x720 <Kernel_Chan_Receive+0x4e>
     722:	22 30       	cpi	r18, 0x02	; 2
     724:	39 f5       	brne	.+78     	; 0x774 <Kernel_Chan_Receive+0xa2>
     726:	f8 01       	movw	r30, r16
     728:	81 a5       	ldd	r24, Z+41	; 0x29
     72a:	92 a5       	ldd	r25, Z+42	; 0x2a
     72c:	fe 01       	movw	r30, r28
     72e:	e5 5f       	subi	r30, 0xF5	; 245
     730:	fe 4f       	sbci	r31, 0xFE	; 254
     732:	91 83       	std	Z+1, r25	; 0x01
     734:	80 83       	st	Z, r24
     736:	d8 01       	movw	r26, r16
     738:	11 96       	adiw	r26, 0x01	; 1
     73a:	8d 91       	ld	r24, X+
     73c:	9c 91       	ld	r25, X
     73e:	12 97       	sbiw	r26, 0x02	; 2
     740:	2e de       	rcall	.-932    	; 0x39e <setReady>
     742:	8a 81       	ldd	r24, Y+2	; 0x02
     744:	d8 01       	movw	r26, r16
     746:	11 96       	adiw	r26, 0x01	; 1
     748:	ed 91       	ld	r30, X+
     74a:	fc 91       	ld	r31, X
     74c:	12 97       	sbiw	r26, 0x02	; 2
     74e:	92 81       	ldd	r25, Z+2	; 0x02
     750:	98 17       	cp	r25, r24
     752:	18 f4       	brcc	.+6      	; 0x75a <Kernel_Chan_Receive+0x88>
     754:	ce 01       	movw	r24, r28
     756:	23 de       	rcall	.-954    	; 0x39e <setReady>
     758:	e7 dd       	rcall	.-1074   	; 0x328 <Dispatch>
     75a:	8b e2       	ldi	r24, 0x2B	; 43
     75c:	8e 9d       	mul	r24, r14
     75e:	f0 01       	movw	r30, r0
     760:	8f 9d       	mul	r24, r15
     762:	f0 0d       	add	r31, r0
     764:	11 24       	eor	r1, r1
     766:	ee 5f       	subi	r30, 0xFE	; 254
     768:	fd 4f       	sbci	r31, 0xFD	; 253
     76a:	12 82       	std	Z+2, r1	; 0x02
     76c:	11 82       	std	Z+1, r1	; 0x01
     76e:	81 e0       	ldi	r24, 0x01	; 1
     770:	80 83       	st	Z, r24
     772:	0a c0       	rjmp	.+20     	; 0x788 <Kernel_Chan_Receive+0xb6>
     774:	be 01       	movw	r22, r28
     776:	8b 5f       	subi	r24, 0xFB	; 251
     778:	9d 4f       	sbci	r25, 0xFD	; 253
     77a:	90 dd       	rcall	.-1248   	; 0x29c <enqueue>
     77c:	83 e0       	ldi	r24, 0x03	; 3
     77e:	f8 01       	movw	r30, r16
     780:	80 83       	st	Z, r24
     782:	cb 5f       	subi	r28, 0xFB	; 251
     784:	de 4f       	sbci	r29, 0xFE	; 254
     786:	88 83       	st	Y, r24
     788:	df 91       	pop	r29
     78a:	cf 91       	pop	r28
     78c:	1f 91       	pop	r17
     78e:	0f 91       	pop	r16
     790:	ff 90       	pop	r15
     792:	ef 90       	pop	r14
     794:	08 95       	ret

00000796 <Kernel_Chan_Write>:
     796:	af 92       	push	r10
     798:	bf 92       	push	r11
     79a:	cf 92       	push	r12
     79c:	df 92       	push	r13
     79e:	ef 92       	push	r14
     7a0:	ff 92       	push	r15
     7a2:	0f 93       	push	r16
     7a4:	1f 93       	push	r17
     7a6:	cf 93       	push	r28
     7a8:	df 93       	push	r29
     7aa:	20 91 b8 04 	lds	r18, 0x04B8	; 0x8004b8 <Cp>
     7ae:	30 91 b9 04 	lds	r19, 0x04B9	; 0x8004b9 <Cp+0x1>
     7b2:	f9 01       	movw	r30, r18
     7b4:	e3 5f       	subi	r30, 0xF3	; 243
     7b6:	fe 4f       	sbci	r31, 0xFE	; 254
     7b8:	40 81       	ld	r20, Z
     7ba:	51 81       	ldd	r21, Z+1	; 0x01
     7bc:	41 50       	subi	r20, 0x01	; 1
     7be:	51 09       	sbc	r21, r1
     7c0:	8b e2       	ldi	r24, 0x2B	; 43
     7c2:	84 9f       	mul	r24, r20
     7c4:	b0 01       	movw	r22, r0
     7c6:	85 9f       	mul	r24, r21
     7c8:	70 0d       	add	r23, r0
     7ca:	11 24       	eor	r1, r1
     7cc:	eb 01       	movw	r28, r22
     7ce:	ce 5f       	subi	r28, 0xFE	; 254
     7d0:	dd 4f       	sbci	r29, 0xFD	; 253
     7d2:	98 81       	ld	r25, Y
     7d4:	91 11       	cpse	r25, r1
     7d6:	03 c0       	rjmp	.+6      	; 0x7de <Kernel_Chan_Write+0x48>
     7d8:	82 e0       	ldi	r24, 0x02	; 2
     7da:	88 b9       	out	0x08, r24	; 8
     7dc:	ff cf       	rjmp	.-2      	; 0x7dc <Kernel_Chan_Write+0x46>
     7de:	92 30       	cpi	r25, 0x02	; 2
     7e0:	19 f4       	brne	.+6      	; 0x7e8 <Kernel_Chan_Write+0x52>
     7e2:	84 e0       	ldi	r24, 0x04	; 4
     7e4:	88 b9       	out	0x08, r24	; 8
     7e6:	ff cf       	rjmp	.-2      	; 0x7e6 <Kernel_Chan_Write+0x50>
     7e8:	93 30       	cpi	r25, 0x03	; 3
     7ea:	b1 f5       	brne	.+108    	; 0x858 <Kernel_Chan_Write+0xc2>
     7ec:	f9 01       	movw	r30, r18
     7ee:	e1 5f       	subi	r30, 0xF1	; 241
     7f0:	fe 4f       	sbci	r31, 0xFE	; 254
     7f2:	80 81       	ld	r24, Z
     7f4:	91 81       	ldd	r25, Z+1	; 0x01
     7f6:	9a a7       	std	Y+42, r25	; 0x2a
     7f8:	89 a7       	std	Y+41, r24	; 0x29
     7fa:	6e 01       	movw	r12, r28
     7fc:	83 e2       	ldi	r24, 0x23	; 35
     7fe:	c8 0e       	add	r12, r24
     800:	d1 1c       	adc	r13, r1
     802:	db 01       	movw	r26, r22
     804:	ab 5f       	subi	r26, 0xFB	; 251
     806:	bd 4f       	sbci	r27, 0xFD	; 253
     808:	7d 01       	movw	r14, r26
     80a:	5e 01       	movw	r10, r28
     80c:	b9 e2       	ldi	r27, 0x29	; 41
     80e:	ab 0e       	add	r10, r27
     810:	b1 1c       	adc	r11, r1
     812:	f6 01       	movw	r30, r12
     814:	80 81       	ld	r24, Z
     816:	91 81       	ldd	r25, Z+1	; 0x01
     818:	18 16       	cp	r1, r24
     81a:	19 06       	cpc	r1, r25
     81c:	dc f4       	brge	.+54     	; 0x854 <Kernel_Chan_Write+0xbe>
     81e:	c7 01       	movw	r24, r14
     820:	5d dd       	rcall	.-1350   	; 0x2dc <dequeue>
     822:	8c 01       	movw	r16, r24
     824:	fc 01       	movw	r30, r24
     826:	e5 5f       	subi	r30, 0xF5	; 245
     828:	fe 4f       	sbci	r31, 0xFE	; 254
     82a:	d5 01       	movw	r26, r10
     82c:	8d 91       	ld	r24, X+
     82e:	9c 91       	ld	r25, X
     830:	91 83       	std	Z+1, r25	; 0x01
     832:	80 83       	st	Z, r24
     834:	c8 01       	movw	r24, r16
     836:	b3 dd       	rcall	.-1178   	; 0x39e <setReady>
     838:	80 91 b8 04 	lds	r24, 0x04B8	; 0x8004b8 <Cp>
     83c:	90 91 b9 04 	lds	r25, 0x04B9	; 0x8004b9 <Cp+0x1>
     840:	fc 01       	movw	r30, r24
     842:	22 81       	ldd	r18, Z+2	; 0x02
     844:	d8 01       	movw	r26, r16
     846:	12 96       	adiw	r26, 0x02	; 2
     848:	3c 91       	ld	r19, X
     84a:	32 17       	cp	r19, r18
     84c:	10 f7       	brcc	.-60     	; 0x812 <Kernel_Chan_Write+0x7c>
     84e:	a7 dd       	rcall	.-1202   	; 0x39e <setReady>
     850:	6b dd       	rcall	.-1322   	; 0x328 <Dispatch>
     852:	df cf       	rjmp	.-66     	; 0x812 <Kernel_Chan_Write+0x7c>
     854:	81 e0       	ldi	r24, 0x01	; 1
     856:	88 83       	st	Y, r24
     858:	df 91       	pop	r29
     85a:	cf 91       	pop	r28
     85c:	1f 91       	pop	r17
     85e:	0f 91       	pop	r16
     860:	ff 90       	pop	r15
     862:	ef 90       	pop	r14
     864:	df 90       	pop	r13
     866:	cf 90       	pop	r12
     868:	bf 90       	pop	r11
     86a:	af 90       	pop	r10
     86c:	08 95       	ret

0000086e <OS_Init>:
     86e:	10 92 b3 04 	sts	0x04B3, r1	; 0x8004b3 <Tasks+0x1>
     872:	10 92 b2 04 	sts	0x04B2, r1	; 0x8004b2 <Tasks>
     876:	10 92 b5 04 	sts	0x04B5, r1	; 0x8004b5 <KernelActive+0x1>
     87a:	10 92 b4 04 	sts	0x04B4, r1	; 0x8004b4 <KernelActive>
     87e:	10 92 b7 04 	sts	0x04B7, r1	; 0x8004b7 <NextP+0x1>
     882:	10 92 b6 04 	sts	0x04B6, r1	; 0x8004b6 <NextP>
     886:	e4 e5       	ldi	r30, 0x54	; 84
     888:	f5 e0       	ldi	r31, 0x05	; 5
     88a:	82 e2       	ldi	r24, 0x22	; 34
     88c:	91 e0       	ldi	r25, 0x01	; 1
     88e:	df 01       	movw	r26, r30
     890:	9c 01       	movw	r18, r24
     892:	1d 92       	st	X+, r1
     894:	21 50       	subi	r18, 0x01	; 1
     896:	30 40       	sbci	r19, 0x00	; 0
     898:	e1 f7       	brne	.-8      	; 0x892 <OS_Init+0x24>
     89a:	df 01       	movw	r26, r30
     89c:	ab 5f       	subi	r26, 0xFB	; 251
     89e:	be 4f       	sbci	r27, 0xFE	; 254
     8a0:	1c 92       	st	X, r1
     8a2:	ee 5d       	subi	r30, 0xDE	; 222
     8a4:	fe 4f       	sbci	r31, 0xFE	; 254
     8a6:	37 e1       	ldi	r19, 0x17	; 23
     8a8:	e4 37       	cpi	r30, 0x74	; 116
     8aa:	f3 07       	cpc	r31, r19
     8ac:	81 f7       	brne	.-32     	; 0x88e <OS_Init+0x20>
     8ae:	10 92 01 02 	sts	0x0201, r1	; 0x800201 <_edata+0x1>
     8b2:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <_edata>
     8b6:	e2 e0       	ldi	r30, 0x02	; 2
     8b8:	f2 e0       	ldi	r31, 0x02	; 2
     8ba:	8b e2       	ldi	r24, 0x2B	; 43
     8bc:	df 01       	movw	r26, r30
     8be:	28 2f       	mov	r18, r24
     8c0:	1d 92       	st	X+, r1
     8c2:	2a 95       	dec	r18
     8c4:	e9 f7       	brne	.-6      	; 0x8c0 <OS_Init+0x52>
     8c6:	10 82       	st	Z, r1
     8c8:	bb 96       	adiw	r30, 0x2b	; 43
     8ca:	34 e0       	ldi	r19, 0x04	; 4
     8cc:	e2 3b       	cpi	r30, 0xB2	; 178
     8ce:	f3 07       	cpc	r31, r19
     8d0:	a9 f7       	brne	.-22     	; 0x8bc <OS_Init+0x4e>
     8d2:	08 95       	ret

000008d4 <OS_Start>:
     8d4:	af 92       	push	r10
     8d6:	bf 92       	push	r11
     8d8:	df 92       	push	r13
     8da:	ef 92       	push	r14
     8dc:	ff 92       	push	r15
     8de:	0f 93       	push	r16
     8e0:	1f 93       	push	r17
     8e2:	cf 93       	push	r28
     8e4:	df 93       	push	r29
     8e6:	80 91 b4 04 	lds	r24, 0x04B4	; 0x8004b4 <KernelActive>
     8ea:	90 91 b5 04 	lds	r25, 0x04B5	; 0x8004b5 <KernelActive+0x1>
     8ee:	89 2b       	or	r24, r25
     8f0:	09 f0       	breq	.+2      	; 0x8f4 <OS_Start+0x20>
     8f2:	8b c0       	rjmp	.+278    	; 0xa0a <OS_Start+0x136>
     8f4:	80 91 b2 04 	lds	r24, 0x04B2	; 0x8004b2 <Tasks>
     8f8:	90 91 b3 04 	lds	r25, 0x04B3	; 0x8004b3 <Tasks+0x1>
     8fc:	89 2b       	or	r24, r25
     8fe:	09 f4       	brne	.+2      	; 0x902 <OS_Start+0x2e>
     900:	84 c0       	rjmp	.+264    	; 0xa0a <OS_Start+0x136>
     902:	f8 94       	cli
     904:	81 e0       	ldi	r24, 0x01	; 1
     906:	90 e0       	ldi	r25, 0x00	; 0
     908:	90 93 b5 04 	sts	0x04B5, r25	; 0x8004b5 <KernelActive+0x1>
     90c:	80 93 b4 04 	sts	0x04B4, r24	; 0x8004b4 <KernelActive>
     910:	0b dd       	rcall	.-1514   	; 0x328 <Dispatch>
     912:	84 e0       	ldi	r24, 0x04	; 4
     914:	d8 2e       	mov	r13, r24
     916:	e0 91 b8 04 	lds	r30, 0x04B8	; 0x8004b8 <Cp>
     91a:	f0 91 b9 04 	lds	r31, 0x04B9	; 0x8004b9 <Cp+0x1>
     91e:	df 01       	movw	r26, r30
     920:	a8 5f       	subi	r26, 0xF8	; 248
     922:	be 4f       	sbci	r27, 0xFE	; 254
     924:	1c 92       	st	X, r1
     926:	83 81       	ldd	r24, Z+3	; 0x03
     928:	94 81       	ldd	r25, Z+4	; 0x04
     92a:	90 93 dd 17 	sts	0x17DD, r25	; 0x8017dd <CurrentSp+0x1>
     92e:	80 93 dc 17 	sts	0x17DC, r24	; 0x8017dc <CurrentSp>
     932:	f5 db       	rcall	.-2070   	; 0x11e <CSwitch>
     934:	c0 91 b8 04 	lds	r28, 0x04B8	; 0x8004b8 <Cp>
     938:	d0 91 b9 04 	lds	r29, 0x04B9	; 0x8004b9 <Cp+0x1>
     93c:	80 91 dc 17 	lds	r24, 0x17DC	; 0x8017dc <CurrentSp>
     940:	90 91 dd 17 	lds	r25, 0x17DD	; 0x8017dd <CurrentSp+0x1>
     944:	9c 83       	std	Y+4, r25	; 0x04
     946:	8b 83       	std	Y+3, r24	; 0x03
     948:	fe 01       	movw	r30, r28
     94a:	e8 5f       	subi	r30, 0xF8	; 248
     94c:	fe 4f       	sbci	r31, 0xFE	; 254
     94e:	80 81       	ld	r24, Z
     950:	90 e0       	ldi	r25, 0x00	; 0
     952:	89 30       	cpi	r24, 0x09	; 9
     954:	91 05       	cpc	r25, r1
     956:	f8 f6       	brcc	.-66     	; 0x916 <OS_Start+0x42>
     958:	fc 01       	movw	r30, r24
     95a:	88 27       	eor	r24, r24
     95c:	ee 58       	subi	r30, 0x8E	; 142
     95e:	ff 4f       	sbci	r31, 0xFF	; 255
     960:	8f 4f       	sbci	r24, 0xFF	; 255
     962:	28 c7       	rjmp	.+3664   	; 0x17b4 <__tablejump2__>
     964:	fe 01       	movw	r30, r28
     966:	e0 5e       	subi	r30, 0xE0	; 224
     968:	fe 4f       	sbci	r31, 0xFE	; 254
     96a:	e0 80       	ld	r14, Z
     96c:	f1 80       	ldd	r15, Z+1	; 0x01
     96e:	32 97       	sbiw	r30, 0x02	; 2
     970:	00 81       	ld	r16, Z
     972:	11 81       	ldd	r17, Z+1	; 0x01
     974:	32 97       	sbiw	r30, 0x02	; 2
     976:	20 81       	ld	r18, Z
     978:	31 81       	ldd	r19, Z+1	; 0x01
     97a:	5e 01       	movw	r10, r28
     97c:	85 ee       	ldi	r24, 0xE5	; 229
     97e:	a8 1a       	sub	r10, r24
     980:	8e ef       	ldi	r24, 0xFE	; 254
     982:	b8 0a       	sbc	r11, r24
     984:	f5 01       	movw	r30, r10
     986:	40 81       	ld	r20, Z
     988:	72 97       	sbiw	r30, 0x12	; 18
     98a:	60 81       	ld	r22, Z
     98c:	71 81       	ldd	r23, Z+1	; 0x01
     98e:	33 97       	sbiw	r30, 0x03	; 3
     990:	80 81       	ld	r24, Z
     992:	91 81       	ldd	r25, Z+1	; 0x01
     994:	93 dd       	rcall	.-1242   	; 0x4bc <Kernel_Create_Task>
     996:	f5 01       	movw	r30, r10
     998:	80 81       	ld	r24, Z
     99a:	82 30       	cpi	r24, 0x02	; 2
     99c:	08 f0       	brcs	.+2      	; 0x9a0 <OS_Start+0xcc>
     99e:	bb cf       	rjmp	.-138    	; 0x916 <OS_Start+0x42>
     9a0:	90 81       	ld	r25, Z
     9a2:	8a 81       	ldd	r24, Y+2	; 0x02
     9a4:	98 17       	cp	r25, r24
     9a6:	08 f0       	brcs	.+2      	; 0x9aa <OS_Start+0xd6>
     9a8:	b6 cf       	rjmp	.-148    	; 0x916 <OS_Start+0x42>
     9aa:	ce 01       	movw	r24, r28
     9ac:	f8 dc       	rcall	.-1552   	; 0x39e <setReady>
     9ae:	27 c0       	rjmp	.+78     	; 0x9fe <OS_Start+0x12a>
     9b0:	fe 01       	movw	r30, r28
     9b2:	e7 5e       	subi	r30, 0xE7	; 231
     9b4:	fe 4f       	sbci	r31, 0xFE	; 254
     9b6:	11 82       	std	Z+1, r1	; 0x01
     9b8:	10 82       	st	Z, r1
     9ba:	cb 5f       	subi	r28, 0xFB	; 251
     9bc:	de 4f       	sbci	r29, 0xFE	; 254
     9be:	d8 82       	st	Y, r13
     9c0:	1e c0       	rjmp	.+60     	; 0x9fe <OS_Start+0x12a>
     9c2:	cb 5f       	subi	r28, 0xFB	; 251
     9c4:	de 4f       	sbci	r29, 0xFE	; 254
     9c6:	18 82       	st	Y, r1
     9c8:	80 91 b2 04 	lds	r24, 0x04B2	; 0x8004b2 <Tasks>
     9cc:	90 91 b3 04 	lds	r25, 0x04B3	; 0x8004b3 <Tasks+0x1>
     9d0:	01 97       	sbiw	r24, 0x01	; 1
     9d2:	90 93 b3 04 	sts	0x04B3, r25	; 0x8004b3 <Tasks+0x1>
     9d6:	80 93 b2 04 	sts	0x04B2, r24	; 0x8004b2 <Tasks>
     9da:	11 c0       	rjmp	.+34     	; 0x9fe <OS_Start+0x12a>
     9dc:	b4 dd       	rcall	.-1176   	; 0x546 <Kernel_Chan_Init>
     9de:	c5 5f       	subi	r28, 0xF5	; 245
     9e0:	de 4f       	sbci	r29, 0xFE	; 254
     9e2:	99 83       	std	Y+1, r25	; 0x01
     9e4:	88 83       	st	Y, r24
     9e6:	97 cf       	rjmp	.-210    	; 0x916 <OS_Start+0x42>
     9e8:	f6 dd       	rcall	.-1044   	; 0x5d6 <Kernel_Chan_Send>
     9ea:	e0 91 b8 04 	lds	r30, 0x04B8	; 0x8004b8 <Cp>
     9ee:	f0 91 b9 04 	lds	r31, 0x04B9	; 0x8004b9 <Cp+0x1>
     9f2:	eb 5f       	subi	r30, 0xFB	; 251
     9f4:	fe 4f       	sbci	r31, 0xFE	; 254
     9f6:	80 81       	ld	r24, Z
     9f8:	83 30       	cpi	r24, 0x03	; 3
     9fa:	09 f0       	breq	.+2      	; 0x9fe <OS_Start+0x12a>
     9fc:	8c cf       	rjmp	.-232    	; 0x916 <OS_Start+0x42>
     9fe:	94 dc       	rcall	.-1752   	; 0x328 <Dispatch>
     a00:	8a cf       	rjmp	.-236    	; 0x916 <OS_Start+0x42>
     a02:	67 de       	rcall	.-818    	; 0x6d2 <Kernel_Chan_Receive>
     a04:	f2 cf       	rjmp	.-28     	; 0x9ea <OS_Start+0x116>
     a06:	c7 de       	rcall	.-626    	; 0x796 <Kernel_Chan_Write>
     a08:	86 cf       	rjmp	.-244    	; 0x916 <OS_Start+0x42>
     a0a:	df 91       	pop	r29
     a0c:	cf 91       	pop	r28
     a0e:	1f 91       	pop	r17
     a10:	0f 91       	pop	r16
     a12:	ff 90       	pop	r15
     a14:	ef 90       	pop	r14
     a16:	df 90       	pop	r13
     a18:	bf 90       	pop	r11
     a1a:	af 90       	pop	r10
     a1c:	08 95       	ret

00000a1e <Task_Create_System>:
     a1e:	ef 92       	push	r14
     a20:	ff 92       	push	r15
     a22:	0f 93       	push	r16
     a24:	1f 93       	push	r17
     a26:	20 91 b4 04 	lds	r18, 0x04B4	; 0x8004b4 <KernelActive>
     a2a:	30 91 b5 04 	lds	r19, 0x04B5	; 0x8004b5 <KernelActive+0x1>
     a2e:	23 2b       	or	r18, r19
     a30:	01 f1       	breq	.+64     	; 0xa72 <Task_Create_System+0x54>
     a32:	f8 94       	cli
     a34:	20 91 b8 04 	lds	r18, 0x04B8	; 0x8004b8 <Cp>
     a38:	30 91 b9 04 	lds	r19, 0x04B9	; 0x8004b9 <Cp+0x1>
     a3c:	f9 01       	movw	r30, r18
     a3e:	e8 5f       	subi	r30, 0xF8	; 248
     a40:	fe 4f       	sbci	r31, 0xFE	; 254
     a42:	41 e0       	ldi	r20, 0x01	; 1
     a44:	40 83       	st	Z, r20
     a46:	32 97       	sbiw	r30, 0x02	; 2
     a48:	91 83       	std	Z+1, r25	; 0x01
     a4a:	80 83       	st	Z, r24
     a4c:	33 96       	adiw	r30, 0x03	; 3
     a4e:	71 83       	std	Z+1, r23	; 0x01
     a50:	60 83       	st	Z, r22
     a52:	72 96       	adiw	r30, 0x12	; 18
     a54:	10 82       	st	Z, r1
     a56:	31 96       	adiw	r30, 0x01	; 1
     a58:	11 82       	std	Z+1, r1	; 0x01
     a5a:	10 82       	st	Z, r1
     a5c:	32 96       	adiw	r30, 0x02	; 2
     a5e:	11 82       	std	Z+1, r1	; 0x01
     a60:	10 82       	st	Z, r1
     a62:	32 96       	adiw	r30, 0x02	; 2
     a64:	11 82       	std	Z+1, r1	; 0x01
     a66:	10 82       	st	Z, r1
     a68:	80 e1       	ldi	r24, 0x10	; 16
     a6a:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <__TEXT_REGION_LENGTH__+0x70010b>
     a6e:	ac db       	rcall	.-2216   	; 0x1c8 <Enter_Kernel>
     a70:	08 c0       	rjmp	.+16     	; 0xa82 <Task_Create_System+0x64>
     a72:	e1 2c       	mov	r14, r1
     a74:	f1 2c       	mov	r15, r1
     a76:	00 e0       	ldi	r16, 0x00	; 0
     a78:	10 e0       	ldi	r17, 0x00	; 0
     a7a:	20 e0       	ldi	r18, 0x00	; 0
     a7c:	30 e0       	ldi	r19, 0x00	; 0
     a7e:	40 e0       	ldi	r20, 0x00	; 0
     a80:	1d dd       	rcall	.-1478   	; 0x4bc <Kernel_Create_Task>
     a82:	e0 91 b8 04 	lds	r30, 0x04B8	; 0x8004b8 <Cp>
     a86:	f0 91 b9 04 	lds	r31, 0x04B9	; 0x8004b9 <Cp+0x1>
     a8a:	80 81       	ld	r24, Z
     a8c:	91 81       	ldd	r25, Z+1	; 0x01
     a8e:	1f 91       	pop	r17
     a90:	0f 91       	pop	r16
     a92:	ff 90       	pop	r15
     a94:	ef 90       	pop	r14
     a96:	08 95       	ret

00000a98 <Task_Create_Idle>:
     a98:	ef 92       	push	r14
     a9a:	ff 92       	push	r15
     a9c:	0f 93       	push	r16
     a9e:	1f 93       	push	r17
     aa0:	20 91 b4 04 	lds	r18, 0x04B4	; 0x8004b4 <KernelActive>
     aa4:	30 91 b5 04 	lds	r19, 0x04B5	; 0x8004b5 <KernelActive+0x1>
     aa8:	23 2b       	or	r18, r19
     aaa:	29 f1       	breq	.+74     	; 0xaf6 <Task_Create_Idle+0x5e>
     aac:	f8 94       	cli
     aae:	e0 91 b8 04 	lds	r30, 0x04B8	; 0x8004b8 <Cp>
     ab2:	f0 91 b9 04 	lds	r31, 0x04B9	; 0x8004b9 <Cp+0x1>
     ab6:	df 01       	movw	r26, r30
     ab8:	a8 5f       	subi	r26, 0xF8	; 248
     aba:	be 4f       	sbci	r27, 0xFE	; 254
     abc:	21 e0       	ldi	r18, 0x01	; 1
     abe:	2c 93       	st	X, r18
     ac0:	12 97       	sbiw	r26, 0x02	; 2
     ac2:	11 96       	adiw	r26, 0x01	; 1
     ac4:	9c 93       	st	X, r25
     ac6:	8e 93       	st	-X, r24
     ac8:	13 96       	adiw	r26, 0x03	; 3
     aca:	11 96       	adiw	r26, 0x01	; 1
     acc:	7c 93       	st	X, r23
     ace:	6e 93       	st	-X, r22
     ad0:	83 e0       	ldi	r24, 0x03	; 3
     ad2:	82 83       	std	Z+2, r24	; 0x02
     ad4:	18 96       	adiw	r26, 0x08	; 8
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 92       	st	X, r1
     ada:	1e 92       	st	-X, r1
     adc:	12 96       	adiw	r26, 0x02	; 2
     ade:	11 96       	adiw	r26, 0x01	; 1
     ae0:	1c 92       	st	X, r1
     ae2:	1e 92       	st	-X, r1
     ae4:	eb 5e       	subi	r30, 0xEB	; 235
     ae6:	fe 4f       	sbci	r31, 0xFE	; 254
     ae8:	11 82       	std	Z+1, r1	; 0x01
     aea:	10 82       	st	Z, r1
     aec:	80 e1       	ldi	r24, 0x10	; 16
     aee:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <__TEXT_REGION_LENGTH__+0x70010b>
     af2:	6a db       	rcall	.-2348   	; 0x1c8 <Enter_Kernel>
     af4:	08 c0       	rjmp	.+16     	; 0xb06 <Task_Create_Idle+0x6e>
     af6:	e1 2c       	mov	r14, r1
     af8:	f1 2c       	mov	r15, r1
     afa:	00 e0       	ldi	r16, 0x00	; 0
     afc:	10 e0       	ldi	r17, 0x00	; 0
     afe:	20 e0       	ldi	r18, 0x00	; 0
     b00:	30 e0       	ldi	r19, 0x00	; 0
     b02:	43 e0       	ldi	r20, 0x03	; 3
     b04:	db dc       	rcall	.-1610   	; 0x4bc <Kernel_Create_Task>
     b06:	e0 91 b8 04 	lds	r30, 0x04B8	; 0x8004b8 <Cp>
     b0a:	f0 91 b9 04 	lds	r31, 0x04B9	; 0x8004b9 <Cp+0x1>
     b0e:	80 81       	ld	r24, Z
     b10:	91 81       	ldd	r25, Z+1	; 0x01
     b12:	1f 91       	pop	r17
     b14:	0f 91       	pop	r16
     b16:	ff 90       	pop	r15
     b18:	ef 90       	pop	r14
     b1a:	08 95       	ret

00000b1c <Task_Next_2>:
     b1c:	80 91 b4 04 	lds	r24, 0x04B4	; 0x8004b4 <KernelActive>
     b20:	90 91 b5 04 	lds	r25, 0x04B5	; 0x8004b5 <KernelActive+0x1>
     b24:	89 2b       	or	r24, r25
     b26:	69 f0       	breq	.+26     	; 0xb42 <Task_Next_2+0x26>
     b28:	f8 94       	cli
     b2a:	e0 91 b8 04 	lds	r30, 0x04B8	; 0x8004b8 <Cp>
     b2e:	f0 91 b9 04 	lds	r31, 0x04B9	; 0x8004b9 <Cp+0x1>
     b32:	e8 5f       	subi	r30, 0xF8	; 248
     b34:	fe 4f       	sbci	r31, 0xFE	; 254
     b36:	82 e0       	ldi	r24, 0x02	; 2
     b38:	80 83       	st	Z, r24
     b3a:	80 e1       	ldi	r24, 0x10	; 16
     b3c:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <__TEXT_REGION_LENGTH__+0x70010b>
     b40:	43 cb       	rjmp	.-2426   	; 0x1c8 <Enter_Kernel>
     b42:	08 95       	ret

00000b44 <Timer_Init>:
  * A Simple Test
  *============
  */
void Timer_Init()
{
  Disable_Interrupt();
     b44:	f8 94       	cli
  //Clear timer config.
  TCCR1A = 0;
     b46:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
  TCCR1B = 0;
     b4a:	e1 e8       	ldi	r30, 0x81	; 129
     b4c:	f0 e0       	ldi	r31, 0x00	; 0
     b4e:	10 82       	st	Z, r1
  //Set to CTC (mode 4)
  TCCR1B |= (1<<WGM12);
     b50:	80 81       	ld	r24, Z
     b52:	88 60       	ori	r24, 0x08	; 8
     b54:	80 83       	st	Z, r24

  //Set prescaller to 1/8
  TCCR1B |= (1<<CS11);
     b56:	80 81       	ld	r24, Z
     b58:	82 60       	ori	r24, 0x02	; 2
     b5a:	80 83       	st	Z, r24

  //Set TOP value 0.0001s*MSECPERTICK
  OCR1A = 2000*MSECPERTICK;
     b5c:	80 e2       	ldi	r24, 0x20	; 32
     b5e:	9e e4       	ldi	r25, 0x4E	; 78
     b60:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x700089>
     b64:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x700088>

  //Enable interrupt A for timer 3.
  TIMSK1 |= (1<<OCIE1A);
     b68:	ef e6       	ldi	r30, 0x6F	; 111
     b6a:	f0 e0       	ldi	r31, 0x00	; 0
     b6c:	80 81       	ld	r24, Z
     b6e:	82 60       	ori	r24, 0x02	; 2
     b70:	80 83       	st	Z, r24

  //Set timer to 0 (optional here).
  TCNT1 = 0;
     b72:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x700085>
     b76:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x700084>

  // enable interrupt
  Enable_Interrupt();
     b7a:	78 94       	sei
     b7c:	08 95       	ret

00000b7e <Kernel_Tick>:
}

void Kernel_Tick()
{
     b7e:	ef 92       	push	r14
     b80:	ff 92       	push	r15
     b82:	0f 93       	push	r16
     b84:	1f 93       	push	r17
     b86:	cf 93       	push	r28
     b88:	df 93       	push	r29
  current_tick++;
     b8a:	80 91 ba 04 	lds	r24, 0x04BA	; 0x8004ba <current_tick>
     b8e:	90 91 bb 04 	lds	r25, 0x04BB	; 0x8004bb <current_tick+0x1>
     b92:	01 96       	adiw	r24, 0x01	; 1
     b94:	90 93 bb 04 	sts	0x04BB, r25	; 0x8004bb <current_tick+0x1>
     b98:	80 93 ba 04 	sts	0x04BA, r24	; 0x8004ba <current_tick>
     b9c:	c9 e5       	ldi	r28, 0x59	; 89
     b9e:	d6 e0       	ldi	r29, 0x06	; 6
  int x;
  int ready_time_tasks = 0;
     ba0:	00 e0       	ldi	r16, 0x00	; 0
     ba2:	10 e0       	ldi	r17, 0x00	; 0
     ba4:	7e 01       	movw	r14, r28
     ba6:	83 e0       	ldi	r24, 0x03	; 3
     ba8:	e8 1a       	sub	r14, r24
     baa:	81 e0       	ldi	r24, 0x01	; 1
     bac:	f8 0a       	sbc	r15, r24
  for (x = 0; x < MAXPROCESS; x++) {
    if (Process[x].py == TIME && Process[x].state != SUSPENDED){
     bae:	f7 01       	movw	r30, r14
     bb0:	20 81       	ld	r18, Z
     bb2:	38 81       	ld	r19, Y
     bb4:	21 30       	cpi	r18, 0x01	; 1
     bb6:	79 f4       	brne	.+30     	; 0xbd6 <Kernel_Tick+0x58>
     bb8:	34 30       	cpi	r19, 0x04	; 4
     bba:	89 f0       	breq	.+34     	; 0xbde <Kernel_Tick+0x60>
      Process[x].executed_ticks++;
     bbc:	8c 89       	ldd	r24, Y+20	; 0x14
     bbe:	9d 89       	ldd	r25, Y+21	; 0x15
     bc0:	01 96       	adiw	r24, 0x01	; 1
     bc2:	9d 8b       	std	Y+21, r25	; 0x15
     bc4:	8c 8b       	std	Y+20, r24	; 0x14
      if (Process[x].executed_ticks >= Process[x].wcet){
     bc6:	4e 85       	ldd	r20, Y+14	; 0x0e
     bc8:	5f 85       	ldd	r21, Y+15	; 0x0f
     bca:	84 17       	cp	r24, r20
     bcc:	95 07       	cpc	r25, r21
     bce:	18 f0       	brcs	.+6      	; 0xbd6 <Kernel_Tick+0x58>

/**
  * TODO: communicate error code
  */
void OS_Abort(unsigned int error) {
	OS_ABORT_DEBUG_PORT = error;
     bd0:	86 e0       	ldi	r24, 0x06	; 6
     bd2:	88 b9       	out	0x08, r24	; 8
     bd4:	ff cf       	rjmp	.-2      	; 0xbd4 <Kernel_Tick+0x56>
      Process[x].executed_ticks++;
      if (Process[x].executed_ticks >= Process[x].wcet){
        OS_Abort(ERROR_WCET_VIOLATION);
      }
    }
    if (Process[x].state == SUSPENDED && Process[x].py == TIME && Process[x].next_schedule == current_tick)
     bd6:	34 30       	cpi	r19, 0x04	; 4
     bd8:	a9 f4       	brne	.+42     	; 0xc04 <Kernel_Tick+0x86>
     bda:	21 30       	cpi	r18, 0x01	; 1
     bdc:	99 f4       	brne	.+38     	; 0xc04 <Kernel_Tick+0x86>
     bde:	8a 89       	ldd	r24, Y+18	; 0x12
     be0:	9b 89       	ldd	r25, Y+19	; 0x13
     be2:	20 91 ba 04 	lds	r18, 0x04BA	; 0x8004ba <current_tick>
     be6:	30 91 bb 04 	lds	r19, 0x04BB	; 0x8004bb <current_tick+0x1>
     bea:	82 17       	cp	r24, r18
     bec:	93 07       	cpc	r25, r19
     bee:	51 f4       	brne	.+20     	; 0xc04 <Kernel_Tick+0x86>
    {
      Process[x].next_schedule = Process[x].next_schedule + Process[x].period;
     bf0:	2c 85       	ldd	r18, Y+12	; 0x0c
     bf2:	3d 85       	ldd	r19, Y+13	; 0x0d
     bf4:	82 0f       	add	r24, r18
     bf6:	93 1f       	adc	r25, r19
     bf8:	9b 8b       	std	Y+19, r25	; 0x13
     bfa:	8a 8b       	std	Y+18, r24	; 0x12
      setReady(&Process[x]);
     bfc:	ce 01       	movw	r24, r28
     bfe:	85 50       	subi	r24, 0x05	; 5
     c00:	91 40       	sbci	r25, 0x01	; 1
     c02:	cd db       	rcall	.-2150   	; 0x39e <setReady>
    }
    if (Process[x].py == TIME && (Process[x].state == RUNNING || Process[x].state == READY))
     c04:	f7 01       	movw	r30, r14
     c06:	80 81       	ld	r24, Z
     c08:	81 30       	cpi	r24, 0x01	; 1
     c0a:	31 f4       	brne	.+12     	; 0xc18 <Kernel_Tick+0x9a>
     c0c:	88 81       	ld	r24, Y
     c0e:	81 50       	subi	r24, 0x01	; 1
     c10:	82 30       	cpi	r24, 0x02	; 2
     c12:	10 f4       	brcc	.+4      	; 0xc18 <Kernel_Tick+0x9a>
    {
      ready_time_tasks++;
     c14:	0f 5f       	subi	r16, 0xFF	; 255
     c16:	1f 4f       	sbci	r17, 0xFF	; 255
     c18:	ce 5d       	subi	r28, 0xDE	; 222
     c1a:	de 4f       	sbci	r29, 0xFE	; 254
void Kernel_Tick()
{
  current_tick++;
  int x;
  int ready_time_tasks = 0;
  for (x = 0; x < MAXPROCESS; x++) {
     c1c:	f8 e1       	ldi	r31, 0x18	; 24
     c1e:	c9 37       	cpi	r28, 0x79	; 121
     c20:	df 07       	cpc	r29, r31
     c22:	09 f0       	breq	.+2      	; 0xc26 <Kernel_Tick+0xa8>
     c24:	bf cf       	rjmp	.-130    	; 0xba4 <Kernel_Tick+0x26>
    if (Process[x].py == TIME && (Process[x].state == RUNNING || Process[x].state == READY))
    {
      ready_time_tasks++;
    }
  }
  if (ready_time_tasks > 1)
     c26:	02 30       	cpi	r16, 0x02	; 2
     c28:	11 05       	cpc	r17, r1
     c2a:	1c f0       	brlt	.+6      	; 0xc32 <Kernel_Tick+0xb4>

/**
  * TODO: communicate error code
  */
void OS_Abort(unsigned int error) {
	OS_ABORT_DEBUG_PORT = error;
     c2c:	85 e0       	ldi	r24, 0x05	; 5
     c2e:	88 b9       	out	0x08, r24	; 8
     c30:	ff cf       	rjmp	.-2      	; 0xc30 <Kernel_Tick+0xb2>
  //   if(Cp->executed_ticks >= Cp->wcet){
  //     OS_Abort(ERROR_WCET_VIOLATION);
  //   }
  // }

}
     c32:	df 91       	pop	r29
     c34:	cf 91       	pop	r28
     c36:	1f 91       	pop	r17
     c38:	0f 91       	pop	r16
     c3a:	ff 90       	pop	r15
     c3c:	ef 90       	pop	r14
     c3e:	08 95       	ret

00000c40 <__vector_17>:

// This ISR fires every MSECPERTICKms and represents our RTOS tick
ISR(TIMER1_COMPA_vect)
{
     c40:	1f 92       	push	r1
     c42:	0f 92       	push	r0
     c44:	0f b6       	in	r0, 0x3f	; 63
     c46:	0f 92       	push	r0
     c48:	11 24       	eor	r1, r1
     c4a:	0b b6       	in	r0, 0x3b	; 59
     c4c:	0f 92       	push	r0
     c4e:	2f 93       	push	r18
     c50:	3f 93       	push	r19
     c52:	4f 93       	push	r20
     c54:	5f 93       	push	r21
     c56:	6f 93       	push	r22
     c58:	7f 93       	push	r23
     c5a:	8f 93       	push	r24
     c5c:	9f 93       	push	r25
     c5e:	af 93       	push	r26
     c60:	bf 93       	push	r27
     c62:	ef 93       	push	r30
     c64:	ff 93       	push	r31
  Kernel_Tick();
     c66:	8b df       	rcall	.-234    	; 0xb7e <Kernel_Tick>
  if (Cp->py >= RR)
     c68:	e0 91 b8 04 	lds	r30, 0x04B8	; 0x8004b8 <Cp>
     c6c:	f0 91 b9 04 	lds	r31, 0x04B9	; 0x8004b9 <Cp+0x1>
     c70:	82 81       	ldd	r24, Z+2	; 0x02
     c72:	82 30       	cpi	r24, 0x02	; 2
     c74:	08 f0       	brcs	.+2      	; 0xc78 <__vector_17+0x38>
  {
    Task_Next_2();
     c76:	52 df       	rcall	.-348    	; 0xb1c <Task_Next_2>
  }
}
     c78:	ff 91       	pop	r31
     c7a:	ef 91       	pop	r30
     c7c:	bf 91       	pop	r27
     c7e:	af 91       	pop	r26
     c80:	9f 91       	pop	r25
     c82:	8f 91       	pop	r24
     c84:	7f 91       	pop	r23
     c86:	6f 91       	pop	r22
     c88:	5f 91       	pop	r21
     c8a:	4f 91       	pop	r20
     c8c:	3f 91       	pop	r19
     c8e:	2f 91       	pop	r18
     c90:	0f 90       	pop	r0
     c92:	0b be       	out	0x3b, r0	; 59
     c94:	0f 90       	pop	r0
     c96:	0f be       	out	0x3f, r0	; 63
     c98:	0f 90       	pop	r0
     c9a:	1f 90       	pop	r1
     c9c:	18 95       	reti

00000c9e <Init_Debug_LEDs>:

void Init_Debug_LEDs()
{
  DDRL |= (1<<PL2);
     c9e:	ea e0       	ldi	r30, 0x0A	; 10
     ca0:	f1 e0       	ldi	r31, 0x01	; 1
     ca2:	80 81       	ld	r24, Z
     ca4:	84 60       	ori	r24, 0x04	; 4
     ca6:	80 83       	st	Z, r24
  DDRL |= (1<<PL3);
     ca8:	80 81       	ld	r24, Z
     caa:	88 60       	ori	r24, 0x08	; 8
     cac:	80 83       	st	Z, r24
  DDRL |= (1<<PL4);
     cae:	80 81       	ld	r24, Z
     cb0:	80 61       	ori	r24, 0x10	; 16
     cb2:	80 83       	st	Z, r24
  DDRC = 0xFF;
     cb4:	8f ef       	ldi	r24, 0xFF	; 255
     cb6:	87 b9       	out	0x07, r24	; 7
     cb8:	08 95       	ret

00000cba <main>:
/**
  * OS main function
  */
int main()
{
   OS_Init();
     cba:	d9 dd       	rcall	.-1102   	; 0x86e <OS_Init>
   Init_Debug_LEDs();
     cbc:	f0 df       	rcall	.-32     	; 0xc9e <Init_Debug_LEDs>
   // Here we create a task for a_main which should be defined externally to create
   // all tasks needed for the application, and then terminate.
   // #TODO this should be created as a system task once we implement this functionality
   Task_Create_Idle(Idle_Task, 0);
     cbe:	60 e0       	ldi	r22, 0x00	; 0
     cc0:	70 e0       	ldi	r23, 0x00	; 0
     cc2:	89 e3       	ldi	r24, 0x39	; 57
     cc4:	91 e0       	ldi	r25, 0x01	; 1
     cc6:	e8 de       	rcall	.-560    	; 0xa98 <Task_Create_Idle>
   Task_Create_System( a_main , PL2);
     cc8:	62 e0       	ldi	r22, 0x02	; 2
     cca:	70 e0       	ldi	r23, 0x00	; 0
     ccc:	89 e7       	ldi	r24, 0x79	; 121
     cce:	98 e0       	ldi	r25, 0x08	; 8
     cd0:	a6 de       	rcall	.-692    	; 0xa1e <Task_Create_System>
   Timer_Init();
     cd2:	38 df       	rcall	.-400    	; 0xb44 <Timer_Init>
   OS_Start();
     cd4:	ff dd       	rcall	.-1026   	; 0x8d4 <OS_Start>
     cd6:	80 e0       	ldi	r24, 0x00	; 0
     cd8:	90 e0       	ldi	r25, 0x00	; 0
     cda:	08 95       	ret

00000cdc <setup>:
		roomba_drive(0, 0);
	}
	
	if(roomba_detect_virtual_wall() == 0)
	{
		setting_v = 0;
     cdc:	c5 d3       	rcall	.+1930   	; 0x1468 <init_uart_usb>
     cde:	d5 d3       	rcall	.+1962   	; 0x148a <init_uart_bt>
     ce0:	72 d4       	rcall	.+2276   	; 0x15c6 <init_uart_roomba>
     ce2:	11 d2       	rcall	.+1058   	; 0x1106 <init_roomba>
     ce4:	08 9a       	sbi	0x01, 0	; 1
     ce6:	10 98       	cbi	0x02, 0	; 2
     ce8:	8b c2       	rjmp	.+1302   	; 0x1200 <init_servos>

00000cea <receive_transmission>:
     cea:	cf 92       	push	r12
     cec:	df 92       	push	r13
     cee:	ef 92       	push	r14
     cf0:	ff 92       	push	r15
     cf2:	0f 93       	push	r16
     cf4:	1f 93       	push	r17
     cf6:	cf 93       	push	r28
     cf8:	df 93       	push	r29
     cfa:	cd b7       	in	r28, 0x3d	; 61
     cfc:	de b7       	in	r29, 0x3e	; 62
     cfe:	ca 5f       	subi	r28, 0xFA	; 250
     d00:	d1 09       	sbc	r29, r1
     d02:	0f b6       	in	r0, 0x3f	; 63
     d04:	f8 94       	cli
     d06:	de bf       	out	0x3e, r29	; 62
     d08:	0f be       	out	0x3f, r0	; 63
     d0a:	cd bf       	out	0x3d, r28	; 61
     d0c:	80 91 e0 17 	lds	r24, 0x17E0	; 0x8017e0 <rx_data_in_blue_tooth_buffer>
     d10:	90 91 e1 17 	lds	r25, 0x17E1	; 0x8017e1 <rx_data_in_blue_tooth_buffer+0x1>
     d14:	01 97       	sbiw	r24, 0x01	; 1
     d16:	09 f0       	breq	.+2      	; 0xd1a <receive_transmission+0x30>
     d18:	de c0       	rjmp	.+444    	; 0xed6 <receive_transmission+0x1ec>
     d1a:	d4 d3       	rcall	.+1960   	; 0x14c4 <serial_read_bt>
     d1c:	8a 33       	cpi	r24, 0x3A	; 58
     d1e:	08 f0       	brcs	.+2      	; 0xd22 <receive_transmission+0x38>
     d20:	da c0       	rjmp	.+436    	; 0xed6 <receive_transmission+0x1ec>
     d22:	83 32       	cpi	r24, 0x23	; 35
     d24:	09 f0       	breq	.+2      	; 0xd28 <receive_transmission+0x3e>
     d26:	d7 c0       	rjmp	.+430    	; 0xed6 <receive_transmission+0x1ec>
     d28:	00 e0       	ldi	r16, 0x00	; 0
     d2a:	10 e0       	ldi	r17, 0x00	; 0
     d2c:	e1 2c       	mov	r14, r1
     d2e:	f1 2c       	mov	r15, r1
     d30:	8a 33       	cpi	r24, 0x3A	; 58
     d32:	20 f0       	brcs	.+8      	; 0xd3c <receive_transmission+0x52>
     d34:	8c 37       	cpi	r24, 0x7C	; 124
     d36:	09 f0       	breq	.+2      	; 0xd3a <receive_transmission+0x50>
     d38:	ce c0       	rjmp	.+412    	; 0xed6 <receive_transmission+0x1ec>
     d3a:	06 c0       	rjmp	.+12     	; 0xd48 <receive_transmission+0x5e>
     d3c:	83 32       	cpi	r24, 0x23	; 35
     d3e:	21 f4       	brne	.+8      	; 0xd48 <receive_transmission+0x5e>
     d40:	00 e0       	ldi	r16, 0x00	; 0
     d42:	10 e0       	ldi	r17, 0x00	; 0
     d44:	e1 2c       	mov	r14, r1
     d46:	f1 2c       	mov	r15, r1
     d48:	20 91 e0 17 	lds	r18, 0x17E0	; 0x8017e0 <rx_data_in_blue_tooth_buffer>
     d4c:	30 91 e1 17 	lds	r19, 0x17E1	; 0x8017e1 <rx_data_in_blue_tooth_buffer+0x1>
     d50:	21 30       	cpi	r18, 0x01	; 1
     d52:	31 05       	cpc	r19, r1
     d54:	69 f7       	brne	.-38     	; 0xd30 <receive_transmission+0x46>
     d56:	b6 d3       	rcall	.+1900   	; 0x14c4 <serial_read_bt>
     d58:	85 32       	cpi	r24, 0x25	; 37
     d5a:	09 f0       	breq	.+2      	; 0xd5e <receive_transmission+0x74>
     d5c:	4d c0       	rjmp	.+154    	; 0xdf8 <receive_transmission+0x10e>
     d5e:	82 e0       	ldi	r24, 0x02	; 2
     d60:	e8 16       	cp	r14, r24
     d62:	f1 04       	cpc	r15, r1
     d64:	c1 f0       	breq	.+48     	; 0xd96 <receive_transmission+0xac>
     d66:	48 f4       	brcc	.+18     	; 0xd7a <receive_transmission+0x90>
     d68:	e1 14       	cp	r14, r1
     d6a:	f1 04       	cpc	r15, r1
     d6c:	89 f0       	breq	.+34     	; 0xd90 <receive_transmission+0xa6>
     d6e:	ea 94       	dec	r14
     d70:	ef 28       	or	r14, r15
     d72:	d9 f4       	brne	.+54     	; 0xdaa <receive_transmission+0xc0>
     d74:	e3 e3       	ldi	r30, 0x33	; 51
     d76:	f0 e0       	ldi	r31, 0x00	; 0
     d78:	13 c0       	rjmp	.+38     	; 0xda0 <receive_transmission+0xb6>
     d7a:	93 e0       	ldi	r25, 0x03	; 3
     d7c:	e9 16       	cp	r14, r25
     d7e:	f1 04       	cpc	r15, r1
     d80:	69 f0       	breq	.+26     	; 0xd9c <receive_transmission+0xb2>
     d82:	84 e0       	ldi	r24, 0x04	; 4
     d84:	e8 16       	cp	r14, r24
     d86:	f1 04       	cpc	r15, r1
     d88:	81 f4       	brne	.+32     	; 0xdaa <receive_transmission+0xc0>
     d8a:	e9 ec       	ldi	r30, 0xC9	; 201
     d8c:	f0 e0       	ldi	r31, 0x00	; 0
     d8e:	08 c0       	rjmp	.+16     	; 0xda0 <receive_transmission+0xb6>
     d90:	e1 e0       	ldi	r30, 0x01	; 1
     d92:	f0 e0       	ldi	r31, 0x00	; 0
     d94:	05 c0       	rjmp	.+10     	; 0xda0 <receive_transmission+0xb6>
     d96:	e5 e6       	ldi	r30, 0x65	; 101
     d98:	f0 e0       	ldi	r31, 0x00	; 0
     d9a:	02 c0       	rjmp	.+4      	; 0xda0 <receive_transmission+0xb6>
     d9c:	e7 e9       	ldi	r30, 0x97	; 151
     d9e:	f0 e0       	ldi	r31, 0x00	; 0
     da0:	ec 0f       	add	r30, r28
     da2:	fd 1f       	adc	r31, r29
     da4:	e0 0f       	add	r30, r16
     da6:	f1 1f       	adc	r31, r17
     da8:	10 82       	st	Z, r1
     daa:	ce 01       	movw	r24, r28
     dac:	01 96       	adiw	r24, 0x01	; 1
     dae:	0a d5       	rcall	.+2580   	; 0x17c4 <atoi>
     db0:	90 93 85 17 	sts	0x1785, r25	; 0x801785 <pan_speed+0x1>
     db4:	80 93 84 17 	sts	0x1784, r24	; 0x801784 <pan_speed>
     db8:	ce 01       	movw	r24, r28
     dba:	c3 96       	adiw	r24, 0x33	; 51
     dbc:	03 d5       	rcall	.+2566   	; 0x17c4 <atoi>
     dbe:	90 93 83 17 	sts	0x1783, r25	; 0x801783 <tilt_speed+0x1>
     dc2:	80 93 82 17 	sts	0x1782, r24	; 0x801782 <tilt_speed>
     dc6:	ce 01       	movw	r24, r28
     dc8:	8b 59       	subi	r24, 0x9B	; 155
     dca:	9f 4f       	sbci	r25, 0xFF	; 255
     dcc:	fb d4       	rcall	.+2550   	; 0x17c4 <atoi>
     dce:	90 93 77 17 	sts	0x1777, r25	; 0x801777 <laser_target_state+0x1>
     dd2:	80 93 76 17 	sts	0x1776, r24	; 0x801776 <laser_target_state>
     dd6:	ce 01       	movw	r24, r28
     dd8:	89 56       	subi	r24, 0x69	; 105
     dda:	9f 4f       	sbci	r25, 0xFF	; 255
     ddc:	f3 d4       	rcall	.+2534   	; 0x17c4 <atoi>
     dde:	90 93 81 17 	sts	0x1781, r25	; 0x801781 <roomba_target_speed+0x1>
     de2:	80 93 80 17 	sts	0x1780, r24	; 0x801780 <roomba_target_speed>
     de6:	ce 01       	movw	r24, r28
     de8:	87 53       	subi	r24, 0x37	; 55
     dea:	9f 4f       	sbci	r25, 0xFF	; 255
     dec:	eb d4       	rcall	.+2518   	; 0x17c4 <atoi>
     dee:	90 93 7f 17 	sts	0x177F, r25	; 0x80177f <roomba_target_radius+0x1>
     df2:	80 93 7e 17 	sts	0x177E, r24	; 0x80177e <roomba_target_radius>
     df6:	6f c0       	rjmp	.+222    	; 0xed6 <receive_transmission+0x1ec>
     df8:	8c 37       	cpi	r24, 0x7C	; 124
     dfa:	69 f5       	brne	.+90     	; 0xe56 <receive_transmission+0x16c>
     dfc:	92 e0       	ldi	r25, 0x02	; 2
     dfe:	e9 16       	cp	r14, r25
     e00:	f1 04       	cpc	r15, r1
     e02:	c9 f0       	breq	.+50     	; 0xe36 <receive_transmission+0x14c>
     e04:	50 f4       	brcc	.+20     	; 0xe1a <receive_transmission+0x130>
     e06:	e1 14       	cp	r14, r1
     e08:	f1 04       	cpc	r15, r1
     e0a:	91 f0       	breq	.+36     	; 0xe30 <receive_transmission+0x146>
     e0c:	91 e0       	ldi	r25, 0x01	; 1
     e0e:	e9 16       	cp	r14, r25
     e10:	f1 04       	cpc	r15, r1
     e12:	d9 f4       	brne	.+54     	; 0xe4a <receive_transmission+0x160>
     e14:	e3 e3       	ldi	r30, 0x33	; 51
     e16:	f0 e0       	ldi	r31, 0x00	; 0
     e18:	13 c0       	rjmp	.+38     	; 0xe40 <receive_transmission+0x156>
     e1a:	93 e0       	ldi	r25, 0x03	; 3
     e1c:	e9 16       	cp	r14, r25
     e1e:	f1 04       	cpc	r15, r1
     e20:	69 f0       	breq	.+26     	; 0xe3c <receive_transmission+0x152>
     e22:	94 e0       	ldi	r25, 0x04	; 4
     e24:	e9 16       	cp	r14, r25
     e26:	f1 04       	cpc	r15, r1
     e28:	81 f4       	brne	.+32     	; 0xe4a <receive_transmission+0x160>
     e2a:	e9 ec       	ldi	r30, 0xC9	; 201
     e2c:	f0 e0       	ldi	r31, 0x00	; 0
     e2e:	08 c0       	rjmp	.+16     	; 0xe40 <receive_transmission+0x156>
     e30:	e1 e0       	ldi	r30, 0x01	; 1
     e32:	f0 e0       	ldi	r31, 0x00	; 0
     e34:	05 c0       	rjmp	.+10     	; 0xe40 <receive_transmission+0x156>
     e36:	e5 e6       	ldi	r30, 0x65	; 101
     e38:	f0 e0       	ldi	r31, 0x00	; 0
     e3a:	02 c0       	rjmp	.+4      	; 0xe40 <receive_transmission+0x156>
     e3c:	e7 e9       	ldi	r30, 0x97	; 151
     e3e:	f0 e0       	ldi	r31, 0x00	; 0
     e40:	ec 0f       	add	r30, r28
     e42:	fd 1f       	adc	r31, r29
     e44:	e0 0f       	add	r30, r16
     e46:	f1 1f       	adc	r31, r17
     e48:	10 82       	st	Z, r1
     e4a:	9f ef       	ldi	r25, 0xFF	; 255
     e4c:	e9 1a       	sub	r14, r25
     e4e:	f9 0a       	sbc	r15, r25
     e50:	00 e0       	ldi	r16, 0x00	; 0
     e52:	10 e0       	ldi	r17, 0x00	; 0
     e54:	6f cf       	rjmp	.-290    	; 0xd34 <receive_transmission+0x4a>
     e56:	92 e0       	ldi	r25, 0x02	; 2
     e58:	e9 16       	cp	r14, r25
     e5a:	f1 04       	cpc	r15, r1
     e5c:	01 f1       	breq	.+64     	; 0xe9e <receive_transmission+0x1b4>
     e5e:	40 f4       	brcc	.+16     	; 0xe70 <receive_transmission+0x186>
     e60:	e1 14       	cp	r14, r1
     e62:	f1 04       	cpc	r15, r1
     e64:	71 f0       	breq	.+28     	; 0xe82 <receive_transmission+0x198>
     e66:	91 e0       	ldi	r25, 0x01	; 1
     e68:	e9 16       	cp	r14, r25
     e6a:	f1 04       	cpc	r15, r1
     e6c:	89 f0       	breq	.+34     	; 0xe90 <receive_transmission+0x1a6>
     e6e:	60 cf       	rjmp	.-320    	; 0xd30 <receive_transmission+0x46>
     e70:	93 e0       	ldi	r25, 0x03	; 3
     e72:	e9 16       	cp	r14, r25
     e74:	f1 04       	cpc	r15, r1
     e76:	d1 f0       	breq	.+52     	; 0xeac <receive_transmission+0x1c2>
     e78:	94 e0       	ldi	r25, 0x04	; 4
     e7a:	e9 16       	cp	r14, r25
     e7c:	f1 04       	cpc	r15, r1
     e7e:	e9 f0       	breq	.+58     	; 0xeba <receive_transmission+0x1d0>
     e80:	57 cf       	rjmp	.-338    	; 0xd30 <receive_transmission+0x46>
     e82:	00 33       	cpi	r16, 0x30	; 48
     e84:	11 05       	cpc	r17, r1
     e86:	08 f0       	brcs	.+2      	; 0xe8a <receive_transmission+0x1a0>
     e88:	53 cf       	rjmp	.-346    	; 0xd30 <receive_transmission+0x46>
     e8a:	e1 e0       	ldi	r30, 0x01	; 1
     e8c:	f0 e0       	ldi	r31, 0x00	; 0
     e8e:	1b c0       	rjmp	.+54     	; 0xec6 <receive_transmission+0x1dc>
     e90:	00 33       	cpi	r16, 0x30	; 48
     e92:	11 05       	cpc	r17, r1
     e94:	08 f0       	brcs	.+2      	; 0xe98 <receive_transmission+0x1ae>
     e96:	4c cf       	rjmp	.-360    	; 0xd30 <receive_transmission+0x46>
     e98:	e3 e3       	ldi	r30, 0x33	; 51
     e9a:	f0 e0       	ldi	r31, 0x00	; 0
     e9c:	14 c0       	rjmp	.+40     	; 0xec6 <receive_transmission+0x1dc>
     e9e:	00 33       	cpi	r16, 0x30	; 48
     ea0:	11 05       	cpc	r17, r1
     ea2:	08 f0       	brcs	.+2      	; 0xea6 <receive_transmission+0x1bc>
     ea4:	45 cf       	rjmp	.-374    	; 0xd30 <receive_transmission+0x46>
     ea6:	e5 e6       	ldi	r30, 0x65	; 101
     ea8:	f0 e0       	ldi	r31, 0x00	; 0
     eaa:	0d c0       	rjmp	.+26     	; 0xec6 <receive_transmission+0x1dc>
     eac:	00 33       	cpi	r16, 0x30	; 48
     eae:	11 05       	cpc	r17, r1
     eb0:	08 f0       	brcs	.+2      	; 0xeb4 <receive_transmission+0x1ca>
     eb2:	3e cf       	rjmp	.-388    	; 0xd30 <receive_transmission+0x46>
     eb4:	e7 e9       	ldi	r30, 0x97	; 151
     eb6:	f0 e0       	ldi	r31, 0x00	; 0
     eb8:	06 c0       	rjmp	.+12     	; 0xec6 <receive_transmission+0x1dc>
     eba:	00 33       	cpi	r16, 0x30	; 48
     ebc:	11 05       	cpc	r17, r1
     ebe:	08 f0       	brcs	.+2      	; 0xec2 <receive_transmission+0x1d8>
     ec0:	37 cf       	rjmp	.-402    	; 0xd30 <receive_transmission+0x46>
     ec2:	e9 ec       	ldi	r30, 0xC9	; 201
     ec4:	f0 e0       	ldi	r31, 0x00	; 0
     ec6:	ec 0f       	add	r30, r28
     ec8:	fd 1f       	adc	r31, r29
     eca:	e0 0f       	add	r30, r16
     ecc:	f1 1f       	adc	r31, r17
     ece:	80 83       	st	Z, r24
     ed0:	0f 5f       	subi	r16, 0xFF	; 255
     ed2:	1f 4f       	sbci	r17, 0xFF	; 255
     ed4:	2d cf       	rjmp	.-422    	; 0xd30 <receive_transmission+0x46>
     ed6:	0f b6       	in	r0, 0x3f	; 63
     ed8:	f8 94       	cli
     eda:	de bf       	out	0x3e, r29	; 62
     edc:	0f be       	out	0x3f, r0	; 63
     ede:	cd bf       	out	0x3d, r28	; 61
     ee0:	c6 50       	subi	r28, 0x06	; 6
     ee2:	df 4f       	sbci	r29, 0xFF	; 255
     ee4:	0f b6       	in	r0, 0x3f	; 63
     ee6:	f8 94       	cli
     ee8:	de bf       	out	0x3e, r29	; 62
     eea:	0f be       	out	0x3f, r0	; 63
     eec:	cd bf       	out	0x3d, r28	; 61
     eee:	df 91       	pop	r29
     ef0:	cf 91       	pop	r28
     ef2:	1f 91       	pop	r17
     ef4:	0f 91       	pop	r16
     ef6:	ff 90       	pop	r15
     ef8:	ef 90       	pop	r14
     efa:	df 90       	pop	r13
     efc:	cf 90       	pop	r12
     efe:	08 95       	ret

00000f00 <update_laser>:
     f00:	20 91 78 17 	lds	r18, 0x1778	; 0x801778 <laser_state>
     f04:	30 91 79 17 	lds	r19, 0x1779	; 0x801779 <laser_state+0x1>
     f08:	80 91 76 17 	lds	r24, 0x1776	; 0x801776 <laser_target_state>
     f0c:	90 91 77 17 	lds	r25, 0x1777	; 0x801777 <laser_target_state+0x1>
     f10:	28 17       	cp	r18, r24
     f12:	39 07       	cpc	r19, r25
     f14:	b9 f0       	breq	.+46     	; 0xf44 <update_laser+0x44>
     f16:	80 91 76 17 	lds	r24, 0x1776	; 0x801776 <laser_target_state>
     f1a:	90 91 77 17 	lds	r25, 0x1777	; 0x801777 <laser_target_state+0x1>
     f1e:	90 93 79 17 	sts	0x1779, r25	; 0x801779 <laser_state+0x1>
     f22:	80 93 78 17 	sts	0x1778, r24	; 0x801778 <laser_state>
     f26:	80 91 76 17 	lds	r24, 0x1776	; 0x801776 <laser_target_state>
     f2a:	90 91 77 17 	lds	r25, 0x1777	; 0x801777 <laser_target_state+0x1>
     f2e:	89 2b       	or	r24, r25
     f30:	11 f4       	brne	.+4      	; 0xf36 <update_laser+0x36>
     f32:	10 98       	cbi	0x02, 0	; 2
     f34:	08 95       	ret
     f36:	80 91 76 17 	lds	r24, 0x1776	; 0x801776 <laser_target_state>
     f3a:	90 91 77 17 	lds	r25, 0x1777	; 0x801777 <laser_target_state+0x1>
     f3e:	01 97       	sbiw	r24, 0x01	; 1
     f40:	09 f4       	brne	.+2      	; 0xf44 <update_laser+0x44>
     f42:	10 9a       	sbi	0x02, 0	; 2
     f44:	08 95       	ret

00000f46 <update_roomba>:
     f46:	20 91 7c 17 	lds	r18, 0x177C	; 0x80177c <roomba_current_speed>
     f4a:	30 91 7d 17 	lds	r19, 0x177D	; 0x80177d <roomba_current_speed+0x1>
     f4e:	80 91 80 17 	lds	r24, 0x1780	; 0x801780 <roomba_target_speed>
     f52:	90 91 81 17 	lds	r25, 0x1781	; 0x801781 <roomba_target_speed+0x1>
     f56:	28 17       	cp	r18, r24
     f58:	39 07       	cpc	r19, r25
     f5a:	61 f4       	brne	.+24     	; 0xf74 <update_roomba+0x2e>
     f5c:	20 91 7a 17 	lds	r18, 0x177A	; 0x80177a <roomba_current_radius>
     f60:	30 91 7b 17 	lds	r19, 0x177B	; 0x80177b <roomba_current_radius+0x1>
     f64:	80 91 7e 17 	lds	r24, 0x177E	; 0x80177e <roomba_target_radius>
     f68:	90 91 7f 17 	lds	r25, 0x177F	; 0x80177f <roomba_target_radius+0x1>
     f6c:	28 17       	cp	r18, r24
     f6e:	39 07       	cpc	r19, r25
     f70:	09 f4       	brne	.+2      	; 0xf74 <update_roomba+0x2e>
     f72:	6b c0       	rjmp	.+214    	; 0x104a <update_roomba+0x104>
     f74:	60 91 80 17 	lds	r22, 0x1780	; 0x801780 <roomba_target_speed>
     f78:	70 91 81 17 	lds	r23, 0x1781	; 0x801781 <roomba_target_speed+0x1>
     f7c:	07 2e       	mov	r0, r23
     f7e:	00 0c       	add	r0, r0
     f80:	88 0b       	sbc	r24, r24
     f82:	99 0b       	sbc	r25, r25
     f84:	8d d3       	rcall	.+1818   	; 0x16a0 <__floatsisf>
     f86:	20 e0       	ldi	r18, 0x00	; 0
     f88:	30 e0       	ldi	r19, 0x00	; 0
     f8a:	4a ef       	ldi	r20, 0xFA	; 250
     f8c:	53 e4       	ldi	r21, 0x43	; 67
     f8e:	e7 d3       	rcall	.+1998   	; 0x175e <__gesf2>
     f90:	18 16       	cp	r1, r24
     f92:	1c f4       	brge	.+6      	; 0xf9a <update_roomba+0x54>
     f94:	84 ef       	ldi	r24, 0xF4	; 244
     f96:	91 e0       	ldi	r25, 0x01	; 1
     f98:	12 c0       	rjmp	.+36     	; 0xfbe <update_roomba+0x78>
     f9a:	60 91 80 17 	lds	r22, 0x1780	; 0x801780 <roomba_target_speed>
     f9e:	70 91 81 17 	lds	r23, 0x1781	; 0x801781 <roomba_target_speed+0x1>
     fa2:	07 2e       	mov	r0, r23
     fa4:	00 0c       	add	r0, r0
     fa6:	88 0b       	sbc	r24, r24
     fa8:	99 0b       	sbc	r25, r25
     faa:	7a d3       	rcall	.+1780   	; 0x16a0 <__floatsisf>
     fac:	20 e0       	ldi	r18, 0x00	; 0
     fae:	30 e0       	ldi	r19, 0x00	; 0
     fb0:	4a ef       	ldi	r20, 0xFA	; 250
     fb2:	53 ec       	ldi	r21, 0xC3	; 195
     fb4:	6f d3       	rcall	.+1758   	; 0x1694 <__cmpsf2>
     fb6:	87 ff       	sbrs	r24, 7
     fb8:	06 c0       	rjmp	.+12     	; 0xfc6 <update_roomba+0x80>
     fba:	8c e0       	ldi	r24, 0x0C	; 12
     fbc:	9e ef       	ldi	r25, 0xFE	; 254
     fbe:	90 93 81 17 	sts	0x1781, r25	; 0x801781 <roomba_target_speed+0x1>
     fc2:	80 93 80 17 	sts	0x1780, r24	; 0x801780 <roomba_target_speed>
     fc6:	60 91 7e 17 	lds	r22, 0x177E	; 0x80177e <roomba_target_radius>
     fca:	70 91 7f 17 	lds	r23, 0x177F	; 0x80177f <roomba_target_radius+0x1>
     fce:	07 2e       	mov	r0, r23
     fd0:	00 0c       	add	r0, r0
     fd2:	88 0b       	sbc	r24, r24
     fd4:	99 0b       	sbc	r25, r25
     fd6:	64 d3       	rcall	.+1736   	; 0x16a0 <__floatsisf>
     fd8:	20 e0       	ldi	r18, 0x00	; 0
     fda:	30 e0       	ldi	r19, 0x00	; 0
     fdc:	4a ef       	ldi	r20, 0xFA	; 250
     fde:	54 e4       	ldi	r21, 0x44	; 68
     fe0:	be d3       	rcall	.+1916   	; 0x175e <__gesf2>
     fe2:	18 16       	cp	r1, r24
     fe4:	1c f4       	brge	.+6      	; 0xfec <update_roomba+0xa6>
     fe6:	80 ed       	ldi	r24, 0xD0	; 208
     fe8:	97 e0       	ldi	r25, 0x07	; 7
     fea:	12 c0       	rjmp	.+36     	; 0x1010 <update_roomba+0xca>
     fec:	60 91 7e 17 	lds	r22, 0x177E	; 0x80177e <roomba_target_radius>
     ff0:	70 91 7f 17 	lds	r23, 0x177F	; 0x80177f <roomba_target_radius+0x1>
     ff4:	07 2e       	mov	r0, r23
     ff6:	00 0c       	add	r0, r0
     ff8:	88 0b       	sbc	r24, r24
     ffa:	99 0b       	sbc	r25, r25
     ffc:	51 d3       	rcall	.+1698   	; 0x16a0 <__floatsisf>
     ffe:	20 e0       	ldi	r18, 0x00	; 0
    1000:	30 e0       	ldi	r19, 0x00	; 0
    1002:	4a ef       	ldi	r20, 0xFA	; 250
    1004:	54 ec       	ldi	r21, 0xC4	; 196
    1006:	46 d3       	rcall	.+1676   	; 0x1694 <__cmpsf2>
    1008:	87 ff       	sbrs	r24, 7
    100a:	06 c0       	rjmp	.+12     	; 0x1018 <update_roomba+0xd2>
    100c:	80 e3       	ldi	r24, 0x30	; 48
    100e:	98 ef       	ldi	r25, 0xF8	; 248
    1010:	90 93 7f 17 	sts	0x177F, r25	; 0x80177f <roomba_target_radius+0x1>
    1014:	80 93 7e 17 	sts	0x177E, r24	; 0x80177e <roomba_target_radius>
    1018:	80 91 80 17 	lds	r24, 0x1780	; 0x801780 <roomba_target_speed>
    101c:	90 91 81 17 	lds	r25, 0x1781	; 0x801781 <roomba_target_speed+0x1>
    1020:	90 93 7d 17 	sts	0x177D, r25	; 0x80177d <roomba_current_speed+0x1>
    1024:	80 93 7c 17 	sts	0x177C, r24	; 0x80177c <roomba_current_speed>
    1028:	80 91 7e 17 	lds	r24, 0x177E	; 0x80177e <roomba_target_radius>
    102c:	90 91 7f 17 	lds	r25, 0x177F	; 0x80177f <roomba_target_radius+0x1>
    1030:	90 93 7b 17 	sts	0x177B, r25	; 0x80177b <roomba_current_radius+0x1>
    1034:	80 93 7a 17 	sts	0x177A, r24	; 0x80177a <roomba_current_radius>
    1038:	60 91 7e 17 	lds	r22, 0x177E	; 0x80177e <roomba_target_radius>
    103c:	70 91 7f 17 	lds	r23, 0x177F	; 0x80177f <roomba_target_radius+0x1>
    1040:	80 91 80 17 	lds	r24, 0x1780	; 0x801780 <roomba_target_speed>
    1044:	90 91 81 17 	lds	r25, 0x1781	; 0x801781 <roomba_target_speed+0x1>
    1048:	ab c0       	rjmp	.+342    	; 0x11a0 <roomba_drive>
    104a:	08 95       	ret

0000104c <update_servos>:
    104c:	80 91 82 17 	lds	r24, 0x1782	; 0x801782 <tilt_speed>
    1050:	90 91 83 17 	lds	r25, 0x1783	; 0x801783 <tilt_speed+0x1>
    1054:	65 d1       	rcall	.+714    	; 0x1320 <adjust_tilt_angle>
    1056:	80 91 84 17 	lds	r24, 0x1784	; 0x801784 <pan_speed>
    105a:	90 91 85 17 	lds	r25, 0x1785	; 0x801785 <pan_speed+0x1>
    105e:	02 c1       	rjmp	.+516    	; 0x1264 <adjust_pan_angle>

00001060 <looper>:
    1060:	00 97       	sbiw	r24, 0x00	; 0
    1062:	41 f0       	breq	.+16     	; 0x1074 <looper+0x14>
    1064:	ef e3       	ldi	r30, 0x3F	; 63
    1066:	fc e9       	ldi	r31, 0x9C	; 156
    1068:	31 97       	sbiw	r30, 0x01	; 1
    106a:	f1 f7       	brne	.-4      	; 0x1068 <looper+0x8>
    106c:	00 c0       	rjmp	.+0      	; 0x106e <looper+0xe>
    106e:	00 00       	nop
    1070:	01 97       	sbiw	r24, 0x01	; 1
    1072:	f6 cf       	rjmp	.-20     	; 0x1060 <looper>
    1074:	08 95       	ret

00001076 <physical_wall_collision_detection_and_handling>:
    1076:	b1 d0       	rcall	.+354    	; 0x11da <roomba_detect_physical_wall>
    1078:	01 97       	sbiw	r24, 0x01	; 1
    107a:	61 f4       	brne	.+24     	; 0x1094 <physical_wall_collision_detection_and_handling+0x1e>
    107c:	80 91 74 17 	lds	r24, 0x1774	; 0x801774 <setting_p>
    1080:	90 91 75 17 	lds	r25, 0x1775	; 0x801775 <setting_p+0x1>
    1084:	01 97       	sbiw	r24, 0x01	; 1
    1086:	31 f0       	breq	.+12     	; 0x1094 <physical_wall_collision_detection_and_handling+0x1e>
    1088:	82 e0       	ldi	r24, 0x02	; 2
    108a:	90 e0       	ldi	r25, 0x00	; 0
    108c:	90 93 75 17 	sts	0x1775, r25	; 0x801775 <setting_p+0x1>
    1090:	80 93 74 17 	sts	0x1774, r24	; 0x801774 <setting_p>
    1094:	80 91 74 17 	lds	r24, 0x1774	; 0x801774 <setting_p>
    1098:	90 91 75 17 	lds	r25, 0x1775	; 0x801775 <setting_p+0x1>
    109c:	02 97       	sbiw	r24, 0x02	; 2
    109e:	99 f4       	brne	.+38     	; 0x10c6 <physical_wall_collision_detection_and_handling+0x50>
    10a0:	81 e0       	ldi	r24, 0x01	; 1
    10a2:	90 e0       	ldi	r25, 0x00	; 0
    10a4:	90 93 75 17 	sts	0x1775, r25	; 0x801775 <setting_p+0x1>
    10a8:	80 93 74 17 	sts	0x1774, r24	; 0x801774 <setting_p>
    10ac:	60 e0       	ldi	r22, 0x00	; 0
    10ae:	70 e0       	ldi	r23, 0x00	; 0
    10b0:	84 ed       	ldi	r24, 0xD4	; 212
    10b2:	9e ef       	ldi	r25, 0xFE	; 254
    10b4:	75 d0       	rcall	.+234    	; 0x11a0 <roomba_drive>
    10b6:	84 e6       	ldi	r24, 0x64	; 100
    10b8:	90 e0       	ldi	r25, 0x00	; 0
    10ba:	d2 df       	rcall	.-92     	; 0x1060 <looper>
    10bc:	60 e0       	ldi	r22, 0x00	; 0
    10be:	70 e0       	ldi	r23, 0x00	; 0
    10c0:	80 e0       	ldi	r24, 0x00	; 0
    10c2:	90 e0       	ldi	r25, 0x00	; 0
    10c4:	6d d0       	rcall	.+218    	; 0x11a0 <roomba_drive>
    10c6:	89 d0       	rcall	.+274    	; 0x11da <roomba_detect_physical_wall>
    10c8:	89 2b       	or	r24, r25
    10ca:	21 f4       	brne	.+8      	; 0x10d4 <physical_wall_collision_detection_and_handling+0x5e>
    10cc:	10 92 75 17 	sts	0x1775, r1	; 0x801775 <setting_p+0x1>
    10d0:	10 92 74 17 	sts	0x1774, r1	; 0x801774 <setting_p>
    10d4:	08 95       	ret

000010d6 <remote>:
    10d6:	09 de       	rcall	.-1006   	; 0xcea <receive_transmission>
    10d8:	13 df       	rcall	.-474    	; 0xf00 <update_laser>
    10da:	b8 df       	rcall	.-144    	; 0x104c <update_servos>
    10dc:	34 df       	rcall	.-408    	; 0xf46 <update_roomba>
    10de:	cb df       	rcall	.-106    	; 0x1076 <physical_wall_collision_detection_and_handling>
    10e0:	10 92 85 17 	sts	0x1785, r1	; 0x801785 <pan_speed+0x1>
    10e4:	10 92 84 17 	sts	0x1784, r1	; 0x801784 <pan_speed>
    10e8:	10 92 83 17 	sts	0x1783, r1	; 0x801783 <tilt_speed+0x1>
    10ec:	10 92 82 17 	sts	0x1782, r1	; 0x801782 <tilt_speed>
    10f0:	f2 cf       	rjmp	.-28     	; 0x10d6 <remote>

000010f2 <a_main>:

/*============================================================================*/
void a_main()
{	
	// Creating Setup Task.
	Task_Create_System(setup, 0);
    10f2:	60 e0       	ldi	r22, 0x00	; 0
    10f4:	70 e0       	ldi	r23, 0x00	; 0
    10f6:	8e e6       	ldi	r24, 0x6E	; 110
    10f8:	96 e0       	ldi	r25, 0x06	; 6
    10fa:	91 dc       	rcall	.-1758   	; 0xa1e <Task_Create_System>
	
	// Creating Main Loop Task.
	Task_Create_System(remote, 1);
    10fc:	61 e0       	ldi	r22, 0x01	; 1
    10fe:	70 e0       	ldi	r23, 0x00	; 0
    1100:	8b e6       	ldi	r24, 0x6B	; 107
    1102:	98 e0       	ldi	r25, 0x08	; 8
    1104:	8c cc       	rjmp	.-1768   	; 0xa1e <Task_Create_System>

00001106 <init_roomba>:
	serial_write_roomba(DOCK);
}

/*============================================================================*/
void roomba_power_off() {
	serial_write_roomba(STOP);
    1106:	09 9a       	sbi	0x01, 1	; 1
    1108:	11 9a       	sbi	0x02, 1	; 2
    110a:	5d d2       	rcall	.+1210   	; 0x15c6 <init_uart_roomba>
    110c:	2f ef       	ldi	r18, 0xFF	; 255
    110e:	81 e1       	ldi	r24, 0x11	; 17
    1110:	9a e7       	ldi	r25, 0x7A	; 122
    1112:	21 50       	subi	r18, 0x01	; 1
    1114:	80 40       	sbci	r24, 0x00	; 0
    1116:	90 40       	sbci	r25, 0x00	; 0
    1118:	e1 f7       	brne	.-8      	; 0x1112 <init_roomba+0xc>
    111a:	00 c0       	rjmp	.+0      	; 0x111c <init_roomba+0x16>
    111c:	00 00       	nop
    111e:	11 98       	cbi	0x02, 1	; 2
    1120:	2f ef       	ldi	r18, 0xFF	; 255
    1122:	85 ea       	ldi	r24, 0xA5	; 165
    1124:	9e e0       	ldi	r25, 0x0E	; 14
    1126:	21 50       	subi	r18, 0x01	; 1
    1128:	80 40       	sbci	r24, 0x00	; 0
    112a:	90 40       	sbci	r25, 0x00	; 0
    112c:	e1 f7       	brne	.-8      	; 0x1126 <init_roomba+0x20>
    112e:	00 c0       	rjmp	.+0      	; 0x1130 <init_roomba+0x2a>
    1130:	00 00       	nop
    1132:	11 9a       	sbi	0x02, 1	; 2
    1134:	2f ef       	ldi	r18, 0xFF	; 255
    1136:	85 ea       	ldi	r24, 0xA5	; 165
    1138:	9e e0       	ldi	r25, 0x0E	; 14
    113a:	21 50       	subi	r18, 0x01	; 1
    113c:	80 40       	sbci	r24, 0x00	; 0
    113e:	90 40       	sbci	r25, 0x00	; 0
    1140:	e1 f7       	brne	.-8      	; 0x113a <init_roomba+0x34>
    1142:	00 c0       	rjmp	.+0      	; 0x1144 <init_roomba+0x3e>
    1144:	00 00       	nop
    1146:	11 98       	cbi	0x02, 1	; 2
    1148:	2f ef       	ldi	r18, 0xFF	; 255
    114a:	85 ea       	ldi	r24, 0xA5	; 165
    114c:	9e e0       	ldi	r25, 0x0E	; 14
    114e:	21 50       	subi	r18, 0x01	; 1
    1150:	80 40       	sbci	r24, 0x00	; 0
    1152:	90 40       	sbci	r25, 0x00	; 0
    1154:	e1 f7       	brne	.-8      	; 0x114e <init_roomba+0x48>
    1156:	00 c0       	rjmp	.+0      	; 0x1158 <init_roomba+0x52>
    1158:	00 00       	nop
    115a:	11 9a       	sbi	0x02, 1	; 2
    115c:	2f ef       	ldi	r18, 0xFF	; 255
    115e:	85 ea       	ldi	r24, 0xA5	; 165
    1160:	9e e0       	ldi	r25, 0x0E	; 14
    1162:	21 50       	subi	r18, 0x01	; 1
    1164:	80 40       	sbci	r24, 0x00	; 0
    1166:	90 40       	sbci	r25, 0x00	; 0
    1168:	e1 f7       	brne	.-8      	; 0x1162 <init_roomba+0x5c>
    116a:	00 c0       	rjmp	.+0      	; 0x116c <init_roomba+0x66>
    116c:	00 00       	nop
    116e:	11 98       	cbi	0x02, 1	; 2
    1170:	2f ef       	ldi	r18, 0xFF	; 255
    1172:	85 ea       	ldi	r24, 0xA5	; 165
    1174:	9e e0       	ldi	r25, 0x0E	; 14
    1176:	21 50       	subi	r18, 0x01	; 1
    1178:	80 40       	sbci	r24, 0x00	; 0
    117a:	90 40       	sbci	r25, 0x00	; 0
    117c:	e1 f7       	brne	.-8      	; 0x1176 <init_roomba+0x70>
    117e:	00 c0       	rjmp	.+0      	; 0x1180 <init_roomba+0x7a>
    1180:	00 00       	nop
    1182:	11 9a       	sbi	0x02, 1	; 2
    1184:	20 d2       	rcall	.+1088   	; 0x15c6 <init_uart_roomba>
    1186:	80 e8       	ldi	r24, 0x80	; 128
    1188:	4d d2       	rcall	.+1178   	; 0x1624 <serial_write_roomba>
    118a:	2f ef       	ldi	r18, 0xFF	; 255
    118c:	83 ec       	ldi	r24, 0xC3	; 195
    118e:	99 e0       	ldi	r25, 0x09	; 9
    1190:	21 50       	subi	r18, 0x01	; 1
    1192:	80 40       	sbci	r24, 0x00	; 0
    1194:	90 40       	sbci	r25, 0x00	; 0
    1196:	e1 f7       	brne	.-8      	; 0x1190 <init_roomba+0x8a>
    1198:	00 c0       	rjmp	.+0      	; 0x119a <init_roomba+0x94>
    119a:	00 00       	nop
    119c:	83 e8       	ldi	r24, 0x83	; 131
    119e:	42 c2       	rjmp	.+1156   	; 0x1624 <serial_write_roomba>

000011a0 <roomba_drive>:
    11a0:	1f 93       	push	r17
    11a2:	cf 93       	push	r28
    11a4:	df 93       	push	r29
    11a6:	00 d0       	rcall	.+0      	; 0x11a8 <roomba_drive+0x8>
    11a8:	cd b7       	in	r28, 0x3d	; 61
    11aa:	de b7       	in	r29, 0x3e	; 62
    11ac:	18 2f       	mov	r17, r24
    11ae:	89 e8       	ldi	r24, 0x89	; 137
    11b0:	6b 83       	std	Y+3, r22	; 0x03
    11b2:	7a 83       	std	Y+2, r23	; 0x02
    11b4:	99 83       	std	Y+1, r25	; 0x01
    11b6:	36 d2       	rcall	.+1132   	; 0x1624 <serial_write_roomba>
    11b8:	99 81       	ldd	r25, Y+1	; 0x01
    11ba:	89 2f       	mov	r24, r25
    11bc:	33 d2       	rcall	.+1126   	; 0x1624 <serial_write_roomba>
    11be:	81 2f       	mov	r24, r17
    11c0:	31 d2       	rcall	.+1122   	; 0x1624 <serial_write_roomba>
    11c2:	7a 81       	ldd	r23, Y+2	; 0x02
    11c4:	87 2f       	mov	r24, r23
    11c6:	2e d2       	rcall	.+1116   	; 0x1624 <serial_write_roomba>
    11c8:	6b 81       	ldd	r22, Y+3	; 0x03
    11ca:	86 2f       	mov	r24, r22
    11cc:	0f 90       	pop	r0
    11ce:	0f 90       	pop	r0
    11d0:	0f 90       	pop	r0
    11d2:	df 91       	pop	r29
    11d4:	cf 91       	pop	r28
    11d6:	1f 91       	pop	r17
    11d8:	25 c2       	rjmp	.+1098   	; 0x1624 <serial_write_roomba>

000011da <roomba_detect_physical_wall>:
}

/*============================================================================*/
unsigned int roomba_detect_physical_wall()
{
	serial_write_roomba(SENSORS);
    11da:	8e e8       	ldi	r24, 0x8E	; 142
    11dc:	23 d2       	rcall	.+1094   	; 0x1624 <serial_write_roomba>
	serial_write_roomba(7);
    11de:	87 e0       	ldi	r24, 0x07	; 7
    11e0:	21 d2       	rcall	.+1090   	; 0x1624 <serial_write_roomba>
	while (rx_data_in_blue_tooth_buffer != 1);	// Wait for the Roomba to send us data.
    11e2:	80 91 e0 17 	lds	r24, 0x17E0	; 0x8017e0 <rx_data_in_blue_tooth_buffer>
    11e6:	90 91 e1 17 	lds	r25, 0x17E1	; 0x8017e1 <rx_data_in_blue_tooth_buffer+0x1>
    11ea:	01 97       	sbiw	r24, 0x01	; 1
    11ec:	d1 f7       	brne	.-12     	; 0x11e2 <roomba_detect_physical_wall+0x8>
	unsigned int collision = serial_read_roomba();
    11ee:	05 d2       	rcall	.+1034   	; 0x15fa <serial_read_roomba>

	if (collision != 0)
    11f0:	21 e0       	ldi	r18, 0x01	; 1
    11f2:	30 e0       	ldi	r19, 0x00	; 0
    11f4:	81 11       	cpse	r24, r1
    11f6:	02 c0       	rjmp	.+4      	; 0x11fc <roomba_detect_physical_wall+0x22>
    11f8:	20 e0       	ldi	r18, 0x00	; 0
    11fa:	30 e0       	ldi	r19, 0x00	; 0
	{
		return 1;
	}
	return 0;
}
    11fc:	c9 01       	movw	r24, r18
    11fe:	08 95       	ret

00001200 <init_servos>:

/*============================================================================*/
void init_servos()
{
	// Setting PWM pins 2 & 3 to output and to low.
	DDRE  |= 0b00110000;
    1200:	8d b1       	in	r24, 0x0d	; 13
    1202:	80 63       	ori	r24, 0x30	; 48
    1204:	8d b9       	out	0x0d, r24	; 13
	PORTE &= 0b11001111;
    1206:	8e b1       	in	r24, 0x0e	; 14
    1208:	8f 7c       	andi	r24, 0xCF	; 207
    120a:	8e b9       	out	0x0e, r24	; 14

	// Initializing timer.
	TCNT3 = 0;												// set counter to 0.
    120c:	10 92 95 00 	sts	0x0095, r1	; 0x800095 <__TEXT_REGION_LENGTH__+0x700095>
    1210:	10 92 94 00 	sts	0x0094, r1	; 0x800094 <__TEXT_REGION_LENGTH__+0x700094>
	TCCR3A = 0x00;
    1214:	a0 e9       	ldi	r26, 0x90	; 144
    1216:	b0 e0       	ldi	r27, 0x00	; 0
    1218:	1c 92       	st	X, r1
	TCCR3B = 0x00;
    121a:	e1 e9       	ldi	r30, 0x91	; 145
    121c:	f0 e0       	ldi	r31, 0x00	; 0
    121e:	10 82       	st	Z, r1
	TCCR3A = (1 << COM3B1) | (1 << COM3C1) | (1 << WGM30);  // NON Inverted PWM.
    1220:	89 e2       	ldi	r24, 0x29	; 41
    1222:	8c 93       	st	X, r24
	TCCR3B |= (1 << WGM33) | (1 << CS41) | (1 << CS40);		// PRESCALER = 64 MODE 14 (FAST PWM).
    1224:	80 81       	ld	r24, Z
    1226:	83 61       	ori	r24, 0x13	; 19
    1228:	80 83       	st	Z, r24
	OCR3A = 2500;
    122a:	84 ec       	ldi	r24, 0xC4	; 196
    122c:	99 e0       	ldi	r25, 0x09	; 9
    122e:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <__TEXT_REGION_LENGTH__+0x700099>
    1232:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <__TEXT_REGION_LENGTH__+0x700098>

	// Setting angle to 90 degrees.
	current_pan_angle  = DEFUALT_ANGLE_VAL;
    1236:	8c eb       	ldi	r24, 0xBC	; 188
    1238:	90 e0       	ldi	r25, 0x00	; 0
    123a:	90 93 e7 17 	sts	0x17E7, r25	; 0x8017e7 <current_pan_angle+0x1>
    123e:	80 93 e6 17 	sts	0x17E6, r24	; 0x8017e6 <current_pan_angle>
	current_tilt_angle = DEFUALT_ANGLE_VAL;
    1242:	90 93 e5 17 	sts	0x17E5, r25	; 0x8017e5 <current_tilt_angle+0x1>
    1246:	80 93 e4 17 	sts	0x17E4, r24	; 0x8017e4 <current_tilt_angle>

	// Setting target angle to the current angle values.
	OCR3C = current_pan_angle;
    124a:	90 93 9d 00 	sts	0x009D, r25	; 0x80009d <__TEXT_REGION_LENGTH__+0x70009d>
    124e:	80 93 9c 00 	sts	0x009C, r24	; 0x80009c <__TEXT_REGION_LENGTH__+0x70009c>
	OCR3B = current_tilt_angle;
    1252:	80 91 e4 17 	lds	r24, 0x17E4	; 0x8017e4 <current_tilt_angle>
    1256:	90 91 e5 17 	lds	r25, 0x17E5	; 0x8017e5 <current_tilt_angle+0x1>
    125a:	90 93 9b 00 	sts	0x009B, r25	; 0x80009b <__TEXT_REGION_LENGTH__+0x70009b>
    125e:	80 93 9a 00 	sts	0x009A, r24	; 0x80009a <__TEXT_REGION_LENGTH__+0x70009a>
    1262:	08 95       	ret

00001264 <adjust_pan_angle>:
}

/*============================================================================*/
// angle_delta is an integer between -5 and 5.
void adjust_pan_angle(int angle_delta)
{
    1264:	cf 92       	push	r12
    1266:	df 92       	push	r13
    1268:	ef 92       	push	r14
    126a:	ff 92       	push	r15
    126c:	cf 93       	push	r28
    126e:	df 93       	push	r29
    1270:	ec 01       	movw	r28, r24
	//Verifying angle delta.
	if (angle_delta > MAX_ANGLE_DELTA)			// Max increase.
    1272:	bc 01       	movw	r22, r24
    1274:	99 0f       	add	r25, r25
    1276:	88 0b       	sbc	r24, r24
    1278:	99 0b       	sbc	r25, r25
    127a:	12 d2       	rcall	.+1060   	; 0x16a0 <__floatsisf>
    127c:	6b 01       	movw	r12, r22
    127e:	7c 01       	movw	r14, r24
    1280:	20 e0       	ldi	r18, 0x00	; 0
    1282:	30 e0       	ldi	r19, 0x00	; 0
    1284:	40 ea       	ldi	r20, 0xA0	; 160
    1286:	50 e4       	ldi	r21, 0x40	; 64
    1288:	6a d2       	rcall	.+1236   	; 0x175e <__gesf2>
    128a:	18 16       	cp	r1, r24
    128c:	64 f0       	brlt	.+24     	; 0x12a6 <adjust_pan_angle+0x42>
	{
		angle_delta = MAX_ANGLE_DELTA;
	}
	else if (angle_delta < MIN_ANGLE_DELTA)		// Max decrease.
    128e:	20 e0       	ldi	r18, 0x00	; 0
    1290:	30 e0       	ldi	r19, 0x00	; 0
    1292:	40 ea       	ldi	r20, 0xA0	; 160
    1294:	50 ec       	ldi	r21, 0xC0	; 192
    1296:	c7 01       	movw	r24, r14
    1298:	b6 01       	movw	r22, r12
    129a:	fc d1       	rcall	.+1016   	; 0x1694 <__cmpsf2>
    129c:	87 ff       	sbrs	r24, 7
    129e:	05 c0       	rjmp	.+10     	; 0x12aa <adjust_pan_angle+0x46>
	{
		angle_delta = MIN_ANGLE_DELTA;
    12a0:	cb ef       	ldi	r28, 0xFB	; 251
    12a2:	df ef       	ldi	r29, 0xFF	; 255
    12a4:	02 c0       	rjmp	.+4      	; 0x12aa <adjust_pan_angle+0x46>
void adjust_pan_angle(int angle_delta)
{
	//Verifying angle delta.
	if (angle_delta > MAX_ANGLE_DELTA)			// Max increase.
	{
		angle_delta = MAX_ANGLE_DELTA;
    12a6:	c5 e0       	ldi	r28, 0x05	; 5
    12a8:	d0 e0       	ldi	r29, 0x00	; 0
	{
		angle_delta = MIN_ANGLE_DELTA;
	}

	//Verifying angle.	
	current_pan_angle += angle_delta;
    12aa:	80 91 e6 17 	lds	r24, 0x17E6	; 0x8017e6 <current_pan_angle>
    12ae:	90 91 e7 17 	lds	r25, 0x17E7	; 0x8017e7 <current_pan_angle+0x1>
    12b2:	c8 0f       	add	r28, r24
    12b4:	d9 1f       	adc	r29, r25
	if (current_pan_angle > MAX_ANGLE_VAL)		// Max angle.
    12b6:	be 01       	movw	r22, r28
    12b8:	0d 2e       	mov	r0, r29
    12ba:	00 0c       	add	r0, r0
    12bc:	88 0b       	sbc	r24, r24
    12be:	99 0b       	sbc	r25, r25
    12c0:	ef d1       	rcall	.+990    	; 0x16a0 <__floatsisf>
    12c2:	6b 01       	movw	r12, r22
    12c4:	7c 01       	movw	r14, r24
    12c6:	20 e0       	ldi	r18, 0x00	; 0
    12c8:	30 e0       	ldi	r19, 0x00	; 0
    12ca:	46 e9       	ldi	r20, 0x96	; 150
    12cc:	53 e4       	ldi	r21, 0x43	; 67
    12ce:	47 d2       	rcall	.+1166   	; 0x175e <__gesf2>
    12d0:	18 16       	cp	r1, r24
    12d2:	1c f4       	brge	.+6      	; 0x12da <adjust_pan_angle+0x76>
	{
		current_pan_angle = MAX_ANGLE_VAL;
    12d4:	8c e2       	ldi	r24, 0x2C	; 44
    12d6:	91 e0       	ldi	r25, 0x01	; 1
    12d8:	10 c0       	rjmp	.+32     	; 0x12fa <adjust_pan_angle+0x96>
	}
	else if (current_pan_angle < MIN_ANGLE_VAL)	// Min angle.
    12da:	20 e0       	ldi	r18, 0x00	; 0
    12dc:	30 e0       	ldi	r19, 0x00	; 0
    12de:	4a e8       	ldi	r20, 0x8A	; 138
    12e0:	52 e4       	ldi	r21, 0x42	; 66
    12e2:	c7 01       	movw	r24, r14
    12e4:	b6 01       	movw	r22, r12
    12e6:	d6 d1       	rcall	.+940    	; 0x1694 <__cmpsf2>
    12e8:	87 fd       	sbrc	r24, 7
    12ea:	05 c0       	rjmp	.+10     	; 0x12f6 <adjust_pan_angle+0x92>
	{
		angle_delta = MIN_ANGLE_DELTA;
	}

	//Verifying angle.	
	current_pan_angle += angle_delta;
    12ec:	d0 93 e7 17 	sts	0x17E7, r29	; 0x8017e7 <current_pan_angle+0x1>
    12f0:	c0 93 e6 17 	sts	0x17E6, r28	; 0x8017e6 <current_pan_angle>
    12f4:	06 c0       	rjmp	.+12     	; 0x1302 <adjust_pan_angle+0x9e>
	{
		current_pan_angle = MAX_ANGLE_VAL;
	}
	else if (current_pan_angle < MIN_ANGLE_VAL)	// Min angle.
	{
		current_pan_angle = MIN_ANGLE_VAL;
    12f6:	85 e4       	ldi	r24, 0x45	; 69
    12f8:	90 e0       	ldi	r25, 0x00	; 0
    12fa:	90 93 e7 17 	sts	0x17E7, r25	; 0x8017e7 <current_pan_angle+0x1>
    12fe:	80 93 e6 17 	sts	0x17E6, r24	; 0x8017e6 <current_pan_angle>
	}
	OCR3C = current_pan_angle;
    1302:	80 91 e6 17 	lds	r24, 0x17E6	; 0x8017e6 <current_pan_angle>
    1306:	90 91 e7 17 	lds	r25, 0x17E7	; 0x8017e7 <current_pan_angle+0x1>
    130a:	90 93 9d 00 	sts	0x009D, r25	; 0x80009d <__TEXT_REGION_LENGTH__+0x70009d>
    130e:	80 93 9c 00 	sts	0x009C, r24	; 0x80009c <__TEXT_REGION_LENGTH__+0x70009c>
}
    1312:	df 91       	pop	r29
    1314:	cf 91       	pop	r28
    1316:	ff 90       	pop	r15
    1318:	ef 90       	pop	r14
    131a:	df 90       	pop	r13
    131c:	cf 90       	pop	r12
    131e:	08 95       	ret

00001320 <adjust_tilt_angle>:

/*============================================================================*/
// angle_delta is an integer between -5 and 5.
void adjust_tilt_angle(int angle_delta)
{
    1320:	cf 92       	push	r12
    1322:	df 92       	push	r13
    1324:	ef 92       	push	r14
    1326:	ff 92       	push	r15
    1328:	cf 93       	push	r28
    132a:	df 93       	push	r29
    132c:	ec 01       	movw	r28, r24
	//Verifying angle delta.
	if (angle_delta > MAX_ANGLE_DELTA)				// Max increase.
    132e:	bc 01       	movw	r22, r24
    1330:	99 0f       	add	r25, r25
    1332:	88 0b       	sbc	r24, r24
    1334:	99 0b       	sbc	r25, r25
    1336:	b4 d1       	rcall	.+872    	; 0x16a0 <__floatsisf>
    1338:	6b 01       	movw	r12, r22
    133a:	7c 01       	movw	r14, r24
    133c:	20 e0       	ldi	r18, 0x00	; 0
    133e:	30 e0       	ldi	r19, 0x00	; 0
    1340:	40 ea       	ldi	r20, 0xA0	; 160
    1342:	50 e4       	ldi	r21, 0x40	; 64
    1344:	0c d2       	rcall	.+1048   	; 0x175e <__gesf2>
    1346:	18 16       	cp	r1, r24
    1348:	64 f0       	brlt	.+24     	; 0x1362 <adjust_tilt_angle+0x42>
	{
		angle_delta = MAX_ANGLE_DELTA;
	}
	else if (angle_delta < MIN_ANGLE_DELTA)			// Max decrease.
    134a:	20 e0       	ldi	r18, 0x00	; 0
    134c:	30 e0       	ldi	r19, 0x00	; 0
    134e:	40 ea       	ldi	r20, 0xA0	; 160
    1350:	50 ec       	ldi	r21, 0xC0	; 192
    1352:	c7 01       	movw	r24, r14
    1354:	b6 01       	movw	r22, r12
    1356:	9e d1       	rcall	.+828    	; 0x1694 <__cmpsf2>
    1358:	87 ff       	sbrs	r24, 7
    135a:	05 c0       	rjmp	.+10     	; 0x1366 <adjust_tilt_angle+0x46>
	{
		angle_delta = MIN_ANGLE_DELTA;
    135c:	cb ef       	ldi	r28, 0xFB	; 251
    135e:	df ef       	ldi	r29, 0xFF	; 255
    1360:	02 c0       	rjmp	.+4      	; 0x1366 <adjust_tilt_angle+0x46>
void adjust_tilt_angle(int angle_delta)
{
	//Verifying angle delta.
	if (angle_delta > MAX_ANGLE_DELTA)				// Max increase.
	{
		angle_delta = MAX_ANGLE_DELTA;
    1362:	c5 e0       	ldi	r28, 0x05	; 5
    1364:	d0 e0       	ldi	r29, 0x00	; 0
	{
		angle_delta = MIN_ANGLE_DELTA;
	}

	//Verifying angle.	
	current_tilt_angle += angle_delta;
    1366:	80 91 e4 17 	lds	r24, 0x17E4	; 0x8017e4 <current_tilt_angle>
    136a:	90 91 e5 17 	lds	r25, 0x17E5	; 0x8017e5 <current_tilt_angle+0x1>
    136e:	c8 0f       	add	r28, r24
    1370:	d9 1f       	adc	r29, r25
	if (current_tilt_angle > MAX_ANGLE_VAL)			// Max angle.
    1372:	be 01       	movw	r22, r28
    1374:	0d 2e       	mov	r0, r29
    1376:	00 0c       	add	r0, r0
    1378:	88 0b       	sbc	r24, r24
    137a:	99 0b       	sbc	r25, r25
    137c:	91 d1       	rcall	.+802    	; 0x16a0 <__floatsisf>
    137e:	6b 01       	movw	r12, r22
    1380:	7c 01       	movw	r14, r24
    1382:	20 e0       	ldi	r18, 0x00	; 0
    1384:	30 e0       	ldi	r19, 0x00	; 0
    1386:	46 e9       	ldi	r20, 0x96	; 150
    1388:	53 e4       	ldi	r21, 0x43	; 67
    138a:	e9 d1       	rcall	.+978    	; 0x175e <__gesf2>
    138c:	18 16       	cp	r1, r24
    138e:	1c f4       	brge	.+6      	; 0x1396 <adjust_tilt_angle+0x76>
	{
		current_tilt_angle = MAX_ANGLE_VAL;
    1390:	8c e2       	ldi	r24, 0x2C	; 44
    1392:	91 e0       	ldi	r25, 0x01	; 1
    1394:	10 c0       	rjmp	.+32     	; 0x13b6 <adjust_tilt_angle+0x96>
	}
	else if (current_tilt_angle < MIN_ANGLE_VAL)	// Min angle.
    1396:	20 e0       	ldi	r18, 0x00	; 0
    1398:	30 e0       	ldi	r19, 0x00	; 0
    139a:	4a e8       	ldi	r20, 0x8A	; 138
    139c:	52 e4       	ldi	r21, 0x42	; 66
    139e:	c7 01       	movw	r24, r14
    13a0:	b6 01       	movw	r22, r12
    13a2:	78 d1       	rcall	.+752    	; 0x1694 <__cmpsf2>
    13a4:	87 fd       	sbrc	r24, 7
    13a6:	05 c0       	rjmp	.+10     	; 0x13b2 <adjust_tilt_angle+0x92>
	{
		angle_delta = MIN_ANGLE_DELTA;
	}

	//Verifying angle.	
	current_tilt_angle += angle_delta;
    13a8:	d0 93 e5 17 	sts	0x17E5, r29	; 0x8017e5 <current_tilt_angle+0x1>
    13ac:	c0 93 e4 17 	sts	0x17E4, r28	; 0x8017e4 <current_tilt_angle>
    13b0:	06 c0       	rjmp	.+12     	; 0x13be <adjust_tilt_angle+0x9e>
	{
		current_tilt_angle = MAX_ANGLE_VAL;
	}
	else if (current_tilt_angle < MIN_ANGLE_VAL)	// Min angle.
	{
		current_tilt_angle = MIN_ANGLE_VAL;
    13b2:	85 e4       	ldi	r24, 0x45	; 69
    13b4:	90 e0       	ldi	r25, 0x00	; 0
    13b6:	90 93 e5 17 	sts	0x17E5, r25	; 0x8017e5 <current_tilt_angle+0x1>
    13ba:	80 93 e4 17 	sts	0x17E4, r24	; 0x8017e4 <current_tilt_angle>
	}
	OCR3B = current_tilt_angle;
    13be:	80 91 e4 17 	lds	r24, 0x17E4	; 0x8017e4 <current_tilt_angle>
    13c2:	90 91 e5 17 	lds	r25, 0x17E5	; 0x8017e5 <current_tilt_angle+0x1>
    13c6:	90 93 9b 00 	sts	0x009B, r25	; 0x80009b <__TEXT_REGION_LENGTH__+0x70009b>
    13ca:	80 93 9a 00 	sts	0x009A, r24	; 0x80009a <__TEXT_REGION_LENGTH__+0x70009a>
    13ce:	df 91       	pop	r29
    13d0:	cf 91       	pop	r28
    13d2:	ff 90       	pop	r15
    13d4:	ef 90       	pop	r14
    13d6:	df 90       	pop	r13
    13d8:	cf 90       	pop	r12
    13da:	08 95       	ret

000013dc <Cir_Buf_Init>:
/*============================================================================*/
/** Initialize values in a Circular Buffer 
	@param	cb		Address of the circular buffer to initialize.
*/
inline void Cir_Buf_Init(volatile circular_buffer *cb)
{
    13dc:	fc 01       	movw	r30, r24
	cb->size = cb->next_postion = cb->start_position = 0;
    13de:	13 8e       	std	Z+27, r1	; 0x1b
    13e0:	12 8e       	std	Z+26, r1	; 0x1a
    13e2:	11 8e       	std	Z+25, r1	; 0x19
    13e4:	10 8e       	std	Z+24, r1	; 0x18
    13e6:	17 8a       	std	Z+23, r1	; 0x17
    13e8:	16 8a       	std	Z+22, r1	; 0x16
    13ea:	08 95       	ret

000013ec <Cir_Buf_Add>:
/** Adds a byte to the buffer.  If buffer full the oldest byte will be replaced 
	@param	cb		Address of the circular buffer
	@param	byte	Byte to add to buffer
*/
void Cir_Buf_Add(volatile circular_buffer *cb, unsigned char byte)
{	
    13ec:	fc 01       	movw	r30, r24
	*(cb->buffer + cb->next_postion) = byte;
    13ee:	a0 8d       	ldd	r26, Z+24	; 0x18
    13f0:	b1 8d       	ldd	r27, Z+25	; 0x19
    13f2:	a8 0f       	add	r26, r24
    13f4:	b9 1f       	adc	r27, r25
    13f6:	6c 93       	st	X, r22
	
	// Wrap around
	if(++cb->next_postion >= CIR_BUF_SIZE)
    13f8:	80 8d       	ldd	r24, Z+24	; 0x18
    13fa:	91 8d       	ldd	r25, Z+25	; 0x19
    13fc:	01 96       	adiw	r24, 0x01	; 1
    13fe:	91 8f       	std	Z+25, r25	; 0x19
    1400:	80 8f       	std	Z+24, r24	; 0x18
    1402:	46 97       	sbiw	r24, 0x16	; 22
    1404:	10 f0       	brcs	.+4      	; 0x140a <Cir_Buf_Add+0x1e>
	{
		cb->next_postion = 0;
    1406:	11 8e       	std	Z+25, r1	; 0x19
    1408:	10 8e       	std	Z+24, r1	; 0x18
	}
	
	// Update size or start position
	if(cb->size < CIR_BUF_SIZE)
    140a:	86 89       	ldd	r24, Z+22	; 0x16
    140c:	97 89       	ldd	r25, Z+23	; 0x17
    140e:	46 97       	sbiw	r24, 0x16	; 22
    1410:	30 f4       	brcc	.+12     	; 0x141e <Cir_Buf_Add+0x32>
	{
		cb->size++;
    1412:	86 89       	ldd	r24, Z+22	; 0x16
    1414:	97 89       	ldd	r25, Z+23	; 0x17
    1416:	01 96       	adiw	r24, 0x01	; 1
    1418:	97 8b       	std	Z+23, r25	; 0x17
    141a:	86 8b       	std	Z+22, r24	; 0x16
    141c:	08 95       	ret
	}
	else
	{
		cb->start_position++;
    141e:	82 8d       	ldd	r24, Z+26	; 0x1a
    1420:	93 8d       	ldd	r25, Z+27	; 0x1b
    1422:	01 96       	adiw	r24, 0x01	; 1
    1424:	93 8f       	std	Z+27, r25	; 0x1b
    1426:	82 8f       	std	Z+26, r24	; 0x1a
    1428:	08 95       	ret

0000142a <Cir_Buf_Read>:
/** Read a byte from the buffer.  Internal pointer will be updated. 
	@param	cb		Address of the circular buffer
	@return			Oldest byte in the Buffer
*/
volatile unsigned char Cir_Buf_Read(volatile circular_buffer* cb)
{	
    142a:	fc 01       	movw	r30, r24
	volatile unsigned char *byte = NULL;
	
	if(cb->size == 0)
    142c:	86 89       	ldd	r24, Z+22	; 0x16
    142e:	97 89       	ldd	r25, Z+23	; 0x17
    1430:	89 2b       	or	r24, r25
    1432:	c1 f0       	breq	.+48     	; 0x1464 <Cir_Buf_Read+0x3a>
	{
		return 0;
	}

	byte = cb->buffer + cb->start_position++;
    1434:	82 8d       	ldd	r24, Z+26	; 0x1a
    1436:	93 8d       	ldd	r25, Z+27	; 0x1b
    1438:	9c 01       	movw	r18, r24
    143a:	2f 5f       	subi	r18, 0xFF	; 255
    143c:	3f 4f       	sbci	r19, 0xFF	; 255
    143e:	33 8f       	std	Z+27, r19	; 0x1b
    1440:	22 8f       	std	Z+26, r18	; 0x1a

	if(cb->start_position >= CIR_BUF_SIZE)
    1442:	22 8d       	ldd	r18, Z+26	; 0x1a
    1444:	33 8d       	ldd	r19, Z+27	; 0x1b
    1446:	26 31       	cpi	r18, 0x16	; 22
    1448:	31 05       	cpc	r19, r1
    144a:	10 f0       	brcs	.+4      	; 0x1450 <Cir_Buf_Read+0x26>
	{
		cb->start_position = 0;
    144c:	13 8e       	std	Z+27, r1	; 0x1b
    144e:	12 8e       	std	Z+26, r1	; 0x1a
	}

	cb->size--;
    1450:	26 89       	ldd	r18, Z+22	; 0x16
    1452:	37 89       	ldd	r19, Z+23	; 0x17
    1454:	21 50       	subi	r18, 0x01	; 1
    1456:	31 09       	sbc	r19, r1
    1458:	37 8b       	std	Z+23, r19	; 0x17
    145a:	26 8b       	std	Z+22, r18	; 0x16
	return *byte;
    145c:	e8 0f       	add	r30, r24
    145e:	f9 1f       	adc	r31, r25
    1460:	80 81       	ld	r24, Z
    1462:	08 95       	ret
{	
	volatile unsigned char *byte = NULL;
	
	if(cb->size == 0)
	{
		return 0;
    1464:	80 e0       	ldi	r24, 0x00	; 0
		cb->start_position = 0;
	}

	cb->size--;
	return *byte;
    1466:	08 95       	ret

00001468 <init_uart_usb>:
	if(!(UART_STATUS_TRANSMITTING & blue_tooth_uart_status))
	{
		// Set status to transmitting.
		blue_tooth_uart_status |= UART_STATUS_TRANSMITTING;

		UDR1 = Cir_Buf_Read(&blue_tooth_tx_buff);
    1468:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7000c5>
    146c:	87 e6       	ldi	r24, 0x67	; 103
    146e:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>
    1472:	e0 ec       	ldi	r30, 0xC0	; 192
    1474:	f0 e0       	ldi	r31, 0x00	; 0
    1476:	80 81       	ld	r24, Z
    1478:	8d 7f       	andi	r24, 0xFD	; 253
    147a:	80 83       	st	Z, r24
    147c:	86 e0       	ldi	r24, 0x06	; 6
    147e:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7000c2>
    1482:	88 e1       	ldi	r24, 0x18	; 24
    1484:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
    1488:	08 95       	ret

0000148a <init_uart_bt>:
    148a:	10 92 cd 00 	sts	0x00CD, r1	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7000cd>
    148e:	87 e6       	ldi	r24, 0x67	; 103
    1490:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7000cc>
    1494:	e8 ec       	ldi	r30, 0xC8	; 200
    1496:	f0 e0       	ldi	r31, 0x00	; 0
    1498:	80 e4       	ldi	r24, 0x40	; 64
    149a:	80 83       	st	Z, r24
    149c:	88 ed       	ldi	r24, 0xD8	; 216
    149e:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7000c9>
    14a2:	86 e0       	ldi	r24, 0x06	; 6
    14a4:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7000ca>
    14a8:	80 81       	ld	r24, Z
    14aa:	8d 7f       	andi	r24, 0xFD	; 253
    14ac:	80 83       	st	Z, r24
    14ae:	80 ec       	ldi	r24, 0xC0	; 192
    14b0:	97 e1       	ldi	r25, 0x17	; 23
    14b2:	94 df       	rcall	.-216    	; 0x13dc <Cir_Buf_Init>
    14b4:	84 ea       	ldi	r24, 0xA4	; 164
    14b6:	97 e1       	ldi	r25, 0x17	; 23
    14b8:	91 df       	rcall	.-222    	; 0x13dc <Cir_Buf_Init>
    14ba:	10 92 e1 17 	sts	0x17E1, r1	; 0x8017e1 <rx_data_in_blue_tooth_buffer+0x1>
    14be:	10 92 e0 17 	sts	0x17E0, r1	; 0x8017e0 <rx_data_in_blue_tooth_buffer>
    14c2:	08 95       	ret

000014c4 <serial_read_bt>:
    14c4:	80 91 d6 17 	lds	r24, 0x17D6	; 0x8017d6 <blue_tooth_rx_buff+0x16>
    14c8:	90 91 d7 17 	lds	r25, 0x17D7	; 0x8017d7 <blue_tooth_rx_buff+0x17>
    14cc:	89 2b       	or	r24, r25
    14ce:	69 f0       	breq	.+26     	; 0x14ea <serial_read_bt+0x26>
    14d0:	80 91 d6 17 	lds	r24, 0x17D6	; 0x8017d6 <blue_tooth_rx_buff+0x16>
    14d4:	90 91 d7 17 	lds	r25, 0x17D7	; 0x8017d7 <blue_tooth_rx_buff+0x17>
    14d8:	01 97       	sbiw	r24, 0x01	; 1
    14da:	21 f4       	brne	.+8      	; 0x14e4 <serial_read_bt+0x20>
    14dc:	10 92 e1 17 	sts	0x17E1, r1	; 0x8017e1 <rx_data_in_blue_tooth_buffer+0x1>
    14e0:	10 92 e0 17 	sts	0x17E0, r1	; 0x8017e0 <rx_data_in_blue_tooth_buffer>
    14e4:	80 ec       	ldi	r24, 0xC0	; 192
    14e6:	97 e1       	ldi	r25, 0x17	; 23
    14e8:	a0 cf       	rjmp	.-192    	; 0x142a <Cir_Buf_Read>
    14ea:	80 e0       	ldi	r24, 0x00	; 0
    14ec:	08 95       	ret

000014ee <__vector_38>:
}

/*============================================================================*/
// Interrupt function called for transmit complete.
ISR(USART1_TX_vect)
{
    14ee:	1f 92       	push	r1
    14f0:	0f 92       	push	r0
    14f2:	0f b6       	in	r0, 0x3f	; 63
    14f4:	0f 92       	push	r0
    14f6:	11 24       	eor	r1, r1
    14f8:	0b b6       	in	r0, 0x3b	; 59
    14fa:	0f 92       	push	r0
    14fc:	2f 93       	push	r18
    14fe:	3f 93       	push	r19
    1500:	4f 93       	push	r20
    1502:	5f 93       	push	r21
    1504:	6f 93       	push	r22
    1506:	7f 93       	push	r23
    1508:	8f 93       	push	r24
    150a:	9f 93       	push	r25
    150c:	af 93       	push	r26
    150e:	bf 93       	push	r27
    1510:	ef 93       	push	r30
    1512:	ff 93       	push	r31
	if(blue_tooth_tx_buff.size > 0)
    1514:	80 91 ba 17 	lds	r24, 0x17BA	; 0x8017ba <blue_tooth_tx_buff+0x16>
    1518:	90 91 bb 17 	lds	r25, 0x17BB	; 0x8017bb <blue_tooth_tx_buff+0x17>
    151c:	89 2b       	or	r24, r25
    151e:	31 f0       	breq	.+12     	; 0x152c <__vector_38+0x3e>
	{
		UDR1 = Cir_Buf_Read(&blue_tooth_tx_buff);
    1520:	84 ea       	ldi	r24, 0xA4	; 164
    1522:	97 e1       	ldi	r25, 0x17	; 23
    1524:	82 df       	rcall	.-252    	; 0x142a <Cir_Buf_Read>
    1526:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
    152a:	09 c0       	rjmp	.+18     	; 0x153e <__vector_38+0x50>
	}
	else
	{
		blue_tooth_uart_status &= ~(UART_STATUS_TRANSMITTING);
    152c:	80 91 a2 17 	lds	r24, 0x17A2	; 0x8017a2 <blue_tooth_uart_status>
    1530:	90 91 a3 17 	lds	r25, 0x17A3	; 0x8017a3 <blue_tooth_uart_status+0x1>
    1534:	8e 7f       	andi	r24, 0xFE	; 254
    1536:	90 93 a3 17 	sts	0x17A3, r25	; 0x8017a3 <blue_tooth_uart_status+0x1>
    153a:	80 93 a2 17 	sts	0x17A2, r24	; 0x8017a2 <blue_tooth_uart_status>
	}
}
    153e:	ff 91       	pop	r31
    1540:	ef 91       	pop	r30
    1542:	bf 91       	pop	r27
    1544:	af 91       	pop	r26
    1546:	9f 91       	pop	r25
    1548:	8f 91       	pop	r24
    154a:	7f 91       	pop	r23
    154c:	6f 91       	pop	r22
    154e:	5f 91       	pop	r21
    1550:	4f 91       	pop	r20
    1552:	3f 91       	pop	r19
    1554:	2f 91       	pop	r18
    1556:	0f 90       	pop	r0
    1558:	0b be       	out	0x3b, r0	; 59
    155a:	0f 90       	pop	r0
    155c:	0f be       	out	0x3f, r0	; 63
    155e:	0f 90       	pop	r0
    1560:	1f 90       	pop	r1
    1562:	18 95       	reti

00001564 <__vector_36>:

/*============================================================================*/
// Interrupt function for data received.
ISR(USART1_RX_vect)
{
    1564:	1f 92       	push	r1
    1566:	0f 92       	push	r0
    1568:	0f b6       	in	r0, 0x3f	; 63
    156a:	0f 92       	push	r0
    156c:	11 24       	eor	r1, r1
    156e:	0b b6       	in	r0, 0x3b	; 59
    1570:	0f 92       	push	r0
    1572:	2f 93       	push	r18
    1574:	3f 93       	push	r19
    1576:	4f 93       	push	r20
    1578:	5f 93       	push	r21
    157a:	6f 93       	push	r22
    157c:	7f 93       	push	r23
    157e:	8f 93       	push	r24
    1580:	9f 93       	push	r25
    1582:	af 93       	push	r26
    1584:	bf 93       	push	r27
    1586:	ef 93       	push	r30
    1588:	ff 93       	push	r31
	Cir_Buf_Add(&blue_tooth_rx_buff, UDR1);
    158a:	60 91 ce 00 	lds	r22, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
    158e:	80 ec       	ldi	r24, 0xC0	; 192
    1590:	97 e1       	ldi	r25, 0x17	; 23
    1592:	2c df       	rcall	.-424    	; 0x13ec <Cir_Buf_Add>
	rx_data_in_blue_tooth_buffer = 1;
    1594:	81 e0       	ldi	r24, 0x01	; 1
    1596:	90 e0       	ldi	r25, 0x00	; 0
    1598:	90 93 e1 17 	sts	0x17E1, r25	; 0x8017e1 <rx_data_in_blue_tooth_buffer+0x1>
    159c:	80 93 e0 17 	sts	0x17E0, r24	; 0x8017e0 <rx_data_in_blue_tooth_buffer>
}
    15a0:	ff 91       	pop	r31
    15a2:	ef 91       	pop	r30
    15a4:	bf 91       	pop	r27
    15a6:	af 91       	pop	r26
    15a8:	9f 91       	pop	r25
    15aa:	8f 91       	pop	r24
    15ac:	7f 91       	pop	r23
    15ae:	6f 91       	pop	r22
    15b0:	5f 91       	pop	r21
    15b2:	4f 91       	pop	r20
    15b4:	3f 91       	pop	r19
    15b6:	2f 91       	pop	r18
    15b8:	0f 90       	pop	r0
    15ba:	0b be       	out	0x3b, r0	; 59
    15bc:	0f 90       	pop	r0
    15be:	0f be       	out	0x3f, r0	; 63
    15c0:	0f 90       	pop	r0
    15c2:	1f 90       	pop	r1
    15c4:	18 95       	reti

000015c6 <init_uart_roomba>:

/*============================================================================*/
/*============================================================================*/
void init_uart_roomba()
{
	UBRR2H = 0b0000;		// This is for 19200 Baud.
    15c6:	10 92 d5 00 	sts	0x00D5, r1	; 0x8000d5 <__TEXT_REGION_LENGTH__+0x7000d5>
	UBRR2L = 0b00110011;	// This is for 19200 Baud.
    15ca:	83 e3       	ldi	r24, 0x33	; 51
    15cc:	80 93 d4 00 	sts	0x00D4, r24	; 0x8000d4 <__TEXT_REGION_LENGTH__+0x7000d4>
	
	// Clear USART Transmit complete flag, normal USART transmission speed
	UCSR2A = (1 << TXC2) | (0 << U2X2);
    15d0:	e0 ed       	ldi	r30, 0xD0	; 208
    15d2:	f0 e0       	ldi	r31, 0x00	; 0
    15d4:	80 e4       	ldi	r24, 0x40	; 64
    15d6:	80 83       	st	Z, r24

	// Enable receiver, transmitter, rx complete interrupt and tx complete interrupt.
	UCSR2B = (1 << RXEN2) | (1 << TXEN2) | (1 << RXCIE1);
    15d8:	88 e9       	ldi	r24, 0x98	; 152
    15da:	80 93 d1 00 	sts	0x00D1, r24	; 0x8000d1 <__TEXT_REGION_LENGTH__+0x7000d1>

	// 8-bit data
	UCSR2C = ((1 << UCSZ21) | (1 << UCSZ20));
    15de:	86 e0       	ldi	r24, 0x06	; 6
    15e0:	80 93 d2 00 	sts	0x00D2, r24	; 0x8000d2 <__TEXT_REGION_LENGTH__+0x7000d2>

	// Disable 2x speed
	UCSR2A &= ~(1 << U2X2);
    15e4:	80 81       	ld	r24, Z
    15e6:	8d 7f       	andi	r24, 0xFD	; 253
    15e8:	80 83       	st	Z, r24

	Cir_Buf_Init(&roomba_rx_buff);
    15ea:	86 e8       	ldi	r24, 0x86	; 134
    15ec:	97 e1       	ldi	r25, 0x17	; 23
    15ee:	f6 de       	rcall	.-532    	; 0x13dc <Cir_Buf_Init>

	rx_data_in_roomba_buffer = 0;
    15f0:	10 92 e3 17 	sts	0x17E3, r1	; 0x8017e3 <rx_data_in_roomba_buffer+0x1>
    15f4:	10 92 e2 17 	sts	0x17E2, r1	; 0x8017e2 <rx_data_in_roomba_buffer>
    15f8:	08 95       	ret

000015fa <serial_read_roomba>:
}

/*============================================================================*/
unsigned char serial_read_roomba()
{	
	if (roomba_rx_buff.size == 0)
    15fa:	80 91 9c 17 	lds	r24, 0x179C	; 0x80179c <roomba_rx_buff+0x16>
    15fe:	90 91 9d 17 	lds	r25, 0x179D	; 0x80179d <roomba_rx_buff+0x17>
    1602:	89 2b       	or	r24, r25
    1604:	69 f0       	breq	.+26     	; 0x1620 <serial_read_roomba+0x26>
	{
		return 0;
	}
	else if (roomba_rx_buff.size == 1)
    1606:	80 91 9c 17 	lds	r24, 0x179C	; 0x80179c <roomba_rx_buff+0x16>
    160a:	90 91 9d 17 	lds	r25, 0x179D	; 0x80179d <roomba_rx_buff+0x17>
    160e:	01 97       	sbiw	r24, 0x01	; 1
    1610:	21 f4       	brne	.+8      	; 0x161a <serial_read_roomba+0x20>
	{
		rx_data_in_roomba_buffer = 0;
    1612:	10 92 e3 17 	sts	0x17E3, r1	; 0x8017e3 <rx_data_in_roomba_buffer+0x1>
    1616:	10 92 e2 17 	sts	0x17E2, r1	; 0x8017e2 <rx_data_in_roomba_buffer>
	}
	return Cir_Buf_Read(&roomba_rx_buff);
    161a:	86 e8       	ldi	r24, 0x86	; 134
    161c:	97 e1       	ldi	r25, 0x17	; 23
    161e:	05 cf       	rjmp	.-502    	; 0x142a <Cir_Buf_Read>
}
    1620:	80 e0       	ldi	r24, 0x00	; 0
    1622:	08 95       	ret

00001624 <serial_write_roomba>:

/*============================================================================*/
void serial_write_roomba(unsigned char data_out)
{
	while ((UCSR2A & _BV(UDRE2)) == 0)		// while NOT ready to transmit
    1624:	90 91 d0 00 	lds	r25, 0x00D0	; 0x8000d0 <__TEXT_REGION_LENGTH__+0x7000d0>
    1628:	95 ff       	sbrs	r25, 5
    162a:	fc cf       	rjmp	.-8      	; 0x1624 <serial_write_roomba>
	{;;}
	UDR2 = data_out;
    162c:	80 93 d6 00 	sts	0x00D6, r24	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
    1630:	08 95       	ret

00001632 <__vector_51>:
}

/*============================================================================*/
// Interrupt function for data received.
ISR(USART2_RX_vect)
{
    1632:	1f 92       	push	r1
    1634:	0f 92       	push	r0
    1636:	0f b6       	in	r0, 0x3f	; 63
    1638:	0f 92       	push	r0
    163a:	11 24       	eor	r1, r1
    163c:	0b b6       	in	r0, 0x3b	; 59
    163e:	0f 92       	push	r0
    1640:	2f 93       	push	r18
    1642:	3f 93       	push	r19
    1644:	4f 93       	push	r20
    1646:	5f 93       	push	r21
    1648:	6f 93       	push	r22
    164a:	7f 93       	push	r23
    164c:	8f 93       	push	r24
    164e:	9f 93       	push	r25
    1650:	af 93       	push	r26
    1652:	bf 93       	push	r27
    1654:	ef 93       	push	r30
    1656:	ff 93       	push	r31
	Cir_Buf_Add(&roomba_rx_buff, UDR2);
    1658:	60 91 d6 00 	lds	r22, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
    165c:	86 e8       	ldi	r24, 0x86	; 134
    165e:	97 e1       	ldi	r25, 0x17	; 23
    1660:	c5 de       	rcall	.-630    	; 0x13ec <Cir_Buf_Add>
	rx_data_in_roomba_buffer = 1;
    1662:	81 e0       	ldi	r24, 0x01	; 1
    1664:	90 e0       	ldi	r25, 0x00	; 0
    1666:	90 93 e3 17 	sts	0x17E3, r25	; 0x8017e3 <rx_data_in_roomba_buffer+0x1>
    166a:	80 93 e2 17 	sts	0x17E2, r24	; 0x8017e2 <rx_data_in_roomba_buffer>
}
    166e:	ff 91       	pop	r31
    1670:	ef 91       	pop	r30
    1672:	bf 91       	pop	r27
    1674:	af 91       	pop	r26
    1676:	9f 91       	pop	r25
    1678:	8f 91       	pop	r24
    167a:	7f 91       	pop	r23
    167c:	6f 91       	pop	r22
    167e:	5f 91       	pop	r21
    1680:	4f 91       	pop	r20
    1682:	3f 91       	pop	r19
    1684:	2f 91       	pop	r18
    1686:	0f 90       	pop	r0
    1688:	0b be       	out	0x3b, r0	; 59
    168a:	0f 90       	pop	r0
    168c:	0f be       	out	0x3f, r0	; 63
    168e:	0f 90       	pop	r0
    1690:	1f 90       	pop	r1
    1692:	18 95       	reti

00001694 <__cmpsf2>:
    1694:	40 d0       	rcall	.+128    	; 0x1716 <__fp_cmp>
    1696:	08 f4       	brcc	.+2      	; 0x169a <__cmpsf2+0x6>
    1698:	81 e0       	ldi	r24, 0x01	; 1
    169a:	08 95       	ret

0000169c <__floatunsisf>:
    169c:	e8 94       	clt
    169e:	09 c0       	rjmp	.+18     	; 0x16b2 <__floatsisf+0x12>

000016a0 <__floatsisf>:
    16a0:	97 fb       	bst	r25, 7
    16a2:	3e f4       	brtc	.+14     	; 0x16b2 <__floatsisf+0x12>
    16a4:	90 95       	com	r25
    16a6:	80 95       	com	r24
    16a8:	70 95       	com	r23
    16aa:	61 95       	neg	r22
    16ac:	7f 4f       	sbci	r23, 0xFF	; 255
    16ae:	8f 4f       	sbci	r24, 0xFF	; 255
    16b0:	9f 4f       	sbci	r25, 0xFF	; 255
    16b2:	99 23       	and	r25, r25
    16b4:	a9 f0       	breq	.+42     	; 0x16e0 <__floatsisf+0x40>
    16b6:	f9 2f       	mov	r31, r25
    16b8:	96 e9       	ldi	r25, 0x96	; 150
    16ba:	bb 27       	eor	r27, r27
    16bc:	93 95       	inc	r25
    16be:	f6 95       	lsr	r31
    16c0:	87 95       	ror	r24
    16c2:	77 95       	ror	r23
    16c4:	67 95       	ror	r22
    16c6:	b7 95       	ror	r27
    16c8:	f1 11       	cpse	r31, r1
    16ca:	f8 cf       	rjmp	.-16     	; 0x16bc <__floatsisf+0x1c>
    16cc:	fa f4       	brpl	.+62     	; 0x170c <__floatsisf+0x6c>
    16ce:	bb 0f       	add	r27, r27
    16d0:	11 f4       	brne	.+4      	; 0x16d6 <__floatsisf+0x36>
    16d2:	60 ff       	sbrs	r22, 0
    16d4:	1b c0       	rjmp	.+54     	; 0x170c <__floatsisf+0x6c>
    16d6:	6f 5f       	subi	r22, 0xFF	; 255
    16d8:	7f 4f       	sbci	r23, 0xFF	; 255
    16da:	8f 4f       	sbci	r24, 0xFF	; 255
    16dc:	9f 4f       	sbci	r25, 0xFF	; 255
    16de:	16 c0       	rjmp	.+44     	; 0x170c <__floatsisf+0x6c>
    16e0:	88 23       	and	r24, r24
    16e2:	11 f0       	breq	.+4      	; 0x16e8 <__floatsisf+0x48>
    16e4:	96 e9       	ldi	r25, 0x96	; 150
    16e6:	11 c0       	rjmp	.+34     	; 0x170a <__floatsisf+0x6a>
    16e8:	77 23       	and	r23, r23
    16ea:	21 f0       	breq	.+8      	; 0x16f4 <__floatsisf+0x54>
    16ec:	9e e8       	ldi	r25, 0x8E	; 142
    16ee:	87 2f       	mov	r24, r23
    16f0:	76 2f       	mov	r23, r22
    16f2:	05 c0       	rjmp	.+10     	; 0x16fe <__floatsisf+0x5e>
    16f4:	66 23       	and	r22, r22
    16f6:	71 f0       	breq	.+28     	; 0x1714 <__floatsisf+0x74>
    16f8:	96 e8       	ldi	r25, 0x86	; 134
    16fa:	86 2f       	mov	r24, r22
    16fc:	70 e0       	ldi	r23, 0x00	; 0
    16fe:	60 e0       	ldi	r22, 0x00	; 0
    1700:	2a f0       	brmi	.+10     	; 0x170c <__floatsisf+0x6c>
    1702:	9a 95       	dec	r25
    1704:	66 0f       	add	r22, r22
    1706:	77 1f       	adc	r23, r23
    1708:	88 1f       	adc	r24, r24
    170a:	da f7       	brpl	.-10     	; 0x1702 <__floatsisf+0x62>
    170c:	88 0f       	add	r24, r24
    170e:	96 95       	lsr	r25
    1710:	87 95       	ror	r24
    1712:	97 f9       	bld	r25, 7
    1714:	08 95       	ret

00001716 <__fp_cmp>:
    1716:	99 0f       	add	r25, r25
    1718:	00 08       	sbc	r0, r0
    171a:	55 0f       	add	r21, r21
    171c:	aa 0b       	sbc	r26, r26
    171e:	e0 e8       	ldi	r30, 0x80	; 128
    1720:	fe ef       	ldi	r31, 0xFE	; 254
    1722:	16 16       	cp	r1, r22
    1724:	17 06       	cpc	r1, r23
    1726:	e8 07       	cpc	r30, r24
    1728:	f9 07       	cpc	r31, r25
    172a:	c0 f0       	brcs	.+48     	; 0x175c <__fp_cmp+0x46>
    172c:	12 16       	cp	r1, r18
    172e:	13 06       	cpc	r1, r19
    1730:	e4 07       	cpc	r30, r20
    1732:	f5 07       	cpc	r31, r21
    1734:	98 f0       	brcs	.+38     	; 0x175c <__fp_cmp+0x46>
    1736:	62 1b       	sub	r22, r18
    1738:	73 0b       	sbc	r23, r19
    173a:	84 0b       	sbc	r24, r20
    173c:	95 0b       	sbc	r25, r21
    173e:	39 f4       	brne	.+14     	; 0x174e <__fp_cmp+0x38>
    1740:	0a 26       	eor	r0, r26
    1742:	61 f0       	breq	.+24     	; 0x175c <__fp_cmp+0x46>
    1744:	23 2b       	or	r18, r19
    1746:	24 2b       	or	r18, r20
    1748:	25 2b       	or	r18, r21
    174a:	21 f4       	brne	.+8      	; 0x1754 <__fp_cmp+0x3e>
    174c:	08 95       	ret
    174e:	0a 26       	eor	r0, r26
    1750:	09 f4       	brne	.+2      	; 0x1754 <__fp_cmp+0x3e>
    1752:	a1 40       	sbci	r26, 0x01	; 1
    1754:	a6 95       	lsr	r26
    1756:	8f ef       	ldi	r24, 0xFF	; 255
    1758:	81 1d       	adc	r24, r1
    175a:	81 1d       	adc	r24, r1
    175c:	08 95       	ret

0000175e <__gesf2>:
    175e:	db df       	rcall	.-74     	; 0x1716 <__fp_cmp>
    1760:	08 f4       	brcc	.+2      	; 0x1764 <__gesf2+0x6>
    1762:	8f ef       	ldi	r24, 0xFF	; 255
    1764:	08 95       	ret

00001766 <__udivmodhi4>:
    1766:	aa 1b       	sub	r26, r26
    1768:	bb 1b       	sub	r27, r27
    176a:	51 e1       	ldi	r21, 0x11	; 17
    176c:	07 c0       	rjmp	.+14     	; 0x177c <__udivmodhi4_ep>

0000176e <__udivmodhi4_loop>:
    176e:	aa 1f       	adc	r26, r26
    1770:	bb 1f       	adc	r27, r27
    1772:	a6 17       	cp	r26, r22
    1774:	b7 07       	cpc	r27, r23
    1776:	10 f0       	brcs	.+4      	; 0x177c <__udivmodhi4_ep>
    1778:	a6 1b       	sub	r26, r22
    177a:	b7 0b       	sbc	r27, r23

0000177c <__udivmodhi4_ep>:
    177c:	88 1f       	adc	r24, r24
    177e:	99 1f       	adc	r25, r25
    1780:	5a 95       	dec	r21
    1782:	a9 f7       	brne	.-22     	; 0x176e <__udivmodhi4_loop>
    1784:	80 95       	com	r24
    1786:	90 95       	com	r25
    1788:	bc 01       	movw	r22, r24
    178a:	cd 01       	movw	r24, r26
    178c:	08 95       	ret

0000178e <__divmodhi4>:
    178e:	97 fb       	bst	r25, 7
    1790:	07 2e       	mov	r0, r23
    1792:	16 f4       	brtc	.+4      	; 0x1798 <__divmodhi4+0xa>
    1794:	00 94       	com	r0
    1796:	06 d0       	rcall	.+12     	; 0x17a4 <__divmodhi4_neg1>
    1798:	77 fd       	sbrc	r23, 7
    179a:	08 d0       	rcall	.+16     	; 0x17ac <__divmodhi4_neg2>
    179c:	e4 df       	rcall	.-56     	; 0x1766 <__udivmodhi4>
    179e:	07 fc       	sbrc	r0, 7
    17a0:	05 d0       	rcall	.+10     	; 0x17ac <__divmodhi4_neg2>
    17a2:	3e f4       	brtc	.+14     	; 0x17b2 <__divmodhi4_exit>

000017a4 <__divmodhi4_neg1>:
    17a4:	90 95       	com	r25
    17a6:	81 95       	neg	r24
    17a8:	9f 4f       	sbci	r25, 0xFF	; 255
    17aa:	08 95       	ret

000017ac <__divmodhi4_neg2>:
    17ac:	70 95       	com	r23
    17ae:	61 95       	neg	r22
    17b0:	7f 4f       	sbci	r23, 0xFF	; 255

000017b2 <__divmodhi4_exit>:
    17b2:	08 95       	ret

000017b4 <__tablejump2__>:
    17b4:	ee 0f       	add	r30, r30
    17b6:	ff 1f       	adc	r31, r31
    17b8:	88 1f       	adc	r24, r24
    17ba:	8b bf       	out	0x3b, r24	; 59
    17bc:	07 90       	elpm	r0, Z+
    17be:	f6 91       	elpm	r31, Z
    17c0:	e0 2d       	mov	r30, r0
    17c2:	19 94       	eijmp

000017c4 <atoi>:
    17c4:	fc 01       	movw	r30, r24
    17c6:	88 27       	eor	r24, r24
    17c8:	99 27       	eor	r25, r25
    17ca:	e8 94       	clt
    17cc:	21 91       	ld	r18, Z+
    17ce:	20 32       	cpi	r18, 0x20	; 32
    17d0:	e9 f3       	breq	.-6      	; 0x17cc <atoi+0x8>
    17d2:	29 30       	cpi	r18, 0x09	; 9
    17d4:	10 f0       	brcs	.+4      	; 0x17da <atoi+0x16>
    17d6:	2e 30       	cpi	r18, 0x0E	; 14
    17d8:	c8 f3       	brcs	.-14     	; 0x17cc <atoi+0x8>
    17da:	2b 32       	cpi	r18, 0x2B	; 43
    17dc:	39 f0       	breq	.+14     	; 0x17ec <atoi+0x28>
    17de:	2d 32       	cpi	r18, 0x2D	; 45
    17e0:	31 f4       	brne	.+12     	; 0x17ee <atoi+0x2a>
    17e2:	68 94       	set
    17e4:	03 c0       	rjmp	.+6      	; 0x17ec <atoi+0x28>
    17e6:	0b d0       	rcall	.+22     	; 0x17fe <__mulhi_const_10>
    17e8:	82 0f       	add	r24, r18
    17ea:	91 1d       	adc	r25, r1
    17ec:	21 91       	ld	r18, Z+
    17ee:	20 53       	subi	r18, 0x30	; 48
    17f0:	2a 30       	cpi	r18, 0x0A	; 10
    17f2:	c8 f3       	brcs	.-14     	; 0x17e6 <atoi+0x22>
    17f4:	1e f4       	brtc	.+6      	; 0x17fc <atoi+0x38>
    17f6:	90 95       	com	r25
    17f8:	81 95       	neg	r24
    17fa:	9f 4f       	sbci	r25, 0xFF	; 255
    17fc:	08 95       	ret

000017fe <__mulhi_const_10>:
    17fe:	7a e0       	ldi	r23, 0x0A	; 10
    1800:	97 9f       	mul	r25, r23
    1802:	90 2d       	mov	r25, r0
    1804:	87 9f       	mul	r24, r23
    1806:	80 2d       	mov	r24, r0
    1808:	91 0d       	add	r25, r1
    180a:	11 24       	eor	r1, r1
    180c:	08 95       	ret

0000180e <_exit>:
    180e:	f8 94       	cli

00001810 <__stop_program>:
    1810:	ff cf       	rjmp	.-2      	; 0x1810 <__stop_program>
