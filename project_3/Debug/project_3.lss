
project_3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00800200  00001968  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000018f4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00001666  00800200  00800200  00001968  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001968  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001998  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000298  00000000  00000000  000019d8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002fac  00000000  00000000  00001c70  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000157d  00000000  00000000  00004c1c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001a2a  00000000  00000000  00006199  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000768  00000000  00000000  00007bc4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000eb8  00000000  00000000  0000832c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000017f5  00000000  00000000  000091e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000278  00000000  00000000  0000a9d9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	7a c0       	rjmp	.+244    	; 0xf6 <__ctors_end>
       2:	00 00       	nop
       4:	8b c0       	rjmp	.+278    	; 0x11c <__bad_interrupt>
       6:	00 00       	nop
       8:	89 c0       	rjmp	.+274    	; 0x11c <__bad_interrupt>
       a:	00 00       	nop
       c:	87 c0       	rjmp	.+270    	; 0x11c <__bad_interrupt>
       e:	00 00       	nop
      10:	85 c0       	rjmp	.+266    	; 0x11c <__bad_interrupt>
      12:	00 00       	nop
      14:	83 c0       	rjmp	.+262    	; 0x11c <__bad_interrupt>
      16:	00 00       	nop
      18:	81 c0       	rjmp	.+258    	; 0x11c <__bad_interrupt>
      1a:	00 00       	nop
      1c:	7f c0       	rjmp	.+254    	; 0x11c <__bad_interrupt>
      1e:	00 00       	nop
      20:	7d c0       	rjmp	.+250    	; 0x11c <__bad_interrupt>
      22:	00 00       	nop
      24:	7b c0       	rjmp	.+246    	; 0x11c <__bad_interrupt>
      26:	00 00       	nop
      28:	79 c0       	rjmp	.+242    	; 0x11c <__bad_interrupt>
      2a:	00 00       	nop
      2c:	77 c0       	rjmp	.+238    	; 0x11c <__bad_interrupt>
      2e:	00 00       	nop
      30:	75 c0       	rjmp	.+234    	; 0x11c <__bad_interrupt>
      32:	00 00       	nop
      34:	73 c0       	rjmp	.+230    	; 0x11c <__bad_interrupt>
      36:	00 00       	nop
      38:	71 c0       	rjmp	.+226    	; 0x11c <__bad_interrupt>
      3a:	00 00       	nop
      3c:	6f c0       	rjmp	.+222    	; 0x11c <__bad_interrupt>
      3e:	00 00       	nop
      40:	6d c0       	rjmp	.+218    	; 0x11c <__bad_interrupt>
      42:	00 00       	nop
      44:	c4 c6       	rjmp	.+3464   	; 0xdce <__vector_17>
      46:	00 00       	nop
      48:	69 c0       	rjmp	.+210    	; 0x11c <__bad_interrupt>
      4a:	00 00       	nop
      4c:	67 c0       	rjmp	.+206    	; 0x11c <__bad_interrupt>
      4e:	00 00       	nop
      50:	65 c0       	rjmp	.+202    	; 0x11c <__bad_interrupt>
      52:	00 00       	nop
      54:	63 c0       	rjmp	.+198    	; 0x11c <__bad_interrupt>
      56:	00 00       	nop
      58:	61 c0       	rjmp	.+194    	; 0x11c <__bad_interrupt>
      5a:	00 00       	nop
      5c:	5f c0       	rjmp	.+190    	; 0x11c <__bad_interrupt>
      5e:	00 00       	nop
      60:	5d c0       	rjmp	.+186    	; 0x11c <__bad_interrupt>
      62:	00 00       	nop
      64:	5b c0       	rjmp	.+182    	; 0x11c <__bad_interrupt>
      66:	00 00       	nop
      68:	59 c0       	rjmp	.+178    	; 0x11c <__bad_interrupt>
      6a:	00 00       	nop
      6c:	57 c0       	rjmp	.+174    	; 0x11c <__bad_interrupt>
      6e:	00 00       	nop
      70:	55 c0       	rjmp	.+170    	; 0x11c <__bad_interrupt>
      72:	00 00       	nop
      74:	53 c0       	rjmp	.+166    	; 0x11c <__bad_interrupt>
      76:	00 00       	nop
      78:	51 c0       	rjmp	.+162    	; 0x11c <__bad_interrupt>
      7a:	00 00       	nop
      7c:	4f c0       	rjmp	.+158    	; 0x11c <__bad_interrupt>
      7e:	00 00       	nop
      80:	4d c0       	rjmp	.+154    	; 0x11c <__bad_interrupt>
      82:	00 00       	nop
      84:	4b c0       	rjmp	.+150    	; 0x11c <__bad_interrupt>
      86:	00 00       	nop
      88:	49 c0       	rjmp	.+146    	; 0x11c <__bad_interrupt>
      8a:	00 00       	nop
      8c:	47 c0       	rjmp	.+142    	; 0x11c <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 98 0b 	jmp	0x1730	; 0x1730 <__vector_36>
      94:	43 c0       	rjmp	.+134    	; 0x11c <__bad_interrupt>
      96:	00 00       	nop
      98:	0c 94 5d 0b 	jmp	0x16ba	; 0x16ba <__vector_38>
      9c:	3f c0       	rjmp	.+126    	; 0x11c <__bad_interrupt>
      9e:	00 00       	nop
      a0:	3d c0       	rjmp	.+122    	; 0x11c <__bad_interrupt>
      a2:	00 00       	nop
      a4:	3b c0       	rjmp	.+118    	; 0x11c <__bad_interrupt>
      a6:	00 00       	nop
      a8:	39 c0       	rjmp	.+114    	; 0x11c <__bad_interrupt>
      aa:	00 00       	nop
      ac:	37 c0       	rjmp	.+110    	; 0x11c <__bad_interrupt>
      ae:	00 00       	nop
      b0:	35 c0       	rjmp	.+106    	; 0x11c <__bad_interrupt>
      b2:	00 00       	nop
      b4:	33 c0       	rjmp	.+102    	; 0x11c <__bad_interrupt>
      b6:	00 00       	nop
      b8:	31 c0       	rjmp	.+98     	; 0x11c <__bad_interrupt>
      ba:	00 00       	nop
      bc:	2f c0       	rjmp	.+94     	; 0x11c <__bad_interrupt>
      be:	00 00       	nop
      c0:	2d c0       	rjmp	.+90     	; 0x11c <__bad_interrupt>
      c2:	00 00       	nop
      c4:	2b c0       	rjmp	.+86     	; 0x11c <__bad_interrupt>
      c6:	00 00       	nop
      c8:	29 c0       	rjmp	.+82     	; 0x11c <__bad_interrupt>
      ca:	00 00       	nop
      cc:	27 c0       	rjmp	.+78     	; 0x11c <__bad_interrupt>
      ce:	00 00       	nop
      d0:	25 c0       	rjmp	.+74     	; 0x11c <__bad_interrupt>
      d2:	00 00       	nop
      d4:	23 c0       	rjmp	.+70     	; 0x11c <__bad_interrupt>
      d6:	00 00       	nop
      d8:	21 c0       	rjmp	.+66     	; 0x11c <__bad_interrupt>
      da:	00 00       	nop
      dc:	1f c0       	rjmp	.+62     	; 0x11c <__bad_interrupt>
      de:	00 00       	nop
      e0:	1d c0       	rjmp	.+58     	; 0x11c <__bad_interrupt>
      e2:	00 00       	nop
      e4:	67 05       	cpc	r22, r7
      e6:	3f 05       	cpc	r19, r15
      e8:	67 05       	cpc	r22, r7
      ea:	75 05       	cpc	r23, r5
      ec:	6b 05       	cpc	r22, r11
      ee:	83 05       	cpc	r24, r3
      f0:	89 05       	cpc	r24, r9
      f2:	96 05       	cpc	r25, r6
      f4:	a3 05       	cpc	r26, r3

000000f6 <__ctors_end>:
      f6:	11 24       	eor	r1, r1
      f8:	1f be       	out	0x3f, r1	; 63
      fa:	cf ef       	ldi	r28, 0xFF	; 255
      fc:	d1 e2       	ldi	r29, 0x21	; 33
      fe:	de bf       	out	0x3e, r29	; 62
     100:	cd bf       	out	0x3d, r28	; 61
     102:	00 e0       	ldi	r16, 0x00	; 0
     104:	0c bf       	out	0x3c, r16	; 60

00000106 <__do_clear_bss>:
     106:	28 e1       	ldi	r18, 0x18	; 24
     108:	a0 e0       	ldi	r26, 0x00	; 0
     10a:	b2 e0       	ldi	r27, 0x02	; 2
     10c:	01 c0       	rjmp	.+2      	; 0x110 <.do_clear_bss_start>

0000010e <.do_clear_bss_loop>:
     10e:	1d 92       	st	X+, r1

00000110 <.do_clear_bss_start>:
     110:	a6 36       	cpi	r26, 0x66	; 102
     112:	b2 07       	cpc	r27, r18
     114:	e1 f7       	brne	.-8      	; 0x10e <.do_clear_bss_loop>
     116:	98 d6       	rcall	.+3376   	; 0xe48 <main>
     118:	0c 94 78 0c 	jmp	0x18f0	; 0x18f0 <_exit>

0000011c <__bad_interrupt>:
     11c:	71 cf       	rjmp	.-286    	; 0x0 <__vectors>

0000011e <CSwitch>:
Exit_Kernel:
        /*
          * This is the "top" half of CSwitch(), generally called by the kernel.
          * Assume I = 0, i.e., all interrupts are disabled.
          */
        SAVECTX
     11e:	0f 92       	push	r0
     120:	1f 92       	push	r1
     122:	2f 92       	push	r2
     124:	3f 92       	push	r3
     126:	4f 92       	push	r4
     128:	5f 92       	push	r5
     12a:	6f 92       	push	r6
     12c:	7f 92       	push	r7
     12e:	8f 92       	push	r8
     130:	9f 92       	push	r9
     132:	af 92       	push	r10
     134:	bf 92       	push	r11
     136:	cf 92       	push	r12
     138:	df 92       	push	r13
     13a:	ef 92       	push	r14
     13c:	ff 92       	push	r15
     13e:	0f 93       	push	r16
     140:	1f 93       	push	r17
     142:	2f 93       	push	r18
     144:	3f 93       	push	r19
     146:	4f 93       	push	r20
     148:	5f 93       	push	r21
     14a:	6f 93       	push	r22
     14c:	7f 93       	push	r23
     14e:	8f 93       	push	r24
     150:	9f 93       	push	r25
     152:	af 93       	push	r26
     154:	bf 93       	push	r27
     156:	cf 93       	push	r28
     158:	df 93       	push	r29
     15a:	ef 93       	push	r30
     15c:	ff 93       	push	r31
     15e:	fc b7       	in	r31, 0x3c	; 60
     160:	ff 93       	push	r31
     162:	0f b7       	in	r16, 0x3f	; 63
     164:	0f 93       	push	r16
        /*
          * Now, we have saved the kernel's context.
          * Save the current H/W stack pointer into KernelSp.
          */
        in   r30, SPL
     166:	ed b7       	in	r30, 0x3d	; 61
        in   r31, SPH
     168:	fe b7       	in	r31, 0x3e	; 62
        sts  KernelSp, r30
     16a:	e0 93 5c 18 	sts	0x185C, r30	; 0x80185c <KernelSp>
        sts  KernelSp+1, r31
     16e:	f0 93 5d 18 	sts	0x185D, r31	; 0x80185d <KernelSp+0x1>
        /*
          * We are now ready to restore Cp's context, i.e.,
          * switching the H/W stack pointer to CurrentSp.
          */
        lds  r30, CurrentSp
     172:	e0 91 5a 18 	lds	r30, 0x185A	; 0x80185a <CurrentSp>
        lds  r31, CurrentSp+1
     176:	f0 91 5b 18 	lds	r31, 0x185B	; 0x80185b <CurrentSp+0x1>
        out  SPL, r30
     17a:	ed bf       	out	0x3d, r30	; 61
        out  SPH, r31
     17c:	fe bf       	out	0x3e, r31	; 62
        /*
          * We are now executing in Cp's stack.
          * Note: at the bottom of the Cp's context is its return address.
          */
        RESTORECTX
     17e:	0f 91       	pop	r16
     180:	0f bf       	out	0x3f, r16	; 63
     182:	ff 91       	pop	r31
     184:	fc bf       	out	0x3c, r31	; 60
     186:	ff 91       	pop	r31
     188:	ef 91       	pop	r30
     18a:	df 91       	pop	r29
     18c:	cf 91       	pop	r28
     18e:	bf 91       	pop	r27
     190:	af 91       	pop	r26
     192:	9f 91       	pop	r25
     194:	8f 91       	pop	r24
     196:	7f 91       	pop	r23
     198:	6f 91       	pop	r22
     19a:	5f 91       	pop	r21
     19c:	4f 91       	pop	r20
     19e:	3f 91       	pop	r19
     1a0:	2f 91       	pop	r18
     1a2:	1f 91       	pop	r17
     1a4:	0f 91       	pop	r16
     1a6:	ff 90       	pop	r15
     1a8:	ef 90       	pop	r14
     1aa:	df 90       	pop	r13
     1ac:	cf 90       	pop	r12
     1ae:	bf 90       	pop	r11
     1b0:	af 90       	pop	r10
     1b2:	9f 90       	pop	r9
     1b4:	8f 90       	pop	r8
     1b6:	7f 90       	pop	r7
     1b8:	6f 90       	pop	r6
     1ba:	5f 90       	pop	r5
     1bc:	4f 90       	pop	r4
     1be:	3f 90       	pop	r3
     1c0:	2f 90       	pop	r2
     1c2:	1f 90       	pop	r1
     1c4:	0f 90       	pop	r0
        reti         /* re-enable all global interrupts */
     1c6:	18 95       	reti

000001c8 <Enter_Kernel>:
Enter_Kernel:
        /*
          * This is the "bottom" half of CSwitch(). We are still executing in
          * Cp's context.
          */
        SAVECTX
     1c8:	0f 92       	push	r0
     1ca:	1f 92       	push	r1
     1cc:	2f 92       	push	r2
     1ce:	3f 92       	push	r3
     1d0:	4f 92       	push	r4
     1d2:	5f 92       	push	r5
     1d4:	6f 92       	push	r6
     1d6:	7f 92       	push	r7
     1d8:	8f 92       	push	r8
     1da:	9f 92       	push	r9
     1dc:	af 92       	push	r10
     1de:	bf 92       	push	r11
     1e0:	cf 92       	push	r12
     1e2:	df 92       	push	r13
     1e4:	ef 92       	push	r14
     1e6:	ff 92       	push	r15
     1e8:	0f 93       	push	r16
     1ea:	1f 93       	push	r17
     1ec:	2f 93       	push	r18
     1ee:	3f 93       	push	r19
     1f0:	4f 93       	push	r20
     1f2:	5f 93       	push	r21
     1f4:	6f 93       	push	r22
     1f6:	7f 93       	push	r23
     1f8:	8f 93       	push	r24
     1fa:	9f 93       	push	r25
     1fc:	af 93       	push	r26
     1fe:	bf 93       	push	r27
     200:	cf 93       	push	r28
     202:	df 93       	push	r29
     204:	ef 93       	push	r30
     206:	ff 93       	push	r31
     208:	fc b7       	in	r31, 0x3c	; 60
     20a:	ff 93       	push	r31
     20c:	0f b7       	in	r16, 0x3f	; 63
     20e:	0f 93       	push	r16
        /*
          * Now, we have saved the Cp's context.
          * Save the current H/W stack pointer into CurrentSp.
          */
        in   r30, SPL
     210:	ed b7       	in	r30, 0x3d	; 61
        in   r31, SPH
     212:	fe b7       	in	r31, 0x3e	; 62
        sts  CurrentSp, r30
     214:	e0 93 5a 18 	sts	0x185A, r30	; 0x80185a <CurrentSp>
        sts  CurrentSp+1, r31
     218:	f0 93 5b 18 	sts	0x185B, r31	; 0x80185b <CurrentSp+0x1>
        /*
          * We are now ready to restore kernel's context, i.e.,
          * switching the H/W stack pointer back to KernelSp.
          */
        lds  r30, KernelSp
     21c:	e0 91 5c 18 	lds	r30, 0x185C	; 0x80185c <KernelSp>
        lds  r31, KernelSp+1
     220:	f0 91 5d 18 	lds	r31, 0x185D	; 0x80185d <KernelSp+0x1>
        out  SPL, r30
     224:	ed bf       	out	0x3d, r30	; 61
        out  SPH, r31
     226:	fe bf       	out	0x3e, r31	; 62
        /*
          * We are now executing in kernel's stack.
          */
       RESTORECTX
     228:	0f 91       	pop	r16
     22a:	0f bf       	out	0x3f, r16	; 63
     22c:	ff 91       	pop	r31
     22e:	fc bf       	out	0x3c, r31	; 60
     230:	ff 91       	pop	r31
     232:	ef 91       	pop	r30
     234:	df 91       	pop	r29
     236:	cf 91       	pop	r28
     238:	bf 91       	pop	r27
     23a:	af 91       	pop	r26
     23c:	9f 91       	pop	r25
     23e:	8f 91       	pop	r24
     240:	7f 91       	pop	r23
     242:	6f 91       	pop	r22
     244:	5f 91       	pop	r21
     246:	4f 91       	pop	r20
     248:	3f 91       	pop	r19
     24a:	2f 91       	pop	r18
     24c:	1f 91       	pop	r17
     24e:	0f 91       	pop	r16
     250:	ff 90       	pop	r15
     252:	ef 90       	pop	r14
     254:	df 90       	pop	r13
     256:	cf 90       	pop	r12
     258:	bf 90       	pop	r11
     25a:	af 90       	pop	r10
     25c:	9f 90       	pop	r9
     25e:	8f 90       	pop	r8
     260:	7f 90       	pop	r7
     262:	6f 90       	pop	r6
     264:	5f 90       	pop	r5
     266:	4f 90       	pop	r4
     268:	3f 90       	pop	r3
     26a:	2f 90       	pop	r2
     26c:	1f 90       	pop	r1
     26e:	0f 90       	pop	r0
        /*
          * We are ready to return to the caller of CSwitch() (or Exit_Kernel()).
          * Note: We should NOT re-enable interrupts while kernel is running.
          *         Therefore, we use "ret", and not "reti".
          */
       ret
     270:	08 95       	ret

00000272 <Idle_Task>:
unsigned int Now()
{
	unsigned int temp_time = TCNT1;
	unsigned int time = (10 * current_tick) + (temp_time / 2000);
	return time;
}
     272:	ff cf       	rjmp	.-2      	; 0x272 <Idle_Task>

00000274 <Task_Terminate>:
     274:	80 91 b4 04 	lds	r24, 0x04B4	; 0x8004b4 <KernelActive>
     278:	90 91 b5 04 	lds	r25, 0x04B5	; 0x8004b5 <KernelActive+0x1>
     27c:	89 2b       	or	r24, r25
     27e:	69 f0       	breq	.+26     	; 0x29a <Task_Terminate+0x26>
     280:	f8 94       	cli
     282:	e0 91 b8 04 	lds	r30, 0x04B8	; 0x8004b8 <Cp>
     286:	f0 91 b9 04 	lds	r31, 0x04B9	; 0x8004b9 <Cp+0x1>
     28a:	e8 5f       	subi	r30, 0xF8	; 248
     28c:	fe 4f       	sbci	r31, 0xFE	; 254
     28e:	83 e0       	ldi	r24, 0x03	; 3
     290:	80 83       	st	Z, r24
     292:	80 e1       	ldi	r24, 0x10	; 16
     294:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <__TEXT_REGION_LENGTH__+0x70010b>
     298:	97 cf       	rjmp	.-210    	; 0x1c8 <Enter_Kernel>
     29a:	08 95       	ret

0000029c <enqueue>:
     29c:	fc 01       	movw	r30, r24
     29e:	80 a1       	ldd	r24, Z+32	; 0x20
     2a0:	91 a1       	ldd	r25, Z+33	; 0x21
     2a2:	40 97       	sbiw	r24, 0x10	; 16
     2a4:	19 f4       	brne	.+6      	; 0x2ac <enqueue+0x10>
     2a6:	8c e0       	ldi	r24, 0x0C	; 12
     2a8:	88 b9       	out	0x08, r24	; 8
     2aa:	ff cf       	rjmp	.-2      	; 0x2aa <enqueue+0xe>
     2ac:	a4 a1       	ldd	r26, Z+36	; 0x24
     2ae:	b5 a1       	ldd	r27, Z+37	; 0x25
     2b0:	aa 0f       	add	r26, r26
     2b2:	bb 1f       	adc	r27, r27
     2b4:	ae 0f       	add	r26, r30
     2b6:	bf 1f       	adc	r27, r31
     2b8:	11 96       	adiw	r26, 0x01	; 1
     2ba:	7c 93       	st	X, r23
     2bc:	6e 93       	st	-X, r22
     2be:	80 a1       	ldd	r24, Z+32	; 0x20
     2c0:	91 a1       	ldd	r25, Z+33	; 0x21
     2c2:	01 96       	adiw	r24, 0x01	; 1
     2c4:	91 a3       	std	Z+33, r25	; 0x21
     2c6:	80 a3       	std	Z+32, r24	; 0x20
     2c8:	24 a1       	ldd	r18, Z+36	; 0x24
     2ca:	35 a1       	ldd	r19, Z+37	; 0x25
     2cc:	2f 5f       	subi	r18, 0xFF	; 255
     2ce:	3f 4f       	sbci	r19, 0xFF	; 255
     2d0:	2f 70       	andi	r18, 0x0F	; 15
     2d2:	30 78       	andi	r19, 0x80	; 128
     2d4:	33 23       	and	r19, r19
     2d6:	34 f4       	brge	.+12     	; 0x2e4 <enqueue+0x48>
     2d8:	21 50       	subi	r18, 0x01	; 1
     2da:	31 09       	sbc	r19, r1
     2dc:	20 6f       	ori	r18, 0xF0	; 240
     2de:	3f 6f       	ori	r19, 0xFF	; 255
     2e0:	2f 5f       	subi	r18, 0xFF	; 255
     2e2:	3f 4f       	sbci	r19, 0xFF	; 255
     2e4:	35 a3       	std	Z+37, r19	; 0x25
     2e6:	24 a3       	std	Z+36, r18	; 0x24
     2e8:	08 95       	ret

000002ea <dequeue>:
     2ea:	fc 01       	movw	r30, r24
     2ec:	80 a1       	ldd	r24, Z+32	; 0x20
     2ee:	91 a1       	ldd	r25, Z+33	; 0x21
     2f0:	89 2b       	or	r24, r25
     2f2:	19 f4       	brne	.+6      	; 0x2fa <dequeue+0x10>
     2f4:	8d e0       	ldi	r24, 0x0D	; 13
     2f6:	88 b9       	out	0x08, r24	; 8
     2f8:	ff cf       	rjmp	.-2      	; 0x2f8 <dequeue+0xe>
     2fa:	a2 a1       	ldd	r26, Z+34	; 0x22
     2fc:	b3 a1       	ldd	r27, Z+35	; 0x23
     2fe:	aa 0f       	add	r26, r26
     300:	bb 1f       	adc	r27, r27
     302:	ae 0f       	add	r26, r30
     304:	bf 1f       	adc	r27, r31
     306:	8d 91       	ld	r24, X+
     308:	9c 91       	ld	r25, X
     30a:	20 a1       	ldd	r18, Z+32	; 0x20
     30c:	31 a1       	ldd	r19, Z+33	; 0x21
     30e:	21 50       	subi	r18, 0x01	; 1
     310:	31 09       	sbc	r19, r1
     312:	31 a3       	std	Z+33, r19	; 0x21
     314:	20 a3       	std	Z+32, r18	; 0x20
     316:	22 a1       	ldd	r18, Z+34	; 0x22
     318:	33 a1       	ldd	r19, Z+35	; 0x23
     31a:	2f 5f       	subi	r18, 0xFF	; 255
     31c:	3f 4f       	sbci	r19, 0xFF	; 255
     31e:	2f 70       	andi	r18, 0x0F	; 15
     320:	30 78       	andi	r19, 0x80	; 128
     322:	33 23       	and	r19, r19
     324:	34 f4       	brge	.+12     	; 0x332 <dequeue+0x48>
     326:	21 50       	subi	r18, 0x01	; 1
     328:	31 09       	sbc	r19, r1
     32a:	20 6f       	ori	r18, 0xF0	; 240
     32c:	3f 6f       	ori	r19, 0xFF	; 255
     32e:	2f 5f       	subi	r18, 0xFF	; 255
     330:	3f 4f       	sbci	r19, 0xFF	; 255
     332:	33 a3       	std	Z+35, r19	; 0x23
     334:	22 a3       	std	Z+34, r18	; 0x22
     336:	08 95       	ret

00000338 <Dispatch>:
     338:	80 91 02 05 	lds	r24, 0x0502	; 0x800502 <ReadyQSystem+0x20>
     33c:	90 91 03 05 	lds	r25, 0x0503	; 0x800503 <ReadyQSystem+0x21>
     340:	18 16       	cp	r1, r24
     342:	19 06       	cpc	r1, r25
     344:	9c f4       	brge	.+38     	; 0x36c <Dispatch+0x34>
     346:	82 ee       	ldi	r24, 0xE2	; 226
     348:	94 e0       	ldi	r25, 0x04	; 4
     34a:	cf df       	rcall	.-98     	; 0x2ea <dequeue>
     34c:	90 93 b9 04 	sts	0x04B9, r25	; 0x8004b9 <Cp+0x1>
     350:	80 93 b8 04 	sts	0x04B8, r24	; 0x8004b8 <Cp>
     354:	fc 01       	movw	r30, r24
     356:	23 81       	ldd	r18, Z+3	; 0x03
     358:	34 81       	ldd	r19, Z+4	; 0x04
     35a:	30 93 5b 18 	sts	0x185B, r19	; 0x80185b <CurrentSp+0x1>
     35e:	20 93 5a 18 	sts	0x185A, r18	; 0x80185a <CurrentSp>
     362:	eb 5f       	subi	r30, 0xFB	; 251
     364:	fe 4f       	sbci	r31, 0xFE	; 254
     366:	82 e0       	ldi	r24, 0x02	; 2
     368:	80 83       	st	Z, r24
     36a:	08 95       	ret
     36c:	80 91 28 05 	lds	r24, 0x0528	; 0x800528 <ReadyQTime+0x20>
     370:	90 91 29 05 	lds	r25, 0x0529	; 0x800529 <ReadyQTime+0x21>
     374:	18 16       	cp	r1, r24
     376:	19 06       	cpc	r1, r25
     378:	9c f4       	brge	.+38     	; 0x3a0 <Dispatch+0x68>
     37a:	88 e0       	ldi	r24, 0x08	; 8
     37c:	95 e0       	ldi	r25, 0x05	; 5
     37e:	b5 df       	rcall	.-150    	; 0x2ea <dequeue>
     380:	90 93 b9 04 	sts	0x04B9, r25	; 0x8004b9 <Cp+0x1>
     384:	80 93 b8 04 	sts	0x04B8, r24	; 0x8004b8 <Cp>
     388:	fc 01       	movw	r30, r24
     38a:	23 81       	ldd	r18, Z+3	; 0x03
     38c:	34 81       	ldd	r19, Z+4	; 0x04
     38e:	30 93 5b 18 	sts	0x185B, r19	; 0x80185b <CurrentSp+0x1>
     392:	20 93 5a 18 	sts	0x185A, r18	; 0x80185a <CurrentSp>
     396:	eb 5f       	subi	r30, 0xFB	; 251
     398:	fe 4f       	sbci	r31, 0xFE	; 254
     39a:	82 e0       	ldi	r24, 0x02	; 2
     39c:	80 83       	st	Z, r24
     39e:	08 95       	ret
     3a0:	80 91 4e 05 	lds	r24, 0x054E	; 0x80054e <ReadyQRR+0x20>
     3a4:	90 91 4f 05 	lds	r25, 0x054F	; 0x80054f <ReadyQRR+0x21>
     3a8:	18 16       	cp	r1, r24
     3aa:	19 06       	cpc	r1, r25
     3ac:	9c f4       	brge	.+38     	; 0x3d4 <Dispatch+0x9c>
     3ae:	8e e2       	ldi	r24, 0x2E	; 46
     3b0:	95 e0       	ldi	r25, 0x05	; 5
     3b2:	9b df       	rcall	.-202    	; 0x2ea <dequeue>
     3b4:	90 93 b9 04 	sts	0x04B9, r25	; 0x8004b9 <Cp+0x1>
     3b8:	80 93 b8 04 	sts	0x04B8, r24	; 0x8004b8 <Cp>
     3bc:	fc 01       	movw	r30, r24
     3be:	23 81       	ldd	r18, Z+3	; 0x03
     3c0:	34 81       	ldd	r19, Z+4	; 0x04
     3c2:	30 93 5b 18 	sts	0x185B, r19	; 0x80185b <CurrentSp+0x1>
     3c6:	20 93 5a 18 	sts	0x185A, r18	; 0x80185a <CurrentSp>
     3ca:	eb 5f       	subi	r30, 0xFB	; 251
     3cc:	fe 4f       	sbci	r31, 0xFE	; 254
     3ce:	82 e0       	ldi	r24, 0x02	; 2
     3d0:	80 83       	st	Z, r24
     3d2:	08 95       	ret
     3d4:	80 91 dc 04 	lds	r24, 0x04DC	; 0x8004dc <ReadyQIdle+0x20>
     3d8:	90 91 dd 04 	lds	r25, 0x04DD	; 0x8004dd <ReadyQIdle+0x21>
     3dc:	18 16       	cp	r1, r24
     3de:	19 06       	cpc	r1, r25
     3e0:	9c f4       	brge	.+38     	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
     3e2:	8c eb       	ldi	r24, 0xBC	; 188
     3e4:	94 e0       	ldi	r25, 0x04	; 4
     3e6:	81 df       	rcall	.-254    	; 0x2ea <dequeue>
     3e8:	90 93 b9 04 	sts	0x04B9, r25	; 0x8004b9 <Cp+0x1>
     3ec:	80 93 b8 04 	sts	0x04B8, r24	; 0x8004b8 <Cp>
     3f0:	fc 01       	movw	r30, r24
     3f2:	23 81       	ldd	r18, Z+3	; 0x03
     3f4:	34 81       	ldd	r19, Z+4	; 0x04
     3f6:	30 93 5b 18 	sts	0x185B, r19	; 0x80185b <CurrentSp+0x1>
     3fa:	20 93 5a 18 	sts	0x185A, r18	; 0x80185a <CurrentSp>
     3fe:	eb 5f       	subi	r30, 0xFB	; 251
     400:	fe 4f       	sbci	r31, 0xFE	; 254
     402:	82 e0       	ldi	r24, 0x02	; 2
     404:	80 83       	st	Z, r24
     406:	08 95       	ret
     408:	88 e1       	ldi	r24, 0x18	; 24
     40a:	88 b9       	out	0x08, r24	; 8
     40c:	ff cf       	rjmp	.-2      	; 0x40c <__LOCK_REGION_LENGTH__+0xc>

0000040e <setReady>:
     40e:	cf 93       	push	r28
     410:	df 93       	push	r29
     412:	ec 01       	movw	r28, r24
     414:	8a 81       	ldd	r24, Y+2	; 0x02
     416:	81 30       	cpi	r24, 0x01	; 1
     418:	79 f0       	breq	.+30     	; 0x438 <setReady+0x2a>
     41a:	d8 f0       	brcs	.+54     	; 0x452 <setReady+0x44>
     41c:	82 30       	cpi	r24, 0x02	; 2
     41e:	39 f0       	breq	.+14     	; 0x42e <setReady+0x20>
     420:	83 30       	cpi	r24, 0x03	; 3
     422:	e1 f4       	brne	.+56     	; 0x45c <setReady+0x4e>
     424:	be 01       	movw	r22, r28
     426:	8c eb       	ldi	r24, 0xBC	; 188
     428:	94 e0       	ldi	r25, 0x04	; 4
     42a:	38 df       	rcall	.-400    	; 0x29c <enqueue>
     42c:	1a c0       	rjmp	.+52     	; 0x462 <setReady+0x54>
     42e:	be 01       	movw	r22, r28
     430:	8e e2       	ldi	r24, 0x2E	; 46
     432:	95 e0       	ldi	r25, 0x05	; 5
     434:	33 df       	rcall	.-410    	; 0x29c <enqueue>
     436:	15 c0       	rjmp	.+42     	; 0x462 <setReady+0x54>
     438:	be 01       	movw	r22, r28
     43a:	88 e0       	ldi	r24, 0x08	; 8
     43c:	95 e0       	ldi	r25, 0x05	; 5
     43e:	2e df       	rcall	.-420    	; 0x29c <enqueue>
     440:	80 91 28 05 	lds	r24, 0x0528	; 0x800528 <ReadyQTime+0x20>
     444:	90 91 29 05 	lds	r25, 0x0529	; 0x800529 <ReadyQTime+0x21>
     448:	02 97       	sbiw	r24, 0x02	; 2
     44a:	5c f0       	brlt	.+22     	; 0x462 <setReady+0x54>
     44c:	85 e0       	ldi	r24, 0x05	; 5
     44e:	88 b9       	out	0x08, r24	; 8
     450:	ff cf       	rjmp	.-2      	; 0x450 <setReady+0x42>
     452:	be 01       	movw	r22, r28
     454:	82 ee       	ldi	r24, 0xE2	; 226
     456:	94 e0       	ldi	r25, 0x04	; 4
     458:	21 df       	rcall	.-446    	; 0x29c <enqueue>
     45a:	03 c0       	rjmp	.+6      	; 0x462 <setReady+0x54>
     45c:	8c e7       	ldi	r24, 0x7C	; 124
     45e:	88 b9       	out	0x08, r24	; 8
     460:	ff cf       	rjmp	.-2      	; 0x460 <setReady+0x52>
     462:	cb 5f       	subi	r28, 0xFB	; 251
     464:	de 4f       	sbci	r29, 0xFE	; 254
     466:	81 e0       	ldi	r24, 0x01	; 1
     468:	88 83       	st	Y, r24
     46a:	df 91       	pop	r29
     46c:	cf 91       	pop	r28
     46e:	08 95       	ret

00000470 <Kernel_Create_Task_At>:
     470:	8f 92       	push	r8
     472:	9f 92       	push	r9
     474:	af 92       	push	r10
     476:	bf 92       	push	r11
     478:	cf 92       	push	r12
     47a:	df 92       	push	r13
     47c:	ef 92       	push	r14
     47e:	ff 92       	push	r15
     480:	0f 93       	push	r16
     482:	cf 93       	push	r28
     484:	df 93       	push	r29
     486:	ec 01       	movw	r28, r24
     488:	fc 01       	movw	r30, r24
     48a:	35 96       	adiw	r30, 0x05	; 5
     48c:	81 2c       	mov	r8, r1
     48e:	99 24       	eor	r9, r9
     490:	93 94       	inc	r9
     492:	df 01       	movw	r26, r30
     494:	c4 01       	movw	r24, r8
     496:	1d 92       	st	X+, r1
     498:	01 97       	sbiw	r24, 0x01	; 1
     49a:	e9 f7       	brne	.-6      	; 0x496 <Kernel_Create_Task_At+0x26>
     49c:	e1 50       	subi	r30, 0x01	; 1
     49e:	ff 4f       	sbci	r31, 0xFF	; 255
     4a0:	8a e3       	ldi	r24, 0x3A	; 58
     4a2:	91 e0       	ldi	r25, 0x01	; 1
     4a4:	80 83       	st	Z, r24
     4a6:	31 97       	sbiw	r30, 0x01	; 1
     4a8:	90 83       	st	Z, r25
     4aa:	31 97       	sbiw	r30, 0x01	; 1
     4ac:	10 82       	st	Z, r1
     4ae:	31 97       	sbiw	r30, 0x01	; 1
     4b0:	60 83       	st	Z, r22
     4b2:	31 97       	sbiw	r30, 0x01	; 1
     4b4:	70 83       	st	Z, r23
     4b6:	31 97       	sbiw	r30, 0x01	; 1
     4b8:	10 82       	st	Z, r1
     4ba:	de 01       	movw	r26, r28
     4bc:	a4 52       	subi	r26, 0x24	; 36
     4be:	bf 4f       	sbci	r27, 0xFF	; 255
     4c0:	b2 97       	sbiw	r30, 0x22	; 34
     4c2:	80 81       	ld	r24, Z
     4c4:	80 68       	ori	r24, 0x80	; 128
     4c6:	80 83       	st	Z, r24
     4c8:	bc 83       	std	Y+4, r27	; 0x04
     4ca:	ab 83       	std	Y+3, r26	; 0x03
     4cc:	b9 96       	adiw	r30, 0x29	; 41
     4ce:	71 83       	std	Z+1, r23	; 0x01
     4d0:	60 83       	st	Z, r22
     4d2:	32 96       	adiw	r30, 0x02	; 2
     4d4:	10 82       	st	Z, r1
     4d6:	9d 96       	adiw	r26, 0x2d	; 45
     4d8:	11 96       	adiw	r26, 0x01	; 1
     4da:	5c 93       	st	X, r21
     4dc:	4e 93       	st	-X, r20
     4de:	39 83       	std	Y+1, r19	; 0x01
     4e0:	28 83       	st	Y, r18
     4e2:	0a 83       	std	Y+2, r16	; 0x02
     4e4:	10 82       	st	Z, r1
     4e6:	39 96       	adiw	r30, 0x09	; 9
     4e8:	f1 82       	std	Z+1, r15	; 0x01
     4ea:	e0 82       	st	Z, r14
     4ec:	32 96       	adiw	r30, 0x02	; 2
     4ee:	d1 82       	std	Z+1, r13	; 0x01
     4f0:	c0 82       	st	Z, r12
     4f2:	32 96       	adiw	r30, 0x02	; 2
     4f4:	b1 82       	std	Z+1, r11	; 0x01
     4f6:	a0 82       	st	Z, r10
     4f8:	32 96       	adiw	r30, 0x02	; 2
     4fa:	b1 82       	std	Z+1, r11	; 0x01
     4fc:	a0 82       	st	Z, r10
     4fe:	32 96       	adiw	r30, 0x02	; 2
     500:	11 82       	std	Z+1, r1	; 0x01
     502:	10 82       	st	Z, r1
     504:	01 30       	cpi	r16, 0x01	; 1
     506:	21 f4       	brne	.+8      	; 0x510 <Kernel_Create_Task_At+0xa0>
     508:	84 e0       	ldi	r24, 0x04	; 4
     50a:	74 97       	sbiw	r30, 0x14	; 20
     50c:	80 83       	st	Z, r24
     50e:	02 c0       	rjmp	.+4      	; 0x514 <Kernel_Create_Task_At+0xa4>
     510:	ce 01       	movw	r24, r28
     512:	7d df       	rcall	.-262    	; 0x40e <setReady>
     514:	88 81       	ld	r24, Y
     516:	99 81       	ldd	r25, Y+1	; 0x01
     518:	df 91       	pop	r29
     51a:	cf 91       	pop	r28
     51c:	0f 91       	pop	r16
     51e:	ff 90       	pop	r15
     520:	ef 90       	pop	r14
     522:	df 90       	pop	r13
     524:	cf 90       	pop	r12
     526:	bf 90       	pop	r11
     528:	af 90       	pop	r10
     52a:	9f 90       	pop	r9
     52c:	8f 90       	pop	r8
     52e:	08 95       	ret

00000530 <Kernel_Create_Task>:
     530:	af 92       	push	r10
     532:	bf 92       	push	r11
     534:	cf 92       	push	r12
     536:	df 92       	push	r13
     538:	ef 92       	push	r14
     53a:	ff 92       	push	r15
     53c:	0f 93       	push	r16
     53e:	1f 93       	push	r17
     540:	cf 93       	push	r28
     542:	df 93       	push	r29
     544:	ec 01       	movw	r28, r24
     546:	80 91 b2 04 	lds	r24, 0x04B2	; 0x8004b2 <Tasks>
     54a:	90 91 b3 04 	lds	r25, 0x04B3	; 0x8004b3 <Tasks+0x1>
     54e:	40 97       	sbiw	r24, 0x10	; 16
     550:	99 f1       	breq	.+102    	; 0x5b8 <Kernel_Create_Task+0x88>
     552:	80 91 59 06 	lds	r24, 0x0659	; 0x800659 <Process+0x105>
     556:	88 23       	and	r24, r24
     558:	71 f0       	breq	.+28     	; 0x576 <Kernel_Create_Task+0x46>
     55a:	ab e7       	ldi	r26, 0x7B	; 123
     55c:	b7 e0       	ldi	r27, 0x07	; 7
     55e:	e1 e0       	ldi	r30, 0x01	; 1
     560:	f0 e0       	ldi	r31, 0x00	; 0
     562:	9c 91       	ld	r25, X
     564:	99 23       	and	r25, r25
     566:	49 f0       	breq	.+18     	; 0x57a <Kernel_Create_Task+0x4a>
     568:	31 96       	adiw	r30, 0x01	; 1
     56a:	ae 5d       	subi	r26, 0xDE	; 222
     56c:	be 4f       	sbci	r27, 0xFE	; 254
     56e:	e0 31       	cpi	r30, 0x10	; 16
     570:	f1 05       	cpc	r31, r1
     572:	b9 f7       	brne	.-18     	; 0x562 <Kernel_Create_Task+0x32>
     574:	02 c0       	rjmp	.+4      	; 0x57a <Kernel_Create_Task+0x4a>
     576:	e0 e0       	ldi	r30, 0x00	; 0
     578:	f0 e0       	ldi	r31, 0x00	; 0
     57a:	57 01       	movw	r10, r14
     57c:	68 01       	movw	r12, r16
     57e:	79 01       	movw	r14, r18
     580:	04 2f       	mov	r16, r20
     582:	ab 01       	movw	r20, r22
     584:	be 01       	movw	r22, r28
     586:	80 91 b2 04 	lds	r24, 0x04B2	; 0x8004b2 <Tasks>
     58a:	90 91 b3 04 	lds	r25, 0x04B3	; 0x8004b3 <Tasks+0x1>
     58e:	01 96       	adiw	r24, 0x01	; 1
     590:	90 93 b3 04 	sts	0x04B3, r25	; 0x8004b3 <Tasks+0x1>
     594:	80 93 b2 04 	sts	0x04B2, r24	; 0x8004b2 <Tasks>
     598:	9f 01       	movw	r18, r30
     59a:	2f 5f       	subi	r18, 0xFF	; 255
     59c:	3f 4f       	sbci	r19, 0xFF	; 255
     59e:	a2 e2       	ldi	r26, 0x22	; 34
     5a0:	b1 e0       	ldi	r27, 0x01	; 1
     5a2:	ea 9f       	mul	r30, r26
     5a4:	c0 01       	movw	r24, r0
     5a6:	eb 9f       	mul	r30, r27
     5a8:	90 0d       	add	r25, r0
     5aa:	fa 9f       	mul	r31, r26
     5ac:	90 0d       	add	r25, r0
     5ae:	11 24       	eor	r1, r1
     5b0:	8c 5a       	subi	r24, 0xAC	; 172
     5b2:	9a 4f       	sbci	r25, 0xFA	; 250
     5b4:	5d df       	rcall	.-326    	; 0x470 <Kernel_Create_Task_At>
     5b6:	02 c0       	rjmp	.+4      	; 0x5bc <Kernel_Create_Task+0x8c>
     5b8:	80 e0       	ldi	r24, 0x00	; 0
     5ba:	90 e0       	ldi	r25, 0x00	; 0
     5bc:	df 91       	pop	r29
     5be:	cf 91       	pop	r28
     5c0:	1f 91       	pop	r17
     5c2:	0f 91       	pop	r16
     5c4:	ff 90       	pop	r15
     5c6:	ef 90       	pop	r14
     5c8:	df 90       	pop	r13
     5ca:	cf 90       	pop	r12
     5cc:	bf 90       	pop	r11
     5ce:	af 90       	pop	r10
     5d0:	08 95       	ret

000005d2 <Kernel_Chan_Init>:
     5d2:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <_edata>
     5d6:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <_edata+0x1>
     5da:	40 97       	sbiw	r24, 0x10	; 16
     5dc:	18 f0       	brcs	.+6      	; 0x5e4 <Kernel_Chan_Init+0x12>
     5de:	82 e0       	ldi	r24, 0x02	; 2
     5e0:	88 b9       	out	0x08, r24	; 8
     5e2:	ff cf       	rjmp	.-2      	; 0x5e2 <Kernel_Chan_Init+0x10>
     5e4:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <_edata>
     5e8:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <_edata+0x1>
     5ec:	8b e2       	ldi	r24, 0x2B	; 43
     5ee:	82 9f       	mul	r24, r18
     5f0:	f0 01       	movw	r30, r0
     5f2:	83 9f       	mul	r24, r19
     5f4:	f0 0d       	add	r31, r0
     5f6:	11 24       	eor	r1, r1
     5f8:	ee 5f       	subi	r30, 0xFE	; 254
     5fa:	fd 4f       	sbci	r31, 0xFD	; 253
     5fc:	91 e0       	ldi	r25, 0x01	; 1
     5fe:	90 83       	st	Z, r25
     600:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <_edata>
     604:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <_edata+0x1>
     608:	82 9f       	mul	r24, r18
     60a:	f0 01       	movw	r30, r0
     60c:	83 9f       	mul	r24, r19
     60e:	f0 0d       	add	r31, r0
     610:	11 24       	eor	r1, r1
     612:	ee 5f       	subi	r30, 0xFE	; 254
     614:	fd 4f       	sbci	r31, 0xFD	; 253
     616:	14 a2       	std	Z+36, r1	; 0x24
     618:	13 a2       	std	Z+35, r1	; 0x23
     61a:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <_edata>
     61e:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <_edata+0x1>
     622:	82 9f       	mul	r24, r18
     624:	f0 01       	movw	r30, r0
     626:	83 9f       	mul	r24, r19
     628:	f0 0d       	add	r31, r0
     62a:	11 24       	eor	r1, r1
     62c:	ee 5f       	subi	r30, 0xFE	; 254
     62e:	fd 4f       	sbci	r31, 0xFD	; 253
     630:	16 a2       	std	Z+38, r1	; 0x26
     632:	15 a2       	std	Z+37, r1	; 0x25
     634:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <_edata>
     638:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <_edata+0x1>
     63c:	82 9f       	mul	r24, r18
     63e:	f0 01       	movw	r30, r0
     640:	83 9f       	mul	r24, r19
     642:	f0 0d       	add	r31, r0
     644:	11 24       	eor	r1, r1
     646:	ee 5f       	subi	r30, 0xFE	; 254
     648:	fd 4f       	sbci	r31, 0xFD	; 253
     64a:	10 a6       	std	Z+40, r1	; 0x28
     64c:	17 a2       	std	Z+39, r1	; 0x27
     64e:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <_edata>
     652:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <_edata+0x1>
     656:	01 96       	adiw	r24, 0x01	; 1
     658:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <_edata+0x1>
     65c:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <_edata>
     660:	08 95       	ret

00000662 <Kernel_Chan_Send>:
     662:	af 92       	push	r10
     664:	bf 92       	push	r11
     666:	cf 92       	push	r12
     668:	df 92       	push	r13
     66a:	ef 92       	push	r14
     66c:	ff 92       	push	r15
     66e:	0f 93       	push	r16
     670:	1f 93       	push	r17
     672:	cf 93       	push	r28
     674:	df 93       	push	r29
     676:	e0 91 b8 04 	lds	r30, 0x04B8	; 0x8004b8 <Cp>
     67a:	f0 91 b9 04 	lds	r31, 0x04B9	; 0x8004b9 <Cp+0x1>
     67e:	82 81       	ldd	r24, Z+2	; 0x02
     680:	81 30       	cpi	r24, 0x01	; 1
     682:	19 f4       	brne	.+6      	; 0x68a <Kernel_Chan_Send+0x28>
     684:	83 e0       	ldi	r24, 0x03	; 3
     686:	88 b9       	out	0x08, r24	; 8
     688:	ff cf       	rjmp	.-2      	; 0x688 <Kernel_Chan_Send+0x26>
     68a:	df 01       	movw	r26, r30
     68c:	a3 5f       	subi	r26, 0xF3	; 243
     68e:	be 4f       	sbci	r27, 0xFE	; 254
     690:	ad 90       	ld	r10, X+
     692:	bc 90       	ld	r11, X
     694:	21 e0       	ldi	r18, 0x01	; 1
     696:	a2 1a       	sub	r10, r18
     698:	b1 08       	sbc	r11, r1
     69a:	8b e2       	ldi	r24, 0x2B	; 43
     69c:	8a 9d       	mul	r24, r10
     69e:	d0 01       	movw	r26, r0
     6a0:	8b 9d       	mul	r24, r11
     6a2:	b0 0d       	add	r27, r0
     6a4:	11 24       	eor	r1, r1
     6a6:	ae 5f       	subi	r26, 0xFE	; 254
     6a8:	bd 4f       	sbci	r27, 0xFD	; 253
     6aa:	8c 91       	ld	r24, X
     6ac:	81 11       	cpse	r24, r1
     6ae:	03 c0       	rjmp	.+6      	; 0x6b6 <Kernel_Chan_Send+0x54>
     6b0:	82 e0       	ldi	r24, 0x02	; 2
     6b2:	88 b9       	out	0x08, r24	; 8
     6b4:	ff cf       	rjmp	.-2      	; 0x6b4 <Kernel_Chan_Send+0x52>
     6b6:	82 30       	cpi	r24, 0x02	; 2
     6b8:	19 f4       	brne	.+6      	; 0x6c0 <Kernel_Chan_Send+0x5e>
     6ba:	84 e0       	ldi	r24, 0x04	; 4
     6bc:	88 b9       	out	0x08, r24	; 8
     6be:	ff cf       	rjmp	.-2      	; 0x6be <Kernel_Chan_Send+0x5c>
     6c0:	df 01       	movw	r26, r30
     6c2:	a1 5f       	subi	r26, 0xF1	; 241
     6c4:	be 4f       	sbci	r27, 0xFE	; 254
     6c6:	2d 91       	ld	r18, X+
     6c8:	3c 91       	ld	r19, X
     6ca:	9b e2       	ldi	r25, 0x2B	; 43
     6cc:	9a 9d       	mul	r25, r10
     6ce:	d0 01       	movw	r26, r0
     6d0:	9b 9d       	mul	r25, r11
     6d2:	b0 0d       	add	r27, r0
     6d4:	11 24       	eor	r1, r1
     6d6:	ae 5f       	subi	r26, 0xFE	; 254
     6d8:	bd 4f       	sbci	r27, 0xFD	; 253
     6da:	9a 96       	adiw	r26, 0x2a	; 42
     6dc:	3c 93       	st	X, r19
     6de:	2e 93       	st	-X, r18
     6e0:	99 97       	sbiw	r26, 0x29	; 41
     6e2:	83 30       	cpi	r24, 0x03	; 3
     6e4:	09 f0       	breq	.+2      	; 0x6e8 <Kernel_Chan_Send+0x86>
     6e6:	3e c0       	rjmp	.+124    	; 0x764 <Kernel_Chan_Send+0x102>
     6e8:	19 c0       	rjmp	.+50     	; 0x71c <Kernel_Chan_Send+0xba>
     6ea:	c8 01       	movw	r24, r16
     6ec:	fe dd       	rcall	.-1028   	; 0x2ea <dequeue>
     6ee:	ec 01       	movw	r28, r24
     6f0:	f7 01       	movw	r30, r14
     6f2:	80 81       	ld	r24, Z
     6f4:	91 81       	ldd	r25, Z+1	; 0x01
     6f6:	fe 01       	movw	r30, r28
     6f8:	e5 5f       	subi	r30, 0xF5	; 245
     6fa:	fe 4f       	sbci	r31, 0xFE	; 254
     6fc:	91 83       	std	Z+1, r25	; 0x01
     6fe:	80 83       	st	Z, r24
     700:	ce 01       	movw	r24, r28
     702:	85 de       	rcall	.-758    	; 0x40e <setReady>
     704:	e0 91 b8 04 	lds	r30, 0x04B8	; 0x8004b8 <Cp>
     708:	f0 91 b9 04 	lds	r31, 0x04B9	; 0x8004b9 <Cp+0x1>
     70c:	82 81       	ldd	r24, Z+2	; 0x02
     70e:	9a 81       	ldd	r25, Y+2	; 0x02
     710:	98 17       	cp	r25, r24
     712:	b8 f4       	brcc	.+46     	; 0x742 <Kernel_Chan_Send+0xe0>
     714:	cf 01       	movw	r24, r30
     716:	7b de       	rcall	.-778    	; 0x40e <setReady>
     718:	0f de       	rcall	.-994    	; 0x338 <Dispatch>
     71a:	13 c0       	rjmp	.+38     	; 0x742 <Kernel_Chan_Send+0xe0>
     71c:	8b e2       	ldi	r24, 0x2B	; 43
     71e:	8a 9d       	mul	r24, r10
     720:	80 01       	movw	r16, r0
     722:	8b 9d       	mul	r24, r11
     724:	10 0d       	add	r17, r0
     726:	11 24       	eor	r1, r1
     728:	c8 01       	movw	r24, r16
     72a:	8e 5f       	subi	r24, 0xFE	; 254
     72c:	9d 4f       	sbci	r25, 0xFD	; 253
     72e:	6c 01       	movw	r12, r24
     730:	f3 e2       	ldi	r31, 0x23	; 35
     732:	cf 0e       	add	r12, r31
     734:	d1 1c       	adc	r13, r1
     736:	7c 01       	movw	r14, r24
     738:	29 e2       	ldi	r18, 0x29	; 41
     73a:	e2 0e       	add	r14, r18
     73c:	f1 1c       	adc	r15, r1
     73e:	0b 5f       	subi	r16, 0xFB	; 251
     740:	1d 4f       	sbci	r17, 0xFD	; 253
     742:	f6 01       	movw	r30, r12
     744:	80 81       	ld	r24, Z
     746:	91 81       	ldd	r25, Z+1	; 0x01
     748:	18 16       	cp	r1, r24
     74a:	19 06       	cpc	r1, r25
     74c:	74 f2       	brlt	.-100    	; 0x6ea <Kernel_Chan_Send+0x88>
     74e:	8b e2       	ldi	r24, 0x2B	; 43
     750:	8a 9d       	mul	r24, r10
     752:	f0 01       	movw	r30, r0
     754:	8b 9d       	mul	r24, r11
     756:	f0 0d       	add	r31, r0
     758:	11 24       	eor	r1, r1
     75a:	ee 5f       	subi	r30, 0xFE	; 254
     75c:	fd 4f       	sbci	r31, 0xFD	; 253
     75e:	81 e0       	ldi	r24, 0x01	; 1
     760:	80 83       	st	Z, r24
     762:	12 c0       	rjmp	.+36     	; 0x788 <Kernel_Chan_Send+0x126>
     764:	8b e2       	ldi	r24, 0x2B	; 43
     766:	8a 9d       	mul	r24, r10
     768:	d0 01       	movw	r26, r0
     76a:	8b 9d       	mul	r24, r11
     76c:	b0 0d       	add	r27, r0
     76e:	11 24       	eor	r1, r1
     770:	ae 5f       	subi	r26, 0xFE	; 254
     772:	bd 4f       	sbci	r27, 0xFD	; 253
     774:	82 e0       	ldi	r24, 0x02	; 2
     776:	8c 93       	st	X, r24
     778:	12 96       	adiw	r26, 0x02	; 2
     77a:	fc 93       	st	X, r31
     77c:	ee 93       	st	-X, r30
     77e:	11 97       	sbiw	r26, 0x01	; 1
     780:	eb 5f       	subi	r30, 0xFB	; 251
     782:	fe 4f       	sbci	r31, 0xFE	; 254
     784:	83 e0       	ldi	r24, 0x03	; 3
     786:	80 83       	st	Z, r24
     788:	df 91       	pop	r29
     78a:	cf 91       	pop	r28
     78c:	1f 91       	pop	r17
     78e:	0f 91       	pop	r16
     790:	ff 90       	pop	r15
     792:	ef 90       	pop	r14
     794:	df 90       	pop	r13
     796:	cf 90       	pop	r12
     798:	bf 90       	pop	r11
     79a:	af 90       	pop	r10
     79c:	08 95       	ret

0000079e <Kernel_Chan_Receive>:
     79e:	ef 92       	push	r14
     7a0:	ff 92       	push	r15
     7a2:	0f 93       	push	r16
     7a4:	1f 93       	push	r17
     7a6:	cf 93       	push	r28
     7a8:	df 93       	push	r29
     7aa:	c0 91 b8 04 	lds	r28, 0x04B8	; 0x8004b8 <Cp>
     7ae:	d0 91 b9 04 	lds	r29, 0x04B9	; 0x8004b9 <Cp+0x1>
     7b2:	8a 81       	ldd	r24, Y+2	; 0x02
     7b4:	81 30       	cpi	r24, 0x01	; 1
     7b6:	19 f4       	brne	.+6      	; 0x7be <Kernel_Chan_Receive+0x20>
     7b8:	83 e0       	ldi	r24, 0x03	; 3
     7ba:	88 b9       	out	0x08, r24	; 8
     7bc:	ff cf       	rjmp	.-2      	; 0x7bc <Kernel_Chan_Receive+0x1e>
     7be:	fe 01       	movw	r30, r28
     7c0:	e3 5f       	subi	r30, 0xF3	; 243
     7c2:	fe 4f       	sbci	r31, 0xFE	; 254
     7c4:	00 81       	ld	r16, Z
     7c6:	11 81       	ldd	r17, Z+1	; 0x01
     7c8:	01 50       	subi	r16, 0x01	; 1
     7ca:	11 09       	sbc	r17, r1
     7cc:	8b e2       	ldi	r24, 0x2B	; 43
     7ce:	80 9f       	mul	r24, r16
     7d0:	f0 01       	movw	r30, r0
     7d2:	81 9f       	mul	r24, r17
     7d4:	f0 0d       	add	r31, r0
     7d6:	11 24       	eor	r1, r1
     7d8:	ee 5f       	subi	r30, 0xFE	; 254
     7da:	fd 4f       	sbci	r31, 0xFD	; 253
     7dc:	80 81       	ld	r24, Z
     7de:	81 11       	cpse	r24, r1
     7e0:	03 c0       	rjmp	.+6      	; 0x7e8 <Kernel_Chan_Receive+0x4a>
     7e2:	82 e0       	ldi	r24, 0x02	; 2
     7e4:	88 b9       	out	0x08, r24	; 8
     7e6:	ff cf       	rjmp	.-2      	; 0x7e6 <Kernel_Chan_Receive+0x48>
     7e8:	82 30       	cpi	r24, 0x02	; 2
     7ea:	91 f5       	brne	.+100    	; 0x850 <Kernel_Chan_Receive+0xb2>
     7ec:	2b e2       	ldi	r18, 0x2B	; 43
     7ee:	20 9f       	mul	r18, r16
     7f0:	c0 01       	movw	r24, r0
     7f2:	21 9f       	mul	r18, r17
     7f4:	90 0d       	add	r25, r0
     7f6:	11 24       	eor	r1, r1
     7f8:	9c 01       	movw	r18, r24
     7fa:	2e 5f       	subi	r18, 0xFE	; 254
     7fc:	3d 4f       	sbci	r19, 0xFD	; 253
     7fe:	79 01       	movw	r14, r18
     800:	d9 01       	movw	r26, r18
     802:	99 96       	adiw	r26, 0x29	; 41
     804:	8d 91       	ld	r24, X+
     806:	9c 91       	ld	r25, X
     808:	9a 97       	sbiw	r26, 0x2a	; 42
     80a:	fe 01       	movw	r30, r28
     80c:	e5 5f       	subi	r30, 0xF5	; 245
     80e:	fe 4f       	sbci	r31, 0xFE	; 254
     810:	91 83       	std	Z+1, r25	; 0x01
     812:	80 83       	st	Z, r24
     814:	11 96       	adiw	r26, 0x01	; 1
     816:	8d 91       	ld	r24, X+
     818:	9c 91       	ld	r25, X
     81a:	12 97       	sbiw	r26, 0x02	; 2
     81c:	f8 dd       	rcall	.-1040   	; 0x40e <setReady>
     81e:	8a 81       	ldd	r24, Y+2	; 0x02
     820:	d7 01       	movw	r26, r14
     822:	11 96       	adiw	r26, 0x01	; 1
     824:	ed 91       	ld	r30, X+
     826:	fc 91       	ld	r31, X
     828:	12 97       	sbiw	r26, 0x02	; 2
     82a:	92 81       	ldd	r25, Z+2	; 0x02
     82c:	98 17       	cp	r25, r24
     82e:	18 f4       	brcc	.+6      	; 0x836 <Kernel_Chan_Receive+0x98>
     830:	ce 01       	movw	r24, r28
     832:	ed dd       	rcall	.-1062   	; 0x40e <setReady>
     834:	81 dd       	rcall	.-1278   	; 0x338 <Dispatch>
     836:	8b e2       	ldi	r24, 0x2B	; 43
     838:	80 9f       	mul	r24, r16
     83a:	f0 01       	movw	r30, r0
     83c:	81 9f       	mul	r24, r17
     83e:	f0 0d       	add	r31, r0
     840:	11 24       	eor	r1, r1
     842:	ee 5f       	subi	r30, 0xFE	; 254
     844:	fd 4f       	sbci	r31, 0xFD	; 253
     846:	12 82       	std	Z+2, r1	; 0x02
     848:	11 82       	std	Z+1, r1	; 0x01
     84a:	81 e0       	ldi	r24, 0x01	; 1
     84c:	80 83       	st	Z, r24
     84e:	13 c0       	rjmp	.+38     	; 0x876 <Kernel_Chan_Receive+0xd8>
     850:	8b e2       	ldi	r24, 0x2B	; 43
     852:	80 9f       	mul	r24, r16
     854:	70 01       	movw	r14, r0
     856:	81 9f       	mul	r24, r17
     858:	f0 0c       	add	r15, r0
     85a:	11 24       	eor	r1, r1
     85c:	be 01       	movw	r22, r28
     85e:	c7 01       	movw	r24, r14
     860:	8b 5f       	subi	r24, 0xFB	; 251
     862:	9d 4f       	sbci	r25, 0xFD	; 253
     864:	1b dd       	rcall	.-1482   	; 0x29c <enqueue>
     866:	f7 01       	movw	r30, r14
     868:	ee 5f       	subi	r30, 0xFE	; 254
     86a:	fd 4f       	sbci	r31, 0xFD	; 253
     86c:	83 e0       	ldi	r24, 0x03	; 3
     86e:	80 83       	st	Z, r24
     870:	cb 5f       	subi	r28, 0xFB	; 251
     872:	de 4f       	sbci	r29, 0xFE	; 254
     874:	88 83       	st	Y, r24
     876:	df 91       	pop	r29
     878:	cf 91       	pop	r28
     87a:	1f 91       	pop	r17
     87c:	0f 91       	pop	r16
     87e:	ff 90       	pop	r15
     880:	ef 90       	pop	r14
     882:	08 95       	ret

00000884 <Kernel_Chan_Write>:
     884:	af 92       	push	r10
     886:	bf 92       	push	r11
     888:	cf 92       	push	r12
     88a:	df 92       	push	r13
     88c:	ef 92       	push	r14
     88e:	ff 92       	push	r15
     890:	0f 93       	push	r16
     892:	1f 93       	push	r17
     894:	cf 93       	push	r28
     896:	df 93       	push	r29
     898:	20 91 b8 04 	lds	r18, 0x04B8	; 0x8004b8 <Cp>
     89c:	30 91 b9 04 	lds	r19, 0x04B9	; 0x8004b9 <Cp+0x1>
     8a0:	f9 01       	movw	r30, r18
     8a2:	e3 5f       	subi	r30, 0xF3	; 243
     8a4:	fe 4f       	sbci	r31, 0xFE	; 254
     8a6:	a0 80       	ld	r10, Z
     8a8:	b1 80       	ldd	r11, Z+1	; 0x01
     8aa:	81 e0       	ldi	r24, 0x01	; 1
     8ac:	a8 1a       	sub	r10, r24
     8ae:	b1 08       	sbc	r11, r1
     8b0:	8b e2       	ldi	r24, 0x2B	; 43
     8b2:	8a 9d       	mul	r24, r10
     8b4:	f0 01       	movw	r30, r0
     8b6:	8b 9d       	mul	r24, r11
     8b8:	f0 0d       	add	r31, r0
     8ba:	11 24       	eor	r1, r1
     8bc:	ee 5f       	subi	r30, 0xFE	; 254
     8be:	fd 4f       	sbci	r31, 0xFD	; 253
     8c0:	80 81       	ld	r24, Z
     8c2:	81 11       	cpse	r24, r1
     8c4:	03 c0       	rjmp	.+6      	; 0x8cc <Kernel_Chan_Write+0x48>
     8c6:	82 e0       	ldi	r24, 0x02	; 2
     8c8:	88 b9       	out	0x08, r24	; 8
     8ca:	ff cf       	rjmp	.-2      	; 0x8ca <Kernel_Chan_Write+0x46>
     8cc:	82 30       	cpi	r24, 0x02	; 2
     8ce:	19 f4       	brne	.+6      	; 0x8d6 <Kernel_Chan_Write+0x52>
     8d0:	84 e0       	ldi	r24, 0x04	; 4
     8d2:	88 b9       	out	0x08, r24	; 8
     8d4:	ff cf       	rjmp	.-2      	; 0x8d4 <Kernel_Chan_Write+0x50>
     8d6:	83 30       	cpi	r24, 0x03	; 3
     8d8:	09 f0       	breq	.+2      	; 0x8dc <Kernel_Chan_Write+0x58>
     8da:	49 c0       	rjmp	.+146    	; 0x96e <Kernel_Chan_Write+0xea>
     8dc:	f9 01       	movw	r30, r18
     8de:	e1 5f       	subi	r30, 0xF1	; 241
     8e0:	fe 4f       	sbci	r31, 0xFE	; 254
     8e2:	80 81       	ld	r24, Z
     8e4:	91 81       	ldd	r25, Z+1	; 0x01
     8e6:	2b e2       	ldi	r18, 0x2B	; 43
     8e8:	2a 9d       	mul	r18, r10
     8ea:	f0 01       	movw	r30, r0
     8ec:	2b 9d       	mul	r18, r11
     8ee:	f0 0d       	add	r31, r0
     8f0:	11 24       	eor	r1, r1
     8f2:	ee 5f       	subi	r30, 0xFE	; 254
     8f4:	fd 4f       	sbci	r31, 0xFD	; 253
     8f6:	92 a7       	std	Z+42, r25	; 0x2a
     8f8:	81 a7       	std	Z+41, r24	; 0x29
     8fa:	8b e2       	ldi	r24, 0x2B	; 43
     8fc:	8a 9d       	mul	r24, r10
     8fe:	80 01       	movw	r16, r0
     900:	8b 9d       	mul	r24, r11
     902:	10 0d       	add	r17, r0
     904:	11 24       	eor	r1, r1
     906:	cf 01       	movw	r24, r30
     908:	6f 01       	movw	r12, r30
     90a:	e3 e2       	ldi	r30, 0x23	; 35
     90c:	ce 0e       	add	r12, r30
     90e:	d1 1c       	adc	r13, r1
     910:	7c 01       	movw	r14, r24
     912:	f9 e2       	ldi	r31, 0x29	; 41
     914:	ef 0e       	add	r14, r31
     916:	f1 1c       	adc	r15, r1
     918:	0b 5f       	subi	r16, 0xFB	; 251
     91a:	1d 4f       	sbci	r17, 0xFD	; 253
     91c:	18 c0       	rjmp	.+48     	; 0x94e <Kernel_Chan_Write+0xca>
     91e:	c8 01       	movw	r24, r16
     920:	e4 dc       	rcall	.-1592   	; 0x2ea <dequeue>
     922:	ec 01       	movw	r28, r24
     924:	f7 01       	movw	r30, r14
     926:	80 81       	ld	r24, Z
     928:	91 81       	ldd	r25, Z+1	; 0x01
     92a:	fe 01       	movw	r30, r28
     92c:	e5 5f       	subi	r30, 0xF5	; 245
     92e:	fe 4f       	sbci	r31, 0xFE	; 254
     930:	91 83       	std	Z+1, r25	; 0x01
     932:	80 83       	st	Z, r24
     934:	ce 01       	movw	r24, r28
     936:	6b dd       	rcall	.-1322   	; 0x40e <setReady>
     938:	e0 91 b8 04 	lds	r30, 0x04B8	; 0x8004b8 <Cp>
     93c:	f0 91 b9 04 	lds	r31, 0x04B9	; 0x8004b9 <Cp+0x1>
     940:	82 81       	ldd	r24, Z+2	; 0x02
     942:	9a 81       	ldd	r25, Y+2	; 0x02
     944:	98 17       	cp	r25, r24
     946:	18 f4       	brcc	.+6      	; 0x94e <Kernel_Chan_Write+0xca>
     948:	cf 01       	movw	r24, r30
     94a:	61 dd       	rcall	.-1342   	; 0x40e <setReady>
     94c:	f5 dc       	rcall	.-1558   	; 0x338 <Dispatch>
     94e:	f6 01       	movw	r30, r12
     950:	80 81       	ld	r24, Z
     952:	91 81       	ldd	r25, Z+1	; 0x01
     954:	18 16       	cp	r1, r24
     956:	19 06       	cpc	r1, r25
     958:	14 f3       	brlt	.-60     	; 0x91e <Kernel_Chan_Write+0x9a>
     95a:	8b e2       	ldi	r24, 0x2B	; 43
     95c:	8a 9d       	mul	r24, r10
     95e:	f0 01       	movw	r30, r0
     960:	8b 9d       	mul	r24, r11
     962:	f0 0d       	add	r31, r0
     964:	11 24       	eor	r1, r1
     966:	ee 5f       	subi	r30, 0xFE	; 254
     968:	fd 4f       	sbci	r31, 0xFD	; 253
     96a:	81 e0       	ldi	r24, 0x01	; 1
     96c:	80 83       	st	Z, r24
     96e:	df 91       	pop	r29
     970:	cf 91       	pop	r28
     972:	1f 91       	pop	r17
     974:	0f 91       	pop	r16
     976:	ff 90       	pop	r15
     978:	ef 90       	pop	r14
     97a:	df 90       	pop	r13
     97c:	cf 90       	pop	r12
     97e:	bf 90       	pop	r11
     980:	af 90       	pop	r10
     982:	08 95       	ret

00000984 <OS_Init>:
     984:	10 92 b3 04 	sts	0x04B3, r1	; 0x8004b3 <Tasks+0x1>
     988:	10 92 b2 04 	sts	0x04B2, r1	; 0x8004b2 <Tasks>
     98c:	10 92 b5 04 	sts	0x04B5, r1	; 0x8004b5 <KernelActive+0x1>
     990:	10 92 b4 04 	sts	0x04B4, r1	; 0x8004b4 <KernelActive>
     994:	10 92 b7 04 	sts	0x04B7, r1	; 0x8004b7 <NextP+0x1>
     998:	10 92 b6 04 	sts	0x04B6, r1	; 0x8004b6 <NextP>
     99c:	e4 e5       	ldi	r30, 0x54	; 84
     99e:	f5 e0       	ldi	r31, 0x05	; 5
     9a0:	24 e7       	ldi	r18, 0x74	; 116
     9a2:	37 e1       	ldi	r19, 0x17	; 23
     9a4:	82 e2       	ldi	r24, 0x22	; 34
     9a6:	91 e0       	ldi	r25, 0x01	; 1
     9a8:	df 01       	movw	r26, r30
     9aa:	ac 01       	movw	r20, r24
     9ac:	1d 92       	st	X+, r1
     9ae:	41 50       	subi	r20, 0x01	; 1
     9b0:	50 40       	sbci	r21, 0x00	; 0
     9b2:	e1 f7       	brne	.-8      	; 0x9ac <OS_Init+0x28>
     9b4:	df 01       	movw	r26, r30
     9b6:	ab 5f       	subi	r26, 0xFB	; 251
     9b8:	be 4f       	sbci	r27, 0xFE	; 254
     9ba:	1c 92       	st	X, r1
     9bc:	ee 5d       	subi	r30, 0xDE	; 222
     9be:	fe 4f       	sbci	r31, 0xFE	; 254
     9c0:	e2 17       	cp	r30, r18
     9c2:	f3 07       	cpc	r31, r19
     9c4:	89 f7       	brne	.-30     	; 0x9a8 <OS_Init+0x24>
     9c6:	10 92 01 02 	sts	0x0201, r1	; 0x800201 <_edata+0x1>
     9ca:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <_edata>
     9ce:	e2 e0       	ldi	r30, 0x02	; 2
     9d0:	f2 e0       	ldi	r31, 0x02	; 2
     9d2:	22 eb       	ldi	r18, 0xB2	; 178
     9d4:	34 e0       	ldi	r19, 0x04	; 4
     9d6:	8b e2       	ldi	r24, 0x2B	; 43
     9d8:	df 01       	movw	r26, r30
     9da:	48 2f       	mov	r20, r24
     9dc:	1d 92       	st	X+, r1
     9de:	4a 95       	dec	r20
     9e0:	e9 f7       	brne	.-6      	; 0x9dc <OS_Init+0x58>
     9e2:	10 82       	st	Z, r1
     9e4:	bb 96       	adiw	r30, 0x2b	; 43
     9e6:	e2 17       	cp	r30, r18
     9e8:	f3 07       	cpc	r31, r19
     9ea:	b1 f7       	brne	.-20     	; 0x9d8 <OS_Init+0x54>
     9ec:	08 95       	ret

000009ee <OS_Start>:
     9ee:	af 92       	push	r10
     9f0:	bf 92       	push	r11
     9f2:	df 92       	push	r13
     9f4:	ef 92       	push	r14
     9f6:	ff 92       	push	r15
     9f8:	0f 93       	push	r16
     9fa:	1f 93       	push	r17
     9fc:	cf 93       	push	r28
     9fe:	df 93       	push	r29
     a00:	80 91 b4 04 	lds	r24, 0x04B4	; 0x8004b4 <KernelActive>
     a04:	90 91 b5 04 	lds	r25, 0x04B5	; 0x8004b5 <KernelActive+0x1>
     a08:	89 2b       	or	r24, r25
     a0a:	09 f0       	breq	.+2      	; 0xa0e <OS_Start+0x20>
     a0c:	9e c0       	rjmp	.+316    	; 0xb4a <OS_Start+0x15c>
     a0e:	80 91 b2 04 	lds	r24, 0x04B2	; 0x8004b2 <Tasks>
     a12:	90 91 b3 04 	lds	r25, 0x04B3	; 0x8004b3 <Tasks+0x1>
     a16:	89 2b       	or	r24, r25
     a18:	09 f4       	brne	.+2      	; 0xa1c <OS_Start+0x2e>
     a1a:	97 c0       	rjmp	.+302    	; 0xb4a <OS_Start+0x15c>
     a1c:	f8 94       	cli
     a1e:	81 e0       	ldi	r24, 0x01	; 1
     a20:	90 e0       	ldi	r25, 0x00	; 0
     a22:	90 93 b5 04 	sts	0x04B5, r25	; 0x8004b5 <KernelActive+0x1>
     a26:	80 93 b4 04 	sts	0x04B4, r24	; 0x8004b4 <KernelActive>
     a2a:	86 dc       	rcall	.-1780   	; 0x338 <Dispatch>
     a2c:	68 94       	set
     a2e:	dd 24       	eor	r13, r13
     a30:	d2 f8       	bld	r13, 2
     a32:	e0 91 b8 04 	lds	r30, 0x04B8	; 0x8004b8 <Cp>
     a36:	f0 91 b9 04 	lds	r31, 0x04B9	; 0x8004b9 <Cp+0x1>
     a3a:	df 01       	movw	r26, r30
     a3c:	a8 5f       	subi	r26, 0xF8	; 248
     a3e:	be 4f       	sbci	r27, 0xFE	; 254
     a40:	1c 92       	st	X, r1
     a42:	83 81       	ldd	r24, Z+3	; 0x03
     a44:	94 81       	ldd	r25, Z+4	; 0x04
     a46:	90 93 5b 18 	sts	0x185B, r25	; 0x80185b <CurrentSp+0x1>
     a4a:	80 93 5a 18 	sts	0x185A, r24	; 0x80185a <CurrentSp>
     a4e:	67 db       	rcall	.-2354   	; 0x11e <CSwitch>
     a50:	c0 91 b8 04 	lds	r28, 0x04B8	; 0x8004b8 <Cp>
     a54:	d0 91 b9 04 	lds	r29, 0x04B9	; 0x8004b9 <Cp+0x1>
     a58:	80 91 5a 18 	lds	r24, 0x185A	; 0x80185a <CurrentSp>
     a5c:	90 91 5b 18 	lds	r25, 0x185B	; 0x80185b <CurrentSp+0x1>
     a60:	9c 83       	std	Y+4, r25	; 0x04
     a62:	8b 83       	std	Y+3, r24	; 0x03
     a64:	fe 01       	movw	r30, r28
     a66:	e8 5f       	subi	r30, 0xF8	; 248
     a68:	fe 4f       	sbci	r31, 0xFE	; 254
     a6a:	e0 81       	ld	r30, Z
     a6c:	f0 e0       	ldi	r31, 0x00	; 0
     a6e:	e9 30       	cpi	r30, 0x09	; 9
     a70:	f1 05       	cpc	r31, r1
     a72:	f8 f6       	brcc	.-66     	; 0xa32 <OS_Start+0x44>
     a74:	88 27       	eor	r24, r24
     a76:	ee 58       	subi	r30, 0x8E	; 142
     a78:	ff 4f       	sbci	r31, 0xFF	; 255
     a7a:	8f 4f       	sbci	r24, 0xFF	; 255
     a7c:	0c c7       	rjmp	.+3608   	; 0x1896 <__tablejump2__>
     a7e:	fe 01       	movw	r30, r28
     a80:	e0 5e       	subi	r30, 0xE0	; 224
     a82:	fe 4f       	sbci	r31, 0xFE	; 254
     a84:	e0 80       	ld	r14, Z
     a86:	f1 80       	ldd	r15, Z+1	; 0x01
     a88:	32 97       	sbiw	r30, 0x02	; 2
     a8a:	00 81       	ld	r16, Z
     a8c:	11 81       	ldd	r17, Z+1	; 0x01
     a8e:	32 97       	sbiw	r30, 0x02	; 2
     a90:	20 81       	ld	r18, Z
     a92:	31 81       	ldd	r19, Z+1	; 0x01
     a94:	5e 01       	movw	r10, r28
     a96:	85 ee       	ldi	r24, 0xE5	; 229
     a98:	a8 1a       	sub	r10, r24
     a9a:	8e ef       	ldi	r24, 0xFE	; 254
     a9c:	b8 0a       	sbc	r11, r24
     a9e:	f5 01       	movw	r30, r10
     aa0:	40 81       	ld	r20, Z
     aa2:	72 97       	sbiw	r30, 0x12	; 18
     aa4:	60 81       	ld	r22, Z
     aa6:	71 81       	ldd	r23, Z+1	; 0x01
     aa8:	33 97       	sbiw	r30, 0x03	; 3
     aaa:	80 81       	ld	r24, Z
     aac:	91 81       	ldd	r25, Z+1	; 0x01
     aae:	40 dd       	rcall	.-1408   	; 0x530 <Kernel_Create_Task>
     ab0:	f5 01       	movw	r30, r10
     ab2:	80 81       	ld	r24, Z
     ab4:	82 30       	cpi	r24, 0x02	; 2
     ab6:	08 f0       	brcs	.+2      	; 0xaba <OS_Start+0xcc>
     ab8:	bc cf       	rjmp	.-136    	; 0xa32 <OS_Start+0x44>
     aba:	f5 01       	movw	r30, r10
     abc:	90 81       	ld	r25, Z
     abe:	8a 81       	ldd	r24, Y+2	; 0x02
     ac0:	98 17       	cp	r25, r24
     ac2:	08 f0       	brcs	.+2      	; 0xac6 <OS_Start+0xd8>
     ac4:	b6 cf       	rjmp	.-148    	; 0xa32 <OS_Start+0x44>
     ac6:	ce 01       	movw	r24, r28
     ac8:	a2 dc       	rcall	.-1724   	; 0x40e <setReady>
     aca:	36 dc       	rcall	.-1940   	; 0x338 <Dispatch>
     acc:	b2 cf       	rjmp	.-156    	; 0xa32 <OS_Start+0x44>
     ace:	ce 01       	movw	r24, r28
     ad0:	9e dc       	rcall	.-1732   	; 0x40e <setReady>
     ad2:	32 dc       	rcall	.-1948   	; 0x338 <Dispatch>
     ad4:	ae cf       	rjmp	.-164    	; 0xa32 <OS_Start+0x44>
     ad6:	fe 01       	movw	r30, r28
     ad8:	e7 5e       	subi	r30, 0xE7	; 231
     ada:	fe 4f       	sbci	r31, 0xFE	; 254
     adc:	11 82       	std	Z+1, r1	; 0x01
     ade:	10 82       	st	Z, r1
     ae0:	cb 5f       	subi	r28, 0xFB	; 251
     ae2:	de 4f       	sbci	r29, 0xFE	; 254
     ae4:	d8 82       	st	Y, r13
     ae6:	28 dc       	rcall	.-1968   	; 0x338 <Dispatch>
     ae8:	a4 cf       	rjmp	.-184    	; 0xa32 <OS_Start+0x44>
     aea:	cb 5f       	subi	r28, 0xFB	; 251
     aec:	de 4f       	sbci	r29, 0xFE	; 254
     aee:	18 82       	st	Y, r1
     af0:	80 91 b2 04 	lds	r24, 0x04B2	; 0x8004b2 <Tasks>
     af4:	90 91 b3 04 	lds	r25, 0x04B3	; 0x8004b3 <Tasks+0x1>
     af8:	01 97       	sbiw	r24, 0x01	; 1
     afa:	90 93 b3 04 	sts	0x04B3, r25	; 0x8004b3 <Tasks+0x1>
     afe:	80 93 b2 04 	sts	0x04B2, r24	; 0x8004b2 <Tasks>
     b02:	1a dc       	rcall	.-1996   	; 0x338 <Dispatch>
     b04:	96 cf       	rjmp	.-212    	; 0xa32 <OS_Start+0x44>
     b06:	65 dd       	rcall	.-1334   	; 0x5d2 <Kernel_Chan_Init>
     b08:	c5 5f       	subi	r28, 0xF5	; 245
     b0a:	de 4f       	sbci	r29, 0xFE	; 254
     b0c:	99 83       	std	Y+1, r25	; 0x01
     b0e:	88 83       	st	Y, r24
     b10:	90 cf       	rjmp	.-224    	; 0xa32 <OS_Start+0x44>
     b12:	a7 dd       	rcall	.-1202   	; 0x662 <Kernel_Chan_Send>
     b14:	e0 91 b8 04 	lds	r30, 0x04B8	; 0x8004b8 <Cp>
     b18:	f0 91 b9 04 	lds	r31, 0x04B9	; 0x8004b9 <Cp+0x1>
     b1c:	eb 5f       	subi	r30, 0xFB	; 251
     b1e:	fe 4f       	sbci	r31, 0xFE	; 254
     b20:	80 81       	ld	r24, Z
     b22:	83 30       	cpi	r24, 0x03	; 3
     b24:	09 f0       	breq	.+2      	; 0xb28 <OS_Start+0x13a>
     b26:	85 cf       	rjmp	.-246    	; 0xa32 <OS_Start+0x44>
     b28:	07 dc       	rcall	.-2034   	; 0x338 <Dispatch>
     b2a:	83 cf       	rjmp	.-250    	; 0xa32 <OS_Start+0x44>
     b2c:	38 de       	rcall	.-912    	; 0x79e <Kernel_Chan_Receive>
     b2e:	e0 91 b8 04 	lds	r30, 0x04B8	; 0x8004b8 <Cp>
     b32:	f0 91 b9 04 	lds	r31, 0x04B9	; 0x8004b9 <Cp+0x1>
     b36:	eb 5f       	subi	r30, 0xFB	; 251
     b38:	fe 4f       	sbci	r31, 0xFE	; 254
     b3a:	80 81       	ld	r24, Z
     b3c:	83 30       	cpi	r24, 0x03	; 3
     b3e:	09 f0       	breq	.+2      	; 0xb42 <OS_Start+0x154>
     b40:	78 cf       	rjmp	.-272    	; 0xa32 <OS_Start+0x44>
     b42:	fa db       	rcall	.-2060   	; 0x338 <Dispatch>
     b44:	76 cf       	rjmp	.-276    	; 0xa32 <OS_Start+0x44>
     b46:	9e de       	rcall	.-708    	; 0x884 <Kernel_Chan_Write>
     b48:	74 cf       	rjmp	.-280    	; 0xa32 <OS_Start+0x44>
     b4a:	df 91       	pop	r29
     b4c:	cf 91       	pop	r28
     b4e:	1f 91       	pop	r17
     b50:	0f 91       	pop	r16
     b52:	ff 90       	pop	r15
     b54:	ef 90       	pop	r14
     b56:	df 90       	pop	r13
     b58:	bf 90       	pop	r11
     b5a:	af 90       	pop	r10
     b5c:	08 95       	ret

00000b5e <Task_Create_System>:
     b5e:	ef 92       	push	r14
     b60:	ff 92       	push	r15
     b62:	0f 93       	push	r16
     b64:	1f 93       	push	r17
     b66:	20 91 b4 04 	lds	r18, 0x04B4	; 0x8004b4 <KernelActive>
     b6a:	30 91 b5 04 	lds	r19, 0x04B5	; 0x8004b5 <KernelActive+0x1>
     b6e:	23 2b       	or	r18, r19
     b70:	01 f1       	breq	.+64     	; 0xbb2 <Task_Create_System+0x54>
     b72:	f8 94       	cli
     b74:	20 91 b8 04 	lds	r18, 0x04B8	; 0x8004b8 <Cp>
     b78:	30 91 b9 04 	lds	r19, 0x04B9	; 0x8004b9 <Cp+0x1>
     b7c:	f9 01       	movw	r30, r18
     b7e:	e8 5f       	subi	r30, 0xF8	; 248
     b80:	fe 4f       	sbci	r31, 0xFE	; 254
     b82:	41 e0       	ldi	r20, 0x01	; 1
     b84:	40 83       	st	Z, r20
     b86:	32 97       	sbiw	r30, 0x02	; 2
     b88:	91 83       	std	Z+1, r25	; 0x01
     b8a:	80 83       	st	Z, r24
     b8c:	33 96       	adiw	r30, 0x03	; 3
     b8e:	71 83       	std	Z+1, r23	; 0x01
     b90:	60 83       	st	Z, r22
     b92:	72 96       	adiw	r30, 0x12	; 18
     b94:	10 82       	st	Z, r1
     b96:	31 96       	adiw	r30, 0x01	; 1
     b98:	11 82       	std	Z+1, r1	; 0x01
     b9a:	10 82       	st	Z, r1
     b9c:	32 96       	adiw	r30, 0x02	; 2
     b9e:	11 82       	std	Z+1, r1	; 0x01
     ba0:	10 82       	st	Z, r1
     ba2:	32 96       	adiw	r30, 0x02	; 2
     ba4:	11 82       	std	Z+1, r1	; 0x01
     ba6:	10 82       	st	Z, r1
     ba8:	80 e1       	ldi	r24, 0x10	; 16
     baa:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <__TEXT_REGION_LENGTH__+0x70010b>
     bae:	0c db       	rcall	.-2536   	; 0x1c8 <Enter_Kernel>
     bb0:	08 c0       	rjmp	.+16     	; 0xbc2 <Task_Create_System+0x64>
     bb2:	e1 2c       	mov	r14, r1
     bb4:	f1 2c       	mov	r15, r1
     bb6:	00 e0       	ldi	r16, 0x00	; 0
     bb8:	10 e0       	ldi	r17, 0x00	; 0
     bba:	20 e0       	ldi	r18, 0x00	; 0
     bbc:	30 e0       	ldi	r19, 0x00	; 0
     bbe:	40 e0       	ldi	r20, 0x00	; 0
     bc0:	b7 dc       	rcall	.-1682   	; 0x530 <Kernel_Create_Task>
     bc2:	e0 91 b8 04 	lds	r30, 0x04B8	; 0x8004b8 <Cp>
     bc6:	f0 91 b9 04 	lds	r31, 0x04B9	; 0x8004b9 <Cp+0x1>
     bca:	80 81       	ld	r24, Z
     bcc:	91 81       	ldd	r25, Z+1	; 0x01
     bce:	1f 91       	pop	r17
     bd0:	0f 91       	pop	r16
     bd2:	ff 90       	pop	r15
     bd4:	ef 90       	pop	r14
     bd6:	08 95       	ret

00000bd8 <Task_Create_Idle>:
     bd8:	ef 92       	push	r14
     bda:	ff 92       	push	r15
     bdc:	0f 93       	push	r16
     bde:	1f 93       	push	r17
     be0:	20 91 b4 04 	lds	r18, 0x04B4	; 0x8004b4 <KernelActive>
     be4:	30 91 b5 04 	lds	r19, 0x04B5	; 0x8004b5 <KernelActive+0x1>
     be8:	23 2b       	or	r18, r19
     bea:	29 f1       	breq	.+74     	; 0xc36 <Task_Create_Idle+0x5e>
     bec:	f8 94       	cli
     bee:	e0 91 b8 04 	lds	r30, 0x04B8	; 0x8004b8 <Cp>
     bf2:	f0 91 b9 04 	lds	r31, 0x04B9	; 0x8004b9 <Cp+0x1>
     bf6:	df 01       	movw	r26, r30
     bf8:	a8 5f       	subi	r26, 0xF8	; 248
     bfa:	be 4f       	sbci	r27, 0xFE	; 254
     bfc:	21 e0       	ldi	r18, 0x01	; 1
     bfe:	2c 93       	st	X, r18
     c00:	12 97       	sbiw	r26, 0x02	; 2
     c02:	11 96       	adiw	r26, 0x01	; 1
     c04:	9c 93       	st	X, r25
     c06:	8e 93       	st	-X, r24
     c08:	13 96       	adiw	r26, 0x03	; 3
     c0a:	11 96       	adiw	r26, 0x01	; 1
     c0c:	7c 93       	st	X, r23
     c0e:	6e 93       	st	-X, r22
     c10:	83 e0       	ldi	r24, 0x03	; 3
     c12:	82 83       	std	Z+2, r24	; 0x02
     c14:	18 96       	adiw	r26, 0x08	; 8
     c16:	11 96       	adiw	r26, 0x01	; 1
     c18:	1c 92       	st	X, r1
     c1a:	1e 92       	st	-X, r1
     c1c:	12 96       	adiw	r26, 0x02	; 2
     c1e:	11 96       	adiw	r26, 0x01	; 1
     c20:	1c 92       	st	X, r1
     c22:	1e 92       	st	-X, r1
     c24:	eb 5e       	subi	r30, 0xEB	; 235
     c26:	fe 4f       	sbci	r31, 0xFE	; 254
     c28:	11 82       	std	Z+1, r1	; 0x01
     c2a:	10 82       	st	Z, r1
     c2c:	80 e1       	ldi	r24, 0x10	; 16
     c2e:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <__TEXT_REGION_LENGTH__+0x70010b>
     c32:	ca da       	rcall	.-2668   	; 0x1c8 <Enter_Kernel>
     c34:	08 c0       	rjmp	.+16     	; 0xc46 <Task_Create_Idle+0x6e>
     c36:	e1 2c       	mov	r14, r1
     c38:	f1 2c       	mov	r15, r1
     c3a:	00 e0       	ldi	r16, 0x00	; 0
     c3c:	10 e0       	ldi	r17, 0x00	; 0
     c3e:	20 e0       	ldi	r18, 0x00	; 0
     c40:	30 e0       	ldi	r19, 0x00	; 0
     c42:	43 e0       	ldi	r20, 0x03	; 3
     c44:	75 dc       	rcall	.-1814   	; 0x530 <Kernel_Create_Task>
     c46:	e0 91 b8 04 	lds	r30, 0x04B8	; 0x8004b8 <Cp>
     c4a:	f0 91 b9 04 	lds	r31, 0x04B9	; 0x8004b9 <Cp+0x1>
     c4e:	80 81       	ld	r24, Z
     c50:	91 81       	ldd	r25, Z+1	; 0x01
     c52:	1f 91       	pop	r17
     c54:	0f 91       	pop	r16
     c56:	ff 90       	pop	r15
     c58:	ef 90       	pop	r14
     c5a:	08 95       	ret

00000c5c <Task_Next_2>:
     c5c:	80 91 b4 04 	lds	r24, 0x04B4	; 0x8004b4 <KernelActive>
     c60:	90 91 b5 04 	lds	r25, 0x04B5	; 0x8004b5 <KernelActive+0x1>
     c64:	89 2b       	or	r24, r25
     c66:	69 f0       	breq	.+26     	; 0xc82 <Task_Next_2+0x26>
     c68:	f8 94       	cli
     c6a:	e0 91 b8 04 	lds	r30, 0x04B8	; 0x8004b8 <Cp>
     c6e:	f0 91 b9 04 	lds	r31, 0x04B9	; 0x8004b9 <Cp+0x1>
     c72:	e8 5f       	subi	r30, 0xF8	; 248
     c74:	fe 4f       	sbci	r31, 0xFE	; 254
     c76:	82 e0       	ldi	r24, 0x02	; 2
     c78:	80 83       	st	Z, r24
     c7a:	80 e1       	ldi	r24, 0x10	; 16
     c7c:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <__TEXT_REGION_LENGTH__+0x70010b>
     c80:	a3 ca       	rjmp	.-2746   	; 0x1c8 <Enter_Kernel>
     c82:	08 95       	ret

00000c84 <Task_Next>:
     c84:	80 91 b4 04 	lds	r24, 0x04B4	; 0x8004b4 <KernelActive>
     c88:	90 91 b5 04 	lds	r25, 0x04B5	; 0x8004b5 <KernelActive+0x1>
     c8c:	89 2b       	or	r24, r25
     c8e:	91 f0       	breq	.+36     	; 0xcb4 <Task_Next+0x30>
     c90:	e0 91 b8 04 	lds	r30, 0x04B8	; 0x8004b8 <Cp>
     c94:	f0 91 b9 04 	lds	r31, 0x04B9	; 0x8004b9 <Cp+0x1>
     c98:	82 81       	ldd	r24, Z+2	; 0x02
     c9a:	81 30       	cpi	r24, 0x01	; 1
     c9c:	11 f0       	breq	.+4      	; 0xca2 <Task_Next+0x1e>
     c9e:	de cf       	rjmp	.-68     	; 0xc5c <Task_Next_2>
     ca0:	08 95       	ret
     ca2:	f8 94       	cli
     ca4:	e8 5f       	subi	r30, 0xF8	; 248
     ca6:	fe 4f       	sbci	r31, 0xFE	; 254
     ca8:	84 e0       	ldi	r24, 0x04	; 4
     caa:	80 83       	st	Z, r24
     cac:	80 e1       	ldi	r24, 0x10	; 16
     cae:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <__TEXT_REGION_LENGTH__+0x70010b>
     cb2:	8a ca       	rjmp	.-2796   	; 0x1c8 <Enter_Kernel>
     cb4:	08 95       	ret

00000cb6 <Timer_Init>:
  * A Simple Test
  *============
  */
void Timer_Init()
{
  Disable_Interrupt();
     cb6:	f8 94       	cli
  //Clear timer config.
  TCCR1A = 0;
     cb8:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
  TCCR1B = 0;
     cbc:	e1 e8       	ldi	r30, 0x81	; 129
     cbe:	f0 e0       	ldi	r31, 0x00	; 0
     cc0:	10 82       	st	Z, r1
  //Set to CTC (mode 4)
  TCCR1B |= (1<<WGM12);
     cc2:	80 81       	ld	r24, Z
     cc4:	88 60       	ori	r24, 0x08	; 8
     cc6:	80 83       	st	Z, r24

  //Set prescaller to 1/8
  TCCR1B |= (1<<CS11);
     cc8:	80 81       	ld	r24, Z
     cca:	82 60       	ori	r24, 0x02	; 2
     ccc:	80 83       	st	Z, r24

  //Set TOP value 0.0001s*MSECPERTICK
  OCR1A = 2000*MSECPERTICK;
     cce:	80 e2       	ldi	r24, 0x20	; 32
     cd0:	9e e4       	ldi	r25, 0x4E	; 78
     cd2:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x700089>
     cd6:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x700088>

  //Enable interrupt A for timer 3.
  TIMSK1 |= (1<<OCIE1A);
     cda:	ef e6       	ldi	r30, 0x6F	; 111
     cdc:	f0 e0       	ldi	r31, 0x00	; 0
     cde:	80 81       	ld	r24, Z
     ce0:	82 60       	ori	r24, 0x02	; 2
     ce2:	80 83       	st	Z, r24

  //Set timer to 0 (optional here).
  TCNT1 = 0;
     ce4:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x700085>
     ce8:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x700084>

  // enable interrupt
  Enable_Interrupt();
     cec:	78 94       	sei
     cee:	08 95       	ret

00000cf0 <Kernel_Tick>:
}

void Kernel_Tick()
{
     cf0:	af 92       	push	r10
     cf2:	bf 92       	push	r11
     cf4:	cf 92       	push	r12
     cf6:	df 92       	push	r13
     cf8:	ef 92       	push	r14
     cfa:	ff 92       	push	r15
     cfc:	0f 93       	push	r16
     cfe:	1f 93       	push	r17
     d00:	cf 93       	push	r28
     d02:	df 93       	push	r29
  current_tick++;
     d04:	80 91 ba 04 	lds	r24, 0x04BA	; 0x8004ba <current_tick>
     d08:	90 91 bb 04 	lds	r25, 0x04BB	; 0x8004bb <current_tick+0x1>
     d0c:	01 96       	adiw	r24, 0x01	; 1
     d0e:	90 93 bb 04 	sts	0x04BB, r25	; 0x8004bb <current_tick+0x1>
     d12:	80 93 ba 04 	sts	0x04BA, r24	; 0x8004ba <current_tick>
     d16:	06 e5       	ldi	r16, 0x56	; 86
     d18:	15 e0       	ldi	r17, 0x05	; 5
     d1a:	c9 e5       	ldi	r28, 0x59	; 89
     d1c:	d6 e0       	ldi	r29, 0x06	; 6
     d1e:	0f 2e       	mov	r0, r31
     d20:	f9 e7       	ldi	r31, 0x79	; 121
     d22:	cf 2e       	mov	r12, r31
     d24:	f8 e1       	ldi	r31, 0x18	; 24
     d26:	df 2e       	mov	r13, r31
     d28:	f0 2d       	mov	r31, r0
  int x;
  int ready_time_tasks = 0;
     d2a:	a1 2c       	mov	r10, r1
     d2c:	b1 2c       	mov	r11, r1
     d2e:	78 01       	movw	r14, r16
  for (x = 0; x < MAXPROCESS; x++) {
    if (Process[x].py == TIME && Process[x].state != SUSPENDED){
     d30:	f8 01       	movw	r30, r16
     d32:	80 81       	ld	r24, Z
     d34:	81 30       	cpi	r24, 0x01	; 1
     d36:	71 f5       	brne	.+92     	; 0xd94 <Kernel_Tick+0xa4>
     d38:	88 81       	ld	r24, Y
     d3a:	84 30       	cpi	r24, 0x04	; 4
     d3c:	69 f0       	breq	.+26     	; 0xd58 <Kernel_Tick+0x68>
      Process[x].executed_ticks++;
     d3e:	8c 89       	ldd	r24, Y+20	; 0x14
     d40:	9d 89       	ldd	r25, Y+21	; 0x15
     d42:	01 96       	adiw	r24, 0x01	; 1
     d44:	9d 8b       	std	Y+21, r25	; 0x15
     d46:	8c 8b       	std	Y+20, r24	; 0x14
      if (Process[x].executed_ticks >= Process[x].wcet){
     d48:	2e 85       	ldd	r18, Y+14	; 0x0e
     d4a:	3f 85       	ldd	r19, Y+15	; 0x0f
     d4c:	82 17       	cp	r24, r18
     d4e:	93 07       	cpc	r25, r19
     d50:	78 f1       	brcs	.+94     	; 0xdb0 <Kernel_Tick+0xc0>

/**
  * TODO: communicate error code
  */
void OS_Abort(unsigned int error) {
	OS_ABORT_DEBUG_PORT = error;
     d52:	86 e0       	ldi	r24, 0x06	; 6
     d54:	88 b9       	out	0x08, r24	; 8
     d56:	ff cf       	rjmp	.-2      	; 0xd56 <Kernel_Tick+0x66>
      Process[x].executed_ticks++;
      if (Process[x].executed_ticks >= Process[x].wcet){
        OS_Abort(ERROR_WCET_VIOLATION);
      }
    }
    if (Process[x].state == SUSPENDED && Process[x].py == TIME && Process[x].next_schedule == current_tick)
     d58:	8a 89       	ldd	r24, Y+18	; 0x12
     d5a:	9b 89       	ldd	r25, Y+19	; 0x13
     d5c:	20 91 ba 04 	lds	r18, 0x04BA	; 0x8004ba <current_tick>
     d60:	30 91 bb 04 	lds	r19, 0x04BB	; 0x8004bb <current_tick+0x1>
     d64:	82 17       	cp	r24, r18
     d66:	93 07       	cpc	r25, r19
     d68:	a9 f4       	brne	.+42     	; 0xd94 <Kernel_Tick+0xa4>
    {
      Process[x].next_schedule = Process[x].next_schedule + Process[x].period;
     d6a:	2c 85       	ldd	r18, Y+12	; 0x0c
     d6c:	3d 85       	ldd	r19, Y+13	; 0x0d
     d6e:	82 0f       	add	r24, r18
     d70:	93 1f       	adc	r25, r19
     d72:	9b 8b       	std	Y+19, r25	; 0x13
     d74:	8a 8b       	std	Y+18, r24	; 0x12
      setReady(&Process[x]);
     d76:	ce 01       	movw	r24, r28
     d78:	85 50       	subi	r24, 0x05	; 5
     d7a:	91 40       	sbci	r25, 0x01	; 1
     d7c:	48 db       	rcall	.-2416   	; 0x40e <setReady>
    }
    if (Process[x].py == TIME && (Process[x].state == RUNNING || Process[x].state == READY))
     d7e:	f7 01       	movw	r30, r14
     d80:	80 81       	ld	r24, Z
     d82:	81 30       	cpi	r24, 0x01	; 1
     d84:	39 f4       	brne	.+14     	; 0xd94 <Kernel_Tick+0xa4>
     d86:	88 81       	ld	r24, Y
     d88:	81 50       	subi	r24, 0x01	; 1
     d8a:	82 30       	cpi	r24, 0x02	; 2
     d8c:	18 f4       	brcc	.+6      	; 0xd94 <Kernel_Tick+0xa4>
    {
      ready_time_tasks++;
     d8e:	ff ef       	ldi	r31, 0xFF	; 255
     d90:	af 1a       	sub	r10, r31
     d92:	bf 0a       	sbc	r11, r31
     d94:	0e 5d       	subi	r16, 0xDE	; 222
     d96:	1e 4f       	sbci	r17, 0xFE	; 254
     d98:	ce 5d       	subi	r28, 0xDE	; 222
     d9a:	de 4f       	sbci	r29, 0xFE	; 254
void Kernel_Tick()
{
  current_tick++;
  int x;
  int ready_time_tasks = 0;
  for (x = 0; x < MAXPROCESS; x++) {
     d9c:	cc 15       	cp	r28, r12
     d9e:	dd 05       	cpc	r29, r13
     da0:	31 f6       	brne	.-116    	; 0xd2e <Kernel_Tick+0x3e>
    if (Process[x].py == TIME && (Process[x].state == RUNNING || Process[x].state == READY))
    {
      ready_time_tasks++;
    }
  }
  if (ready_time_tasks > 1)
     da2:	82 e0       	ldi	r24, 0x02	; 2
     da4:	a8 16       	cp	r10, r24
     da6:	b1 04       	cpc	r11, r1
     da8:	3c f0       	brlt	.+14     	; 0xdb8 <Kernel_Tick+0xc8>

/**
  * TODO: communicate error code
  */
void OS_Abort(unsigned int error) {
	OS_ABORT_DEBUG_PORT = error;
     daa:	85 e0       	ldi	r24, 0x05	; 5
     dac:	88 b9       	out	0x08, r24	; 8
     dae:	ff cf       	rjmp	.-2      	; 0xdae <Kernel_Tick+0xbe>
      Process[x].executed_ticks++;
      if (Process[x].executed_ticks >= Process[x].wcet){
        OS_Abort(ERROR_WCET_VIOLATION);
      }
    }
    if (Process[x].state == SUSPENDED && Process[x].py == TIME && Process[x].next_schedule == current_tick)
     db0:	88 81       	ld	r24, Y
     db2:	84 30       	cpi	r24, 0x04	; 4
     db4:	21 f7       	brne	.-56     	; 0xd7e <Kernel_Tick+0x8e>
     db6:	d0 cf       	rjmp	.-96     	; 0xd58 <Kernel_Tick+0x68>
  //   if(Cp->executed_ticks >= Cp->wcet){
  //     OS_Abort(ERROR_WCET_VIOLATION);
  //   }
  // }

}
     db8:	df 91       	pop	r29
     dba:	cf 91       	pop	r28
     dbc:	1f 91       	pop	r17
     dbe:	0f 91       	pop	r16
     dc0:	ff 90       	pop	r15
     dc2:	ef 90       	pop	r14
     dc4:	df 90       	pop	r13
     dc6:	cf 90       	pop	r12
     dc8:	bf 90       	pop	r11
     dca:	af 90       	pop	r10
     dcc:	08 95       	ret

00000dce <__vector_17>:

// This ISR fires every MSECPERTICKms and represents our RTOS tick
ISR(TIMER1_COMPA_vect)
{
     dce:	1f 92       	push	r1
     dd0:	0f 92       	push	r0
     dd2:	0f b6       	in	r0, 0x3f	; 63
     dd4:	0f 92       	push	r0
     dd6:	11 24       	eor	r1, r1
     dd8:	0b b6       	in	r0, 0x3b	; 59
     dda:	0f 92       	push	r0
     ddc:	2f 93       	push	r18
     dde:	3f 93       	push	r19
     de0:	4f 93       	push	r20
     de2:	5f 93       	push	r21
     de4:	6f 93       	push	r22
     de6:	7f 93       	push	r23
     de8:	8f 93       	push	r24
     dea:	9f 93       	push	r25
     dec:	af 93       	push	r26
     dee:	bf 93       	push	r27
     df0:	ef 93       	push	r30
     df2:	ff 93       	push	r31
  Kernel_Tick();
     df4:	7d df       	rcall	.-262    	; 0xcf0 <Kernel_Tick>
  if (Cp->py >= RR)
     df6:	e0 91 b8 04 	lds	r30, 0x04B8	; 0x8004b8 <Cp>
     dfa:	f0 91 b9 04 	lds	r31, 0x04B9	; 0x8004b9 <Cp+0x1>
     dfe:	82 81       	ldd	r24, Z+2	; 0x02
     e00:	82 30       	cpi	r24, 0x02	; 2
     e02:	08 f0       	brcs	.+2      	; 0xe06 <__vector_17+0x38>
  {
    Task_Next_2();
     e04:	2b df       	rcall	.-426    	; 0xc5c <Task_Next_2>
  }
}
     e06:	ff 91       	pop	r31
     e08:	ef 91       	pop	r30
     e0a:	bf 91       	pop	r27
     e0c:	af 91       	pop	r26
     e0e:	9f 91       	pop	r25
     e10:	8f 91       	pop	r24
     e12:	7f 91       	pop	r23
     e14:	6f 91       	pop	r22
     e16:	5f 91       	pop	r21
     e18:	4f 91       	pop	r20
     e1a:	3f 91       	pop	r19
     e1c:	2f 91       	pop	r18
     e1e:	0f 90       	pop	r0
     e20:	0b be       	out	0x3b, r0	; 59
     e22:	0f 90       	pop	r0
     e24:	0f be       	out	0x3f, r0	; 63
     e26:	0f 90       	pop	r0
     e28:	1f 90       	pop	r1
     e2a:	18 95       	reti

00000e2c <Init_Debug_LEDs>:

void Init_Debug_LEDs()
{
  DDRL |= (1<<PL2);
     e2c:	ea e0       	ldi	r30, 0x0A	; 10
     e2e:	f1 e0       	ldi	r31, 0x01	; 1
     e30:	80 81       	ld	r24, Z
     e32:	84 60       	ori	r24, 0x04	; 4
     e34:	80 83       	st	Z, r24
  DDRL |= (1<<PL3);
     e36:	80 81       	ld	r24, Z
     e38:	88 60       	ori	r24, 0x08	; 8
     e3a:	80 83       	st	Z, r24
  DDRL |= (1<<PL4);
     e3c:	80 81       	ld	r24, Z
     e3e:	80 61       	ori	r24, 0x10	; 16
     e40:	80 83       	st	Z, r24
  DDRC = 0xFF;
     e42:	8f ef       	ldi	r24, 0xFF	; 255
     e44:	87 b9       	out	0x07, r24	; 7
     e46:	08 95       	ret

00000e48 <main>:
/**
  * OS main function
  */
int main()
{
   OS_Init();
     e48:	9d dd       	rcall	.-1222   	; 0x984 <OS_Init>
   Init_Debug_LEDs();
     e4a:	f0 df       	rcall	.-32     	; 0xe2c <Init_Debug_LEDs>
   // Here we create a task for a_main which should be defined externally to create
   // all tasks needed for the application, and then terminate.
   // #TODO this should be created as a system task once we implement this functionality
   Task_Create_Idle(Idle_Task, 0);
     e4c:	60 e0       	ldi	r22, 0x00	; 0
     e4e:	70 e0       	ldi	r23, 0x00	; 0
     e50:	89 e3       	ldi	r24, 0x39	; 57
     e52:	91 e0       	ldi	r25, 0x01	; 1
     e54:	c1 de       	rcall	.-638    	; 0xbd8 <Task_Create_Idle>
   Task_Create_System( a_main , PL2);
     e56:	62 e0       	ldi	r22, 0x02	; 2
     e58:	70 e0       	ldi	r23, 0x00	; 0
     e5a:	8f e4       	ldi	r24, 0x4F	; 79
     e5c:	99 e0       	ldi	r25, 0x09	; 9
     e5e:	7f de       	rcall	.-770    	; 0xb5e <Task_Create_System>
   Timer_Init();
     e60:	2a df       	rcall	.-428    	; 0xcb6 <Timer_Init>
   OS_Start();
     e62:	c5 dd       	rcall	.-1142   	; 0x9ee <OS_Start>
     e64:	80 e0       	ldi	r24, 0x00	; 0
     e66:	90 e0       	ldi	r25, 0x00	; 0
     e68:	08 95       	ret

00000e6a <setup>:

/*============================================================================*/
void setup()
{
	// Serial INIT
	init_uart_usb();
     e6a:	db d3       	rcall	.+1974   	; 0x1622 <init_uart_usb>
	init_uart_bt();
     e6c:	f3 d3       	rcall	.+2022   	; 0x1654 <init_uart_bt>
	init_uart_roomba();
     e6e:	91 d4       	rcall	.+2338   	; 0x1792 <init_uart_roomba>
	
	// Roomba INTI
	init_roomba();			// This takes around 5 seconds to complete, so offset other tasks accordingly.
     e70:	21 d2       	rcall	.+1090   	; 0x12b4 <init_roomba>
	
	// Laser INIT
	DDRA |= 0b00000001;		// Enable pin 22 as output
     e72:	08 9a       	sbi	0x01, 0	; 1
	PORTA &= 0b11111110;	// Turn pin 22 to low
     e74:	10 98       	cbi	0x02, 0	; 2
	
	// Servo INIT
	init_servos();
     e76:	83 c2       	rjmp	.+1286   	; 0x137e <init_servos>
     e78:	08 95       	ret

00000e7a <receive_transmission>:
#include <stdlib.h>

/*============================================================================*/
// Read in a update transmission.
void receive_transmission()
{
     e7a:	bf 92       	push	r11
     e7c:	cf 92       	push	r12
     e7e:	df 92       	push	r13
     e80:	ef 92       	push	r14
     e82:	ff 92       	push	r15
     e84:	0f 93       	push	r16
     e86:	1f 93       	push	r17
     e88:	cf 93       	push	r28
     e8a:	df 93       	push	r29
     e8c:	cd b7       	in	r28, 0x3d	; 61
     e8e:	de b7       	in	r29, 0x3e	; 62
     e90:	ca 5f       	subi	r28, 0xFA	; 250
     e92:	d1 09       	sbc	r29, r1
     e94:	0f b6       	in	r0, 0x3f	; 63
     e96:	f8 94       	cli
     e98:	de bf       	out	0x3e, r29	; 62
     e9a:	0f be       	out	0x3f, r0	; 63
     e9c:	cd bf       	out	0x3d, r28	; 61
	char roombaRadius_val [MAXINPUT];

	// Cycle through char array.
	unsigned int input_pos = 0;
		
	if(rx_data_in_blue_tooth_buffer == 1)
     e9e:	80 91 5e 18 	lds	r24, 0x185E	; 0x80185e <rx_data_in_blue_tooth_buffer>
     ea2:	90 91 5f 18 	lds	r25, 0x185F	; 0x80185f <rx_data_in_blue_tooth_buffer+0x1>
     ea6:	01 97       	sbiw	r24, 0x01	; 1
     ea8:	09 f0       	breq	.+2      	; 0xeac <receive_transmission+0x32>
     eaa:	21 c1       	rjmp	.+578    	; 0x10ee <receive_transmission+0x274>
	{
		unsigned char inByte = serial_read_bt();
     eac:	f0 d3       	rcall	.+2016   	; 0x168e <serial_read_bt>
     eae:	18 2f       	mov	r17, r24

		// FOR DEBUG.
		serial_write_usb(inByte);
     eb0:	c9 d3       	rcall	.+1938   	; 0x1644 <serial_write_usb>

		if (inByte == '#')
     eb2:	13 32       	cpi	r17, 0x23	; 35
     eb4:	09 f0       	breq	.+2      	; 0xeb8 <receive_transmission+0x3e>
     eb6:	1b c1       	rjmp	.+566    	; 0x10ee <receive_transmission+0x274>
     eb8:	0d c1       	rjmp	.+538    	; 0x10d4 <receive_transmission+0x25a>
			status = 1;
			while(status == 1)
			{
				if(rx_data_in_blue_tooth_buffer == 1)
				{
					inByte = serial_read_bt();
     eba:	e9 d3       	rcall	.+2002   	; 0x168e <serial_read_bt>
     ebc:	18 2f       	mov	r17, r24
					
					// FOR DEBUG.
					serial_write_usb(inByte);
     ebe:	c2 d3       	rcall	.+1924   	; 0x1644 <serial_write_usb>
					
					if (inByte == '%')
     ec0:	15 32       	cpi	r17, 0x25	; 37
     ec2:	09 f0       	breq	.+2      	; 0xec6 <receive_transmission+0x4c>
     ec4:	5f c0       	rjmp	.+190    	; 0xf84 <receive_transmission+0x10a>
					{
						// ADD NULL TERMINATORS.
						switch(packetnum)
     ec6:	82 e0       	ldi	r24, 0x02	; 2
     ec8:	e8 16       	cp	r14, r24
     eca:	f1 04       	cpc	r15, r1
     ecc:	d9 f0       	breq	.+54     	; 0xf04 <receive_transmission+0x8a>
     ece:	38 f4       	brcc	.+14     	; 0xede <receive_transmission+0x64>
     ed0:	e1 14       	cp	r14, r1
     ed2:	f1 04       	cpc	r15, r1
     ed4:	69 f0       	breq	.+26     	; 0xef0 <receive_transmission+0x76>
     ed6:	ea 94       	dec	r14
     ed8:	ef 28       	or	r14, r15
     eda:	79 f0       	breq	.+30     	; 0xefa <receive_transmission+0x80>
     edc:	2a c0       	rjmp	.+84     	; 0xf32 <receive_transmission+0xb8>
     ede:	93 e0       	ldi	r25, 0x03	; 3
     ee0:	e9 16       	cp	r14, r25
     ee2:	f1 04       	cpc	r15, r1
     ee4:	b9 f0       	breq	.+46     	; 0xf14 <receive_transmission+0x9a>
     ee6:	84 e0       	ldi	r24, 0x04	; 4
     ee8:	e8 16       	cp	r14, r24
     eea:	f1 04       	cpc	r15, r1
     eec:	d9 f0       	breq	.+54     	; 0xf24 <receive_transmission+0xaa>
     eee:	21 c0       	rjmp	.+66     	; 0xf32 <receive_transmission+0xb8>
						{
							case 0:
								panSpeed_val	  [input_pos] = '\0';  // terminating null byte
     ef0:	fe 01       	movw	r30, r28
     ef2:	ec 0d       	add	r30, r12
     ef4:	fd 1d       	adc	r31, r13
     ef6:	11 82       	std	Z+1, r1	; 0x01
								break;
     ef8:	1c c0       	rjmp	.+56     	; 0xf32 <receive_transmission+0xb8>
							case 1:
								tiltSpeed_val	  [input_pos] = '\0';  // terminating null byte
     efa:	fe 01       	movw	r30, r28
     efc:	ec 0d       	add	r30, r12
     efe:	fd 1d       	adc	r31, r13
     f00:	13 aa       	std	Z+51, r1	; 0x33
								break;
     f02:	17 c0       	rjmp	.+46     	; 0xf32 <receive_transmission+0xb8>
							case 2:
								laser_val         [input_pos] = '\0';  // terminating null byte
     f04:	e5 e6       	ldi	r30, 0x65	; 101
     f06:	f0 e0       	ldi	r31, 0x00	; 0
     f08:	ec 0f       	add	r30, r28
     f0a:	fd 1f       	adc	r31, r29
     f0c:	ec 0d       	add	r30, r12
     f0e:	fd 1d       	adc	r31, r13
     f10:	10 82       	st	Z, r1
								break;
     f12:	0f c0       	rjmp	.+30     	; 0xf32 <receive_transmission+0xb8>
							case 3:
								roombaSpeed_val   [input_pos] = '\0';  // terminating null byte
     f14:	e7 e9       	ldi	r30, 0x97	; 151
     f16:	f0 e0       	ldi	r31, 0x00	; 0
     f18:	ec 0f       	add	r30, r28
     f1a:	fd 1f       	adc	r31, r29
     f1c:	ec 0d       	add	r30, r12
     f1e:	fd 1d       	adc	r31, r13
     f20:	10 82       	st	Z, r1
								break;
     f22:	07 c0       	rjmp	.+14     	; 0xf32 <receive_transmission+0xb8>
							case 4:
								roombaRadius_val  [input_pos] = '\0';  // terminating null byte
     f24:	e9 ec       	ldi	r30, 0xC9	; 201
     f26:	f0 e0       	ldi	r31, 0x00	; 0
     f28:	ec 0f       	add	r30, r28
     f2a:	fd 1f       	adc	r31, r29
     f2c:	ec 0d       	add	r30, r12
     f2e:	fd 1d       	adc	r31, r13
     f30:	10 82       	st	Z, r1
								break;
							default:
								break;
						}
						// PROCESS INPUT VALUES.
						pan_speed     = atoi(panSpeed_val);
     f32:	ce 01       	movw	r24, r28
     f34:	01 96       	adiw	r24, 0x01	; 1
     f36:	b7 d4       	rcall	.+2414   	; 0x18a6 <atoi>
     f38:	90 93 83 17 	sts	0x1783, r25	; 0x801783 <pan_speed+0x1>
     f3c:	80 93 82 17 	sts	0x1782, r24	; 0x801782 <pan_speed>
						tilt_speed    = atoi(tiltSpeed_val);
     f40:	ce 01       	movw	r24, r28
     f42:	c3 96       	adiw	r24, 0x33	; 51
     f44:	b0 d4       	rcall	.+2400   	; 0x18a6 <atoi>
     f46:	90 93 81 17 	sts	0x1781, r25	; 0x801781 <tilt_speed+0x1>
     f4a:	80 93 80 17 	sts	0x1780, r24	; 0x801780 <tilt_speed>
						laser_target_state	 = atoi(laser_val);
     f4e:	ce 01       	movw	r24, r28
     f50:	8b 59       	subi	r24, 0x9B	; 155
     f52:	9f 4f       	sbci	r25, 0xFF	; 255
     f54:	a8 d4       	rcall	.+2384   	; 0x18a6 <atoi>
     f56:	90 93 75 17 	sts	0x1775, r25	; 0x801775 <laser_target_state+0x1>
     f5a:	80 93 74 17 	sts	0x1774, r24	; 0x801774 <laser_target_state>
						roomba_target_speed  = atoi(roombaSpeed_val);
     f5e:	ce 01       	movw	r24, r28
     f60:	89 56       	subi	r24, 0x69	; 105
     f62:	9f 4f       	sbci	r25, 0xFF	; 255
     f64:	a0 d4       	rcall	.+2368   	; 0x18a6 <atoi>
     f66:	90 93 7f 17 	sts	0x177F, r25	; 0x80177f <roomba_target_speed+0x1>
     f6a:	80 93 7e 17 	sts	0x177E, r24	; 0x80177e <roomba_target_speed>
						roomba_target_radius = atoi(roombaRadius_val);
     f6e:	ce 01       	movw	r24, r28
     f70:	87 53       	subi	r24, 0x37	; 55
     f72:	9f 4f       	sbci	r25, 0xFF	; 255
     f74:	98 d4       	rcall	.+2352   	; 0x18a6 <atoi>
     f76:	90 93 7d 17 	sts	0x177D, r25	; 0x80177d <roomba_target_radius+0x1>
     f7a:	80 93 7c 17 	sts	0x177C, r24	; 0x80177c <roomba_target_radius>
			
						serial_write_usb('\n');
     f7e:	8a e0       	ldi	r24, 0x0A	; 10
     f80:	61 d3       	rcall	.+1730   	; 0x1644 <serial_write_usb>
						// Reset values.
						input_pos = 0;
						packetnum = 0;
						status = 0;
						
						break;
     f82:	b5 c0       	rjmp	.+362    	; 0x10ee <receive_transmission+0x274>
					}
					else if (inByte == '|')
     f84:	1c 37       	cpi	r17, 0x7C	; 124
     f86:	09 f0       	breq	.+2      	; 0xf8a <receive_transmission+0x110>
     f88:	43 c0       	rjmp	.+134    	; 0x1010 <receive_transmission+0x196>
					{
						// ADD NULL TERMINATORS.
						switch(packetnum)
     f8a:	92 e0       	ldi	r25, 0x02	; 2
     f8c:	e9 16       	cp	r14, r25
     f8e:	f1 04       	cpc	r15, r1
     f90:	11 f1       	breq	.+68     	; 0xfd6 <receive_transmission+0x15c>
     f92:	40 f4       	brcc	.+16     	; 0xfa4 <receive_transmission+0x12a>
     f94:	e1 14       	cp	r14, r1
     f96:	f1 04       	cpc	r15, r1
     f98:	71 f0       	breq	.+28     	; 0xfb6 <receive_transmission+0x13c>
     f9a:	91 e0       	ldi	r25, 0x01	; 1
     f9c:	e9 16       	cp	r14, r25
     f9e:	f1 04       	cpc	r15, r1
     fa0:	91 f0       	breq	.+36     	; 0xfc6 <receive_transmission+0x14c>
     fa2:	30 c0       	rjmp	.+96     	; 0x1004 <receive_transmission+0x18a>
     fa4:	83 e0       	ldi	r24, 0x03	; 3
     fa6:	e8 16       	cp	r14, r24
     fa8:	f1 04       	cpc	r15, r1
     faa:	e9 f0       	breq	.+58     	; 0xfe6 <receive_transmission+0x16c>
     fac:	94 e0       	ldi	r25, 0x04	; 4
     fae:	e9 16       	cp	r14, r25
     fb0:	f1 04       	cpc	r15, r1
     fb2:	09 f1       	breq	.+66     	; 0xff6 <receive_transmission+0x17c>
     fb4:	27 c0       	rjmp	.+78     	; 0x1004 <receive_transmission+0x18a>
						{
							case 0:
								panSpeed_val	  [input_pos] = '\0';  // terminating null byte
     fb6:	e1 e0       	ldi	r30, 0x01	; 1
     fb8:	f0 e0       	ldi	r31, 0x00	; 0
     fba:	ec 0f       	add	r30, r28
     fbc:	fd 1f       	adc	r31, r29
     fbe:	ec 0d       	add	r30, r12
     fc0:	fd 1d       	adc	r31, r13
     fc2:	10 82       	st	Z, r1
								break;
     fc4:	1f c0       	rjmp	.+62     	; 0x1004 <receive_transmission+0x18a>
							case 1:
								tiltSpeed_val     [input_pos] = '\0';  // terminating null byte
     fc6:	e3 e3       	ldi	r30, 0x33	; 51
     fc8:	f0 e0       	ldi	r31, 0x00	; 0
     fca:	ec 0f       	add	r30, r28
     fcc:	fd 1f       	adc	r31, r29
     fce:	ec 0d       	add	r30, r12
     fd0:	fd 1d       	adc	r31, r13
     fd2:	10 82       	st	Z, r1
								break;
     fd4:	17 c0       	rjmp	.+46     	; 0x1004 <receive_transmission+0x18a>
							case 2:
								laser_val         [input_pos] = '\0';  // terminating null byte
     fd6:	e5 e6       	ldi	r30, 0x65	; 101
     fd8:	f0 e0       	ldi	r31, 0x00	; 0
     fda:	ec 0f       	add	r30, r28
     fdc:	fd 1f       	adc	r31, r29
     fde:	ec 0d       	add	r30, r12
     fe0:	fd 1d       	adc	r31, r13
     fe2:	10 82       	st	Z, r1
								break;
     fe4:	0f c0       	rjmp	.+30     	; 0x1004 <receive_transmission+0x18a>
							case 3:
								roombaSpeed_val   [input_pos] = '\0';  // terminating null byte
     fe6:	e7 e9       	ldi	r30, 0x97	; 151
     fe8:	f0 e0       	ldi	r31, 0x00	; 0
     fea:	ec 0f       	add	r30, r28
     fec:	fd 1f       	adc	r31, r29
     fee:	ec 0d       	add	r30, r12
     ff0:	fd 1d       	adc	r31, r13
     ff2:	10 82       	st	Z, r1
								break;
     ff4:	07 c0       	rjmp	.+14     	; 0x1004 <receive_transmission+0x18a>
							case 4:
								roombaRadius_val  [input_pos] = '\0';  // terminating null byte
     ff6:	e9 ec       	ldi	r30, 0xC9	; 201
     ff8:	f0 e0       	ldi	r31, 0x00	; 0
     ffa:	ec 0f       	add	r30, r28
     ffc:	fd 1f       	adc	r31, r29
     ffe:	ec 0d       	add	r30, r12
    1000:	fd 1d       	adc	r31, r13
    1002:	10 82       	st	Z, r1
								break;
							default:
								break;
						}
						input_pos = 0;
						packetnum++;
    1004:	8f ef       	ldi	r24, 0xFF	; 255
    1006:	e8 1a       	sub	r14, r24
    1008:	f8 0a       	sbc	r15, r24
								roombaRadius_val  [input_pos] = '\0';  // terminating null byte
								break;
							default:
								break;
						}
						input_pos = 0;
    100a:	cb 2c       	mov	r12, r11
    100c:	d0 2e       	mov	r13, r16
    100e:	68 c0       	rjmp	.+208    	; 0x10e0 <receive_transmission+0x266>
						packetnum++;
					}
					else
					{
						switch(packetnum)
    1010:	92 e0       	ldi	r25, 0x02	; 2
    1012:	e9 16       	cp	r14, r25
    1014:	f1 04       	cpc	r15, r1
    1016:	89 f1       	breq	.+98     	; 0x107a <receive_transmission+0x200>
    1018:	40 f4       	brcc	.+16     	; 0x102a <receive_transmission+0x1b0>
    101a:	e1 14       	cp	r14, r1
    101c:	f1 04       	cpc	r15, r1
    101e:	71 f0       	breq	.+28     	; 0x103c <receive_transmission+0x1c2>
    1020:	91 e0       	ldi	r25, 0x01	; 1
    1022:	e9 16       	cp	r14, r25
    1024:	f1 04       	cpc	r15, r1
    1026:	d1 f0       	breq	.+52     	; 0x105c <receive_transmission+0x1e2>
    1028:	5b c0       	rjmp	.+182    	; 0x10e0 <receive_transmission+0x266>
    102a:	83 e0       	ldi	r24, 0x03	; 3
    102c:	e8 16       	cp	r14, r24
    102e:	f1 04       	cpc	r15, r1
    1030:	99 f1       	breq	.+102    	; 0x1098 <receive_transmission+0x21e>
    1032:	94 e0       	ldi	r25, 0x04	; 4
    1034:	e9 16       	cp	r14, r25
    1036:	f1 04       	cpc	r15, r1
    1038:	f1 f1       	breq	.+124    	; 0x10b6 <receive_transmission+0x23c>
    103a:	52 c0       	rjmp	.+164    	; 0x10e0 <receive_transmission+0x266>
						{
							case 0:
								if (input_pos < (MAXINPUT - 2))
    103c:	80 e3       	ldi	r24, 0x30	; 48
    103e:	c8 16       	cp	r12, r24
    1040:	d1 04       	cpc	r13, r1
    1042:	08 f0       	brcs	.+2      	; 0x1046 <receive_transmission+0x1cc>
    1044:	4d c0       	rjmp	.+154    	; 0x10e0 <receive_transmission+0x266>
									panSpeed_val[input_pos++] = inByte;
    1046:	e1 e0       	ldi	r30, 0x01	; 1
    1048:	f0 e0       	ldi	r31, 0x00	; 0
    104a:	ec 0f       	add	r30, r28
    104c:	fd 1f       	adc	r31, r29
    104e:	ec 0d       	add	r30, r12
    1050:	fd 1d       	adc	r31, r13
    1052:	10 83       	st	Z, r17
    1054:	c6 01       	movw	r24, r12
    1056:	01 96       	adiw	r24, 0x01	; 1
    1058:	6c 01       	movw	r12, r24
    105a:	42 c0       	rjmp	.+132    	; 0x10e0 <receive_transmission+0x266>
								break;
							case 1:
								if (input_pos < (MAXINPUT - 2))
    105c:	90 e3       	ldi	r25, 0x30	; 48
    105e:	c9 16       	cp	r12, r25
    1060:	d1 04       	cpc	r13, r1
    1062:	f0 f5       	brcc	.+124    	; 0x10e0 <receive_transmission+0x266>
									tiltSpeed_val[input_pos++] = inByte;
    1064:	e3 e3       	ldi	r30, 0x33	; 51
    1066:	f0 e0       	ldi	r31, 0x00	; 0
    1068:	ec 0f       	add	r30, r28
    106a:	fd 1f       	adc	r31, r29
    106c:	ec 0d       	add	r30, r12
    106e:	fd 1d       	adc	r31, r13
    1070:	10 83       	st	Z, r17
    1072:	c6 01       	movw	r24, r12
    1074:	01 96       	adiw	r24, 0x01	; 1
    1076:	6c 01       	movw	r12, r24
    1078:	33 c0       	rjmp	.+102    	; 0x10e0 <receive_transmission+0x266>
								break;
							case 2:
								if (input_pos < (MAXINPUT - 2))
    107a:	90 e3       	ldi	r25, 0x30	; 48
    107c:	c9 16       	cp	r12, r25
    107e:	d1 04       	cpc	r13, r1
    1080:	78 f5       	brcc	.+94     	; 0x10e0 <receive_transmission+0x266>
									laser_val[input_pos++] = inByte;
    1082:	e5 e6       	ldi	r30, 0x65	; 101
    1084:	f0 e0       	ldi	r31, 0x00	; 0
    1086:	ec 0f       	add	r30, r28
    1088:	fd 1f       	adc	r31, r29
    108a:	ec 0d       	add	r30, r12
    108c:	fd 1d       	adc	r31, r13
    108e:	10 83       	st	Z, r17
    1090:	c6 01       	movw	r24, r12
    1092:	01 96       	adiw	r24, 0x01	; 1
    1094:	6c 01       	movw	r12, r24
    1096:	24 c0       	rjmp	.+72     	; 0x10e0 <receive_transmission+0x266>
								break;
							case 3:
								if (input_pos < (MAXINPUT - 2))
    1098:	90 e3       	ldi	r25, 0x30	; 48
    109a:	c9 16       	cp	r12, r25
    109c:	d1 04       	cpc	r13, r1
    109e:	00 f5       	brcc	.+64     	; 0x10e0 <receive_transmission+0x266>
									roombaSpeed_val[input_pos++] = inByte;
    10a0:	e7 e9       	ldi	r30, 0x97	; 151
    10a2:	f0 e0       	ldi	r31, 0x00	; 0
    10a4:	ec 0f       	add	r30, r28
    10a6:	fd 1f       	adc	r31, r29
    10a8:	ec 0d       	add	r30, r12
    10aa:	fd 1d       	adc	r31, r13
    10ac:	10 83       	st	Z, r17
    10ae:	c6 01       	movw	r24, r12
    10b0:	01 96       	adiw	r24, 0x01	; 1
    10b2:	6c 01       	movw	r12, r24
    10b4:	15 c0       	rjmp	.+42     	; 0x10e0 <receive_transmission+0x266>
								break;
							case 4:
								if (input_pos < (MAXINPUT - 2))
    10b6:	90 e3       	ldi	r25, 0x30	; 48
    10b8:	c9 16       	cp	r12, r25
    10ba:	d1 04       	cpc	r13, r1
    10bc:	88 f4       	brcc	.+34     	; 0x10e0 <receive_transmission+0x266>
									roombaRadius_val[input_pos++] = inByte;
    10be:	e9 ec       	ldi	r30, 0xC9	; 201
    10c0:	f0 e0       	ldi	r31, 0x00	; 0
    10c2:	ec 0f       	add	r30, r28
    10c4:	fd 1f       	adc	r31, r29
    10c6:	ec 0d       	add	r30, r12
    10c8:	fd 1d       	adc	r31, r13
    10ca:	10 83       	st	Z, r17
    10cc:	c6 01       	movw	r24, r12
    10ce:	01 96       	adiw	r24, 0x01	; 1
    10d0:	6c 01       	movw	r12, r24
    10d2:	06 c0       	rjmp	.+12     	; 0x10e0 <receive_transmission+0x266>
    10d4:	c1 2c       	mov	r12, r1
    10d6:	d1 2c       	mov	r13, r1
    10d8:	e1 2c       	mov	r14, r1
    10da:	f1 2c       	mov	r15, r1
								roombaRadius_val  [input_pos] = '\0';  // terminating null byte
								break;
							default:
								break;
						}
						input_pos = 0;
    10dc:	b1 2c       	mov	r11, r1
    10de:	00 e0       	ldi	r16, 0x00	; 0
		if (inByte == '#')
		{
			status = 1;
			while(status == 1)
			{
				if(rx_data_in_blue_tooth_buffer == 1)
    10e0:	80 91 5e 18 	lds	r24, 0x185E	; 0x80185e <rx_data_in_blue_tooth_buffer>
    10e4:	90 91 5f 18 	lds	r25, 0x185F	; 0x80185f <rx_data_in_blue_tooth_buffer+0x1>
    10e8:	01 97       	sbiw	r24, 0x01	; 1
    10ea:	d1 f7       	brne	.-12     	; 0x10e0 <receive_transmission+0x266>
    10ec:	e6 ce       	rjmp	.-564    	; 0xeba <receive_transmission+0x40>
					}
				}
			}
		}
	}
}
    10ee:	c6 50       	subi	r28, 0x06	; 6
    10f0:	df 4f       	sbci	r29, 0xFF	; 255
    10f2:	0f b6       	in	r0, 0x3f	; 63
    10f4:	f8 94       	cli
    10f6:	de bf       	out	0x3e, r29	; 62
    10f8:	0f be       	out	0x3f, r0	; 63
    10fa:	cd bf       	out	0x3d, r28	; 61
    10fc:	df 91       	pop	r29
    10fe:	cf 91       	pop	r28
    1100:	1f 91       	pop	r17
    1102:	0f 91       	pop	r16
    1104:	ff 90       	pop	r15
    1106:	ef 90       	pop	r14
    1108:	df 90       	pop	r13
    110a:	cf 90       	pop	r12
    110c:	bf 90       	pop	r11
    110e:	08 95       	ret

00001110 <update_laser>:
/*============================================================================*/
// Update the state of the laser.
// ~ 0.05ms average runtime
void update_laser()
{
	if (laser_state != laser_target_state)
    1110:	20 91 76 17 	lds	r18, 0x1776	; 0x801776 <laser_state>
    1114:	30 91 77 17 	lds	r19, 0x1777	; 0x801777 <laser_state+0x1>
    1118:	80 91 74 17 	lds	r24, 0x1774	; 0x801774 <laser_target_state>
    111c:	90 91 75 17 	lds	r25, 0x1775	; 0x801775 <laser_target_state+0x1>
    1120:	28 17       	cp	r18, r24
    1122:	39 07       	cpc	r19, r25
    1124:	b9 f0       	breq	.+46     	; 0x1154 <update_laser+0x44>
	{
		laser_state = laser_target_state;
    1126:	80 91 74 17 	lds	r24, 0x1774	; 0x801774 <laser_target_state>
    112a:	90 91 75 17 	lds	r25, 0x1775	; 0x801775 <laser_target_state+0x1>
    112e:	90 93 77 17 	sts	0x1777, r25	; 0x801777 <laser_state+0x1>
    1132:	80 93 76 17 	sts	0x1776, r24	; 0x801776 <laser_state>
		if (laser_target_state == 0)
    1136:	80 91 74 17 	lds	r24, 0x1774	; 0x801774 <laser_target_state>
    113a:	90 91 75 17 	lds	r25, 0x1775	; 0x801775 <laser_target_state+0x1>
    113e:	89 2b       	or	r24, r25
    1140:	11 f4       	brne	.+4      	; 0x1146 <update_laser+0x36>
		{
			PORTA &= 0b11111110;    // Turn laser off.
    1142:	10 98       	cbi	0x02, 0	; 2
    1144:	08 95       	ret
		}
		else if (laser_target_state == 1)
    1146:	80 91 74 17 	lds	r24, 0x1774	; 0x801774 <laser_target_state>
    114a:	90 91 75 17 	lds	r25, 0x1775	; 0x801775 <laser_target_state+0x1>
    114e:	01 97       	sbiw	r24, 0x01	; 1
    1150:	09 f4       	brne	.+2      	; 0x1154 <update_laser+0x44>
		{
			PORTA |= 0b00000001;    // Turn laser on.
    1152:	10 9a       	sbi	0x02, 0	; 2
    1154:	08 95       	ret

00001156 <update_roomba>:
 * Radius should be between -5 to 5
 * Speed should be between -500 to 500
 */
void update_roomba()
{
	if (roomba_current_speed != roomba_target_speed || roomba_current_radius != roomba_target_radius)
    1156:	20 91 7a 17 	lds	r18, 0x177A	; 0x80177a <roomba_current_speed>
    115a:	30 91 7b 17 	lds	r19, 0x177B	; 0x80177b <roomba_current_speed+0x1>
    115e:	80 91 7e 17 	lds	r24, 0x177E	; 0x80177e <roomba_target_speed>
    1162:	90 91 7f 17 	lds	r25, 0x177F	; 0x80177f <roomba_target_speed+0x1>
    1166:	28 17       	cp	r18, r24
    1168:	39 07       	cpc	r19, r25
    116a:	61 f4       	brne	.+24     	; 0x1184 <update_roomba+0x2e>
    116c:	20 91 78 17 	lds	r18, 0x1778	; 0x801778 <roomba_current_radius>
    1170:	30 91 79 17 	lds	r19, 0x1779	; 0x801779 <roomba_current_radius+0x1>
    1174:	80 91 7c 17 	lds	r24, 0x177C	; 0x80177c <roomba_target_radius>
    1178:	90 91 7d 17 	lds	r25, 0x177D	; 0x80177d <roomba_target_radius+0x1>
    117c:	28 17       	cp	r18, r24
    117e:	39 07       	cpc	r19, r25
    1180:	09 f4       	brne	.+2      	; 0x1184 <update_roomba+0x2e>
    1182:	73 c0       	rjmp	.+230    	; 0x126a <update_roomba+0x114>
	{
		if (roomba_target_speed > MAXSPEED)
    1184:	60 91 7e 17 	lds	r22, 0x177E	; 0x80177e <roomba_target_speed>
    1188:	70 91 7f 17 	lds	r23, 0x177F	; 0x80177f <roomba_target_speed+0x1>
    118c:	07 2e       	mov	r0, r23
    118e:	00 0c       	add	r0, r0
    1190:	88 0b       	sbc	r24, r24
    1192:	99 0b       	sbc	r25, r25
    1194:	1d d3       	rcall	.+1594   	; 0x17d0 <__floatsisf>
    1196:	20 e0       	ldi	r18, 0x00	; 0
    1198:	30 e0       	ldi	r19, 0x00	; 0
    119a:	4a ef       	ldi	r20, 0xFA	; 250
    119c:	53 e4       	ldi	r21, 0x43	; 67
    119e:	77 d3       	rcall	.+1774   	; 0x188e <__gesf2>
    11a0:	18 16       	cp	r1, r24
    11a2:	3c f4       	brge	.+14     	; 0x11b2 <update_roomba+0x5c>
		{
			roomba_target_speed = MAXSPEED;
    11a4:	84 ef       	ldi	r24, 0xF4	; 244
    11a6:	91 e0       	ldi	r25, 0x01	; 1
    11a8:	90 93 7f 17 	sts	0x177F, r25	; 0x80177f <roomba_target_speed+0x1>
    11ac:	80 93 7e 17 	sts	0x177E, r24	; 0x80177e <roomba_target_speed>
    11b0:	16 c0       	rjmp	.+44     	; 0x11de <update_roomba+0x88>
		}
		else if (roomba_target_speed < MINSPEED)
    11b2:	60 91 7e 17 	lds	r22, 0x177E	; 0x80177e <roomba_target_speed>
    11b6:	70 91 7f 17 	lds	r23, 0x177F	; 0x80177f <roomba_target_speed+0x1>
    11ba:	07 2e       	mov	r0, r23
    11bc:	00 0c       	add	r0, r0
    11be:	88 0b       	sbc	r24, r24
    11c0:	99 0b       	sbc	r25, r25
    11c2:	06 d3       	rcall	.+1548   	; 0x17d0 <__floatsisf>
    11c4:	20 e0       	ldi	r18, 0x00	; 0
    11c6:	30 e0       	ldi	r19, 0x00	; 0
    11c8:	4a ef       	ldi	r20, 0xFA	; 250
    11ca:	53 ec       	ldi	r21, 0xC3	; 195
    11cc:	fb d2       	rcall	.+1526   	; 0x17c4 <__cmpsf2>
    11ce:	88 23       	and	r24, r24
    11d0:	34 f4       	brge	.+12     	; 0x11de <update_roomba+0x88>
		{
			roomba_target_speed = MINSPEED;
    11d2:	8c e0       	ldi	r24, 0x0C	; 12
    11d4:	9e ef       	ldi	r25, 0xFE	; 254
    11d6:	90 93 7f 17 	sts	0x177F, r25	; 0x80177f <roomba_target_speed+0x1>
    11da:	80 93 7e 17 	sts	0x177E, r24	; 0x80177e <roomba_target_speed>
		}
		
		if (roomba_target_radius > MAXRADIUS)
    11de:	60 91 7c 17 	lds	r22, 0x177C	; 0x80177c <roomba_target_radius>
    11e2:	70 91 7d 17 	lds	r23, 0x177D	; 0x80177d <roomba_target_radius+0x1>
    11e6:	07 2e       	mov	r0, r23
    11e8:	00 0c       	add	r0, r0
    11ea:	88 0b       	sbc	r24, r24
    11ec:	99 0b       	sbc	r25, r25
    11ee:	f0 d2       	rcall	.+1504   	; 0x17d0 <__floatsisf>
    11f0:	20 e0       	ldi	r18, 0x00	; 0
    11f2:	30 e0       	ldi	r19, 0x00	; 0
    11f4:	4a ef       	ldi	r20, 0xFA	; 250
    11f6:	54 e4       	ldi	r21, 0x44	; 68
    11f8:	4a d3       	rcall	.+1684   	; 0x188e <__gesf2>
    11fa:	18 16       	cp	r1, r24
    11fc:	3c f4       	brge	.+14     	; 0x120c <update_roomba+0xb6>
		{
			roomba_target_radius = MAXRADIUS;
    11fe:	80 ed       	ldi	r24, 0xD0	; 208
    1200:	97 e0       	ldi	r25, 0x07	; 7
    1202:	90 93 7d 17 	sts	0x177D, r25	; 0x80177d <roomba_target_radius+0x1>
    1206:	80 93 7c 17 	sts	0x177C, r24	; 0x80177c <roomba_target_radius>
    120a:	16 c0       	rjmp	.+44     	; 0x1238 <update_roomba+0xe2>
		}
		else if (roomba_target_radius < MINRADIUS)
    120c:	60 91 7c 17 	lds	r22, 0x177C	; 0x80177c <roomba_target_radius>
    1210:	70 91 7d 17 	lds	r23, 0x177D	; 0x80177d <roomba_target_radius+0x1>
    1214:	07 2e       	mov	r0, r23
    1216:	00 0c       	add	r0, r0
    1218:	88 0b       	sbc	r24, r24
    121a:	99 0b       	sbc	r25, r25
    121c:	d9 d2       	rcall	.+1458   	; 0x17d0 <__floatsisf>
    121e:	20 e0       	ldi	r18, 0x00	; 0
    1220:	30 e0       	ldi	r19, 0x00	; 0
    1222:	4a ef       	ldi	r20, 0xFA	; 250
    1224:	54 ec       	ldi	r21, 0xC4	; 196
    1226:	ce d2       	rcall	.+1436   	; 0x17c4 <__cmpsf2>
    1228:	88 23       	and	r24, r24
    122a:	34 f4       	brge	.+12     	; 0x1238 <update_roomba+0xe2>
		{
			roomba_target_radius = MINRADIUS;
    122c:	80 e3       	ldi	r24, 0x30	; 48
    122e:	98 ef       	ldi	r25, 0xF8	; 248
    1230:	90 93 7d 17 	sts	0x177D, r25	; 0x80177d <roomba_target_radius+0x1>
    1234:	80 93 7c 17 	sts	0x177C, r24	; 0x80177c <roomba_target_radius>
		}
		
		roomba_current_speed = roomba_target_speed;
    1238:	80 91 7e 17 	lds	r24, 0x177E	; 0x80177e <roomba_target_speed>
    123c:	90 91 7f 17 	lds	r25, 0x177F	; 0x80177f <roomba_target_speed+0x1>
    1240:	90 93 7b 17 	sts	0x177B, r25	; 0x80177b <roomba_current_speed+0x1>
    1244:	80 93 7a 17 	sts	0x177A, r24	; 0x80177a <roomba_current_speed>
		roomba_current_radius = roomba_target_radius;
    1248:	80 91 7c 17 	lds	r24, 0x177C	; 0x80177c <roomba_target_radius>
    124c:	90 91 7d 17 	lds	r25, 0x177D	; 0x80177d <roomba_target_radius+0x1>
    1250:	90 93 79 17 	sts	0x1779, r25	; 0x801779 <roomba_current_radius+0x1>
    1254:	80 93 78 17 	sts	0x1778, r24	; 0x801778 <roomba_current_radius>
		
		roomba_drive(roomba_target_speed, roomba_target_radius);
    1258:	60 91 7c 17 	lds	r22, 0x177C	; 0x80177c <roomba_target_radius>
    125c:	70 91 7d 17 	lds	r23, 0x177D	; 0x80177d <roomba_target_radius+0x1>
    1260:	80 91 7e 17 	lds	r24, 0x177E	; 0x80177e <roomba_target_speed>
    1264:	90 91 7f 17 	lds	r25, 0x177F	; 0x80177f <roomba_target_speed+0x1>
    1268:	73 c0       	rjmp	.+230    	; 0x1350 <roomba_drive>
    126a:	08 95       	ret

0000126c <update_servos>:
/*============================================================================*/
// Update the positions of the servos.
// ~ 0.08ms average runtime
void update_servos()
{
	adjust_tilt_angle(tilt_speed);
    126c:	80 91 80 17 	lds	r24, 0x1780	; 0x801780 <tilt_speed>
    1270:	90 91 81 17 	lds	r25, 0x1781	; 0x801781 <tilt_speed+0x1>
    1274:	18 d1       	rcall	.+560    	; 0x14a6 <adjust_tilt_angle>
	adjust_pan_angle(pan_speed);
    1276:	80 91 82 17 	lds	r24, 0x1782	; 0x801782 <pan_speed>
    127a:	90 91 83 17 	lds	r25, 0x1783	; 0x801783 <pan_speed+0x1>
    127e:	b1 c0       	rjmp	.+354    	; 0x13e2 <adjust_pan_angle>
    1280:	08 95       	ret

00001282 <remote>:
/*============================================================================*/
void remote()
{
	for(;;)
	{
		receive_transmission();
    1282:	fb dd       	rcall	.-1034   	; 0xe7a <receive_transmission>
		update_laser();
    1284:	45 df       	rcall	.-374    	; 0x1110 <update_laser>
		update_servos();
    1286:	f2 df       	rcall	.-28     	; 0x126c <update_servos>
		update_roomba();
    1288:	66 df       	rcall	.-308    	; 0x1156 <update_roomba>
		//Check for collision
		
		// Reseting servo targets.
		pan_speed   = 0;
    128a:	10 92 83 17 	sts	0x1783, r1	; 0x801783 <pan_speed+0x1>
    128e:	10 92 82 17 	sts	0x1782, r1	; 0x801782 <pan_speed>
		tilt_speed  = 0;
    1292:	10 92 81 17 	sts	0x1781, r1	; 0x801781 <tilt_speed+0x1>
    1296:	10 92 80 17 	sts	0x1780, r1	; 0x801780 <tilt_speed>
		
		// Pass off to any other System level task.
		Task_Next();	
    129a:	f4 dc       	rcall	.-1560   	; 0xc84 <Task_Next>
	}
    129c:	f2 cf       	rjmp	.-28     	; 0x1282 <remote>

0000129e <a_main>:

/*============================================================================*/
void a_main()
{	
	// Creating Setup Task.
	Task_Create_System(setup, 0);
    129e:	60 e0       	ldi	r22, 0x00	; 0
    12a0:	70 e0       	ldi	r23, 0x00	; 0
    12a2:	85 e3       	ldi	r24, 0x35	; 53
    12a4:	97 e0       	ldi	r25, 0x07	; 7
    12a6:	5b dc       	rcall	.-1866   	; 0xb5e <Task_Create_System>
	
	// Creating Main Task.
	Task_Create_System(remote, 1);
    12a8:	61 e0       	ldi	r22, 0x01	; 1
    12aa:	70 e0       	ldi	r23, 0x00	; 0
    12ac:	81 e4       	ldi	r24, 0x41	; 65
    12ae:	99 e0       	ldi	r25, 0x09	; 9
    12b0:	56 cc       	rjmp	.-1876   	; 0xb5e <Task_Create_System>
    12b2:	08 95       	ret

000012b4 <init_roomba>:
#include "uart.h"

/*============================================================================*/
void init_roomba()
{	
	DDRA  |= 0b00000010;	// Enable pin 23 as output.
    12b4:	09 9a       	sbi	0x01, 1	; 1
	PORTA |= 0b00000010;	// Turn pin 23 to high.
    12b6:	11 9a       	sbi	0x02, 1	; 2
	
	init_uart_roomba();		// Initialize serial 2 to 19200 baud.
    12b8:	6c d2       	rcall	.+1240   	; 0x1792 <init_uart_roomba>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    12ba:	2f ef       	ldi	r18, 0xFF	; 255
    12bc:	81 e1       	ldi	r24, 0x11	; 17
    12be:	9a e7       	ldi	r25, 0x7A	; 122
    12c0:	21 50       	subi	r18, 0x01	; 1
    12c2:	80 40       	sbci	r24, 0x00	; 0
    12c4:	90 40       	sbci	r25, 0x00	; 0
    12c6:	e1 f7       	brne	.-8      	; 0x12c0 <init_roomba+0xc>
    12c8:	00 c0       	rjmp	.+0      	; 0x12ca <init_roomba+0x16>
    12ca:	00 00       	nop
	
	//Set baud rate by toggling the brc pin 3 times.
	_delay_ms(2500);
	PORTA &= 0b11111101;	// Turn pin 23 to low
    12cc:	11 98       	cbi	0x02, 1	; 2
    12ce:	2f ef       	ldi	r18, 0xFF	; 255
    12d0:	85 ea       	ldi	r24, 0xA5	; 165
    12d2:	9e e0       	ldi	r25, 0x0E	; 14
    12d4:	21 50       	subi	r18, 0x01	; 1
    12d6:	80 40       	sbci	r24, 0x00	; 0
    12d8:	90 40       	sbci	r25, 0x00	; 0
    12da:	e1 f7       	brne	.-8      	; 0x12d4 <init_roomba+0x20>
    12dc:	00 c0       	rjmp	.+0      	; 0x12de <init_roomba+0x2a>
    12de:	00 00       	nop
	_delay_ms(300);
	PORTA |= 0b00000010;	// Turn pin 23 to high
    12e0:	11 9a       	sbi	0x02, 1	; 2
    12e2:	2f ef       	ldi	r18, 0xFF	; 255
    12e4:	85 ea       	ldi	r24, 0xA5	; 165
    12e6:	9e e0       	ldi	r25, 0x0E	; 14
    12e8:	21 50       	subi	r18, 0x01	; 1
    12ea:	80 40       	sbci	r24, 0x00	; 0
    12ec:	90 40       	sbci	r25, 0x00	; 0
    12ee:	e1 f7       	brne	.-8      	; 0x12e8 <init_roomba+0x34>
    12f0:	00 c0       	rjmp	.+0      	; 0x12f2 <init_roomba+0x3e>
    12f2:	00 00       	nop
	_delay_ms(300);
	PORTA &= 0b11111101;	// Turn pin 23 to low
    12f4:	11 98       	cbi	0x02, 1	; 2
    12f6:	2f ef       	ldi	r18, 0xFF	; 255
    12f8:	85 ea       	ldi	r24, 0xA5	; 165
    12fa:	9e e0       	ldi	r25, 0x0E	; 14
    12fc:	21 50       	subi	r18, 0x01	; 1
    12fe:	80 40       	sbci	r24, 0x00	; 0
    1300:	90 40       	sbci	r25, 0x00	; 0
    1302:	e1 f7       	brne	.-8      	; 0x12fc <init_roomba+0x48>
    1304:	00 c0       	rjmp	.+0      	; 0x1306 <init_roomba+0x52>
    1306:	00 00       	nop
	_delay_ms(300);
	PORTA |= 0b00000010;	// Turn pin 23 to high
    1308:	11 9a       	sbi	0x02, 1	; 2
    130a:	2f ef       	ldi	r18, 0xFF	; 255
    130c:	85 ea       	ldi	r24, 0xA5	; 165
    130e:	9e e0       	ldi	r25, 0x0E	; 14
    1310:	21 50       	subi	r18, 0x01	; 1
    1312:	80 40       	sbci	r24, 0x00	; 0
    1314:	90 40       	sbci	r25, 0x00	; 0
    1316:	e1 f7       	brne	.-8      	; 0x1310 <init_roomba+0x5c>
    1318:	00 c0       	rjmp	.+0      	; 0x131a <init_roomba+0x66>
    131a:	00 00       	nop
	_delay_ms(300);
	PORTA &= 0b11111101;	// Turn pin 23 to low
    131c:	11 98       	cbi	0x02, 1	; 2
    131e:	2f ef       	ldi	r18, 0xFF	; 255
    1320:	85 ea       	ldi	r24, 0xA5	; 165
    1322:	9e e0       	ldi	r25, 0x0E	; 14
    1324:	21 50       	subi	r18, 0x01	; 1
    1326:	80 40       	sbci	r24, 0x00	; 0
    1328:	90 40       	sbci	r25, 0x00	; 0
    132a:	e1 f7       	brne	.-8      	; 0x1324 <init_roomba+0x70>
    132c:	00 c0       	rjmp	.+0      	; 0x132e <init_roomba+0x7a>
    132e:	00 00       	nop
	_delay_ms(300);
	PORTA |= 0b00000010;	// Turn pin 23 to high
    1330:	11 9a       	sbi	0x02, 1	; 2

	init_uart_roomba();		// Initialize serial 2 to 19200 baud.
    1332:	2f d2       	rcall	.+1118   	; 0x1792 <init_uart_roomba>
	
	//Power on
	serial_write_roomba(START);
    1334:	80 e8       	ldi	r24, 0x80	; 128
    1336:	3e d2       	rcall	.+1148   	; 0x17b4 <serial_write_roomba>
    1338:	2f ef       	ldi	r18, 0xFF	; 255
    133a:	83 ec       	ldi	r24, 0xC3	; 195
    133c:	99 e0       	ldi	r25, 0x09	; 9
    133e:	21 50       	subi	r18, 0x01	; 1
    1340:	80 40       	sbci	r24, 0x00	; 0
    1342:	90 40       	sbci	r25, 0x00	; 0
    1344:	e1 f7       	brne	.-8      	; 0x133e <init_roomba+0x8a>
    1346:	00 c0       	rjmp	.+0      	; 0x1348 <init_roomba+0x94>
    1348:	00 00       	nop
	
	_delay_ms(200);
	
	//Enter safe mode
	serial_write_roomba(SAFE);
    134a:	83 e8       	ldi	r24, 0x83	; 131
    134c:	33 c2       	rjmp	.+1126   	; 0x17b4 <serial_write_roomba>
    134e:	08 95       	ret

00001350 <roomba_drive>:
}

/*============================================================================*/
void roomba_drive(int velocity, int radius)
{
    1350:	0f 93       	push	r16
    1352:	1f 93       	push	r17
    1354:	cf 93       	push	r28
    1356:	df 93       	push	r29
    1358:	18 2f       	mov	r17, r24
    135a:	09 2f       	mov	r16, r25
    135c:	c6 2f       	mov	r28, r22
    135e:	d7 2f       	mov	r29, r23
	serial_write_roomba(DRIVE);
    1360:	89 e8       	ldi	r24, 0x89	; 137
    1362:	28 d2       	rcall	.+1104   	; 0x17b4 <serial_write_roomba>
	serial_write_roomba(HIGH_BYTE(velocity));
    1364:	80 2f       	mov	r24, r16
    1366:	26 d2       	rcall	.+1100   	; 0x17b4 <serial_write_roomba>
	serial_write_roomba(LOW_BYTE(velocity));
    1368:	81 2f       	mov	r24, r17
    136a:	24 d2       	rcall	.+1096   	; 0x17b4 <serial_write_roomba>
	serial_write_roomba(HIGH_BYTE(radius));
    136c:	8d 2f       	mov	r24, r29
    136e:	22 d2       	rcall	.+1092   	; 0x17b4 <serial_write_roomba>
	serial_write_roomba(LOW_BYTE(radius));
    1370:	8c 2f       	mov	r24, r28
    1372:	20 d2       	rcall	.+1088   	; 0x17b4 <serial_write_roomba>
}
    1374:	df 91       	pop	r29
    1376:	cf 91       	pop	r28
    1378:	1f 91       	pop	r17
    137a:	0f 91       	pop	r16
    137c:	08 95       	ret

0000137e <init_servos>:

/*============================================================================*/
void init_servos()
{
	// Setting PWM pins 2 & 3 to output and to low.
	DDRE  |= 0b00110000;
    137e:	8d b1       	in	r24, 0x0d	; 13
    1380:	80 63       	ori	r24, 0x30	; 48
    1382:	8d b9       	out	0x0d, r24	; 13
	PORTE &= 0b11001111;
    1384:	8e b1       	in	r24, 0x0e	; 14
    1386:	8f 7c       	andi	r24, 0xCF	; 207
    1388:	8e b9       	out	0x0e, r24	; 14

	// Initializing timer.
	TCNT3 = 0;												// set counter to 0.
    138a:	10 92 95 00 	sts	0x0095, r1	; 0x800095 <__TEXT_REGION_LENGTH__+0x700095>
    138e:	10 92 94 00 	sts	0x0094, r1	; 0x800094 <__TEXT_REGION_LENGTH__+0x700094>
	TCCR3A = 0x00;
    1392:	a0 e9       	ldi	r26, 0x90	; 144
    1394:	b0 e0       	ldi	r27, 0x00	; 0
    1396:	1c 92       	st	X, r1
	TCCR3B = 0x00;
    1398:	e1 e9       	ldi	r30, 0x91	; 145
    139a:	f0 e0       	ldi	r31, 0x00	; 0
    139c:	10 82       	st	Z, r1
	TCCR3A = (1 << COM3B1) | (1 << COM3C1) | (1 << WGM30);  // NON Inverted PWM.
    139e:	89 e2       	ldi	r24, 0x29	; 41
    13a0:	8c 93       	st	X, r24
	TCCR3B |= (1 << WGM33) | (1 << CS41) | (1 << CS40);		// PRESCALER = 64 MODE 14 (FAST PWM).
    13a2:	80 81       	ld	r24, Z
    13a4:	83 61       	ori	r24, 0x13	; 19
    13a6:	80 83       	st	Z, r24
	OCR3A = 2500;
    13a8:	84 ec       	ldi	r24, 0xC4	; 196
    13aa:	99 e0       	ldi	r25, 0x09	; 9
    13ac:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <__TEXT_REGION_LENGTH__+0x700099>
    13b0:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <__TEXT_REGION_LENGTH__+0x700098>

	// Setting angle to 90 degrees.
	current_pan_angle  = DEFUALT_ANGLE_VAL;
    13b4:	8c eb       	ldi	r24, 0xBC	; 188
    13b6:	90 e0       	ldi	r25, 0x00	; 0
    13b8:	90 93 65 18 	sts	0x1865, r25	; 0x801865 <current_pan_angle+0x1>
    13bc:	80 93 64 18 	sts	0x1864, r24	; 0x801864 <current_pan_angle>
	current_tilt_angle = DEFUALT_ANGLE_VAL;
    13c0:	90 93 63 18 	sts	0x1863, r25	; 0x801863 <current_tilt_angle+0x1>
    13c4:	80 93 62 18 	sts	0x1862, r24	; 0x801862 <current_tilt_angle>

	// Setting target angle to the current angle values.
	OCR3C = current_pan_angle;
    13c8:	90 93 9d 00 	sts	0x009D, r25	; 0x80009d <__TEXT_REGION_LENGTH__+0x70009d>
    13cc:	80 93 9c 00 	sts	0x009C, r24	; 0x80009c <__TEXT_REGION_LENGTH__+0x70009c>
	OCR3B = current_tilt_angle;
    13d0:	80 91 62 18 	lds	r24, 0x1862	; 0x801862 <current_tilt_angle>
    13d4:	90 91 63 18 	lds	r25, 0x1863	; 0x801863 <current_tilt_angle+0x1>
    13d8:	90 93 9b 00 	sts	0x009B, r25	; 0x80009b <__TEXT_REGION_LENGTH__+0x70009b>
    13dc:	80 93 9a 00 	sts	0x009A, r24	; 0x80009a <__TEXT_REGION_LENGTH__+0x70009a>
    13e0:	08 95       	ret

000013e2 <adjust_pan_angle>:
}

/*============================================================================*/
// angle_delta is an integer between -5 and 5.
void adjust_pan_angle(int angle_delta)
{
    13e2:	cf 92       	push	r12
    13e4:	df 92       	push	r13
    13e6:	ef 92       	push	r14
    13e8:	ff 92       	push	r15
    13ea:	cf 93       	push	r28
    13ec:	df 93       	push	r29
    13ee:	ec 01       	movw	r28, r24
	//Verifying angle delta.
	if (angle_delta > MAX_ANGLE_DELTA)		// Max increase.
    13f0:	bc 01       	movw	r22, r24
    13f2:	99 0f       	add	r25, r25
    13f4:	88 0b       	sbc	r24, r24
    13f6:	99 0b       	sbc	r25, r25
    13f8:	eb d1       	rcall	.+982    	; 0x17d0 <__floatsisf>
    13fa:	6b 01       	movw	r12, r22
    13fc:	7c 01       	movw	r14, r24
    13fe:	20 e0       	ldi	r18, 0x00	; 0
    1400:	30 e0       	ldi	r19, 0x00	; 0
    1402:	40 ea       	ldi	r20, 0xA0	; 160
    1404:	50 e4       	ldi	r21, 0x40	; 64
    1406:	43 d2       	rcall	.+1158   	; 0x188e <__gesf2>
    1408:	18 16       	cp	r1, r24
    140a:	64 f0       	brlt	.+24     	; 0x1424 <adjust_pan_angle+0x42>
	{
		angle_delta = MAX_ANGLE_DELTA;
	}
	else if (angle_delta < MIN_ANGLE_DELTA)	// Max decrease.
    140c:	20 e0       	ldi	r18, 0x00	; 0
    140e:	30 e0       	ldi	r19, 0x00	; 0
    1410:	40 ea       	ldi	r20, 0xA0	; 160
    1412:	50 ec       	ldi	r21, 0xC0	; 192
    1414:	c7 01       	movw	r24, r14
    1416:	b6 01       	movw	r22, r12
    1418:	d5 d1       	rcall	.+938    	; 0x17c4 <__cmpsf2>
    141a:	88 23       	and	r24, r24
    141c:	2c f4       	brge	.+10     	; 0x1428 <adjust_pan_angle+0x46>
	{
		angle_delta = MIN_ANGLE_DELTA;
    141e:	cb ef       	ldi	r28, 0xFB	; 251
    1420:	df ef       	ldi	r29, 0xFF	; 255
    1422:	02 c0       	rjmp	.+4      	; 0x1428 <adjust_pan_angle+0x46>
void adjust_pan_angle(int angle_delta)
{
	//Verifying angle delta.
	if (angle_delta > MAX_ANGLE_DELTA)		// Max increase.
	{
		angle_delta = MAX_ANGLE_DELTA;
    1424:	c5 e0       	ldi	r28, 0x05	; 5
    1426:	d0 e0       	ldi	r29, 0x00	; 0
	{
		angle_delta = MIN_ANGLE_DELTA;
	}

	//Verifying angle.	
	current_pan_angle += angle_delta;
    1428:	80 91 64 18 	lds	r24, 0x1864	; 0x801864 <current_pan_angle>
    142c:	90 91 65 18 	lds	r25, 0x1865	; 0x801865 <current_pan_angle+0x1>
    1430:	c8 0f       	add	r28, r24
    1432:	d9 1f       	adc	r29, r25
	if (current_pan_angle > MAX_ANGLE_VAL)			// Max angle.
    1434:	be 01       	movw	r22, r28
    1436:	0d 2e       	mov	r0, r29
    1438:	00 0c       	add	r0, r0
    143a:	88 0b       	sbc	r24, r24
    143c:	99 0b       	sbc	r25, r25
    143e:	c8 d1       	rcall	.+912    	; 0x17d0 <__floatsisf>
    1440:	6b 01       	movw	r12, r22
    1442:	7c 01       	movw	r14, r24
    1444:	20 e0       	ldi	r18, 0x00	; 0
    1446:	30 e0       	ldi	r19, 0x00	; 0
    1448:	46 e9       	ldi	r20, 0x96	; 150
    144a:	53 e4       	ldi	r21, 0x43	; 67
    144c:	20 d2       	rcall	.+1088   	; 0x188e <__gesf2>
    144e:	18 16       	cp	r1, r24
    1450:	3c f4       	brge	.+14     	; 0x1460 <adjust_pan_angle+0x7e>
	{
		current_pan_angle = MAX_ANGLE_VAL;
    1452:	8c e2       	ldi	r24, 0x2C	; 44
    1454:	91 e0       	ldi	r25, 0x01	; 1
    1456:	90 93 65 18 	sts	0x1865, r25	; 0x801865 <current_pan_angle+0x1>
    145a:	80 93 64 18 	sts	0x1864, r24	; 0x801864 <current_pan_angle>
    145e:	14 c0       	rjmp	.+40     	; 0x1488 <adjust_pan_angle+0xa6>
	}
	else if (current_pan_angle < MIN_ANGLE_VAL)		// Min angle.
    1460:	20 e0       	ldi	r18, 0x00	; 0
    1462:	30 e0       	ldi	r19, 0x00	; 0
    1464:	4a e8       	ldi	r20, 0x8A	; 138
    1466:	52 e4       	ldi	r21, 0x42	; 66
    1468:	c7 01       	movw	r24, r14
    146a:	b6 01       	movw	r22, r12
    146c:	ab d1       	rcall	.+854    	; 0x17c4 <__cmpsf2>
    146e:	88 23       	and	r24, r24
    1470:	2c f0       	brlt	.+10     	; 0x147c <adjust_pan_angle+0x9a>
	{
		angle_delta = MIN_ANGLE_DELTA;
	}

	//Verifying angle.	
	current_pan_angle += angle_delta;
    1472:	d0 93 65 18 	sts	0x1865, r29	; 0x801865 <current_pan_angle+0x1>
    1476:	c0 93 64 18 	sts	0x1864, r28	; 0x801864 <current_pan_angle>
    147a:	06 c0       	rjmp	.+12     	; 0x1488 <adjust_pan_angle+0xa6>
	{
		current_pan_angle = MAX_ANGLE_VAL;
	}
	else if (current_pan_angle < MIN_ANGLE_VAL)		// Min angle.
	{
		current_pan_angle = MIN_ANGLE_VAL;
    147c:	85 e4       	ldi	r24, 0x45	; 69
    147e:	90 e0       	ldi	r25, 0x00	; 0
    1480:	90 93 65 18 	sts	0x1865, r25	; 0x801865 <current_pan_angle+0x1>
    1484:	80 93 64 18 	sts	0x1864, r24	; 0x801864 <current_pan_angle>
	}
	OCR3C = current_pan_angle;
    1488:	80 91 64 18 	lds	r24, 0x1864	; 0x801864 <current_pan_angle>
    148c:	90 91 65 18 	lds	r25, 0x1865	; 0x801865 <current_pan_angle+0x1>
    1490:	90 93 9d 00 	sts	0x009D, r25	; 0x80009d <__TEXT_REGION_LENGTH__+0x70009d>
    1494:	80 93 9c 00 	sts	0x009C, r24	; 0x80009c <__TEXT_REGION_LENGTH__+0x70009c>
}
    1498:	df 91       	pop	r29
    149a:	cf 91       	pop	r28
    149c:	ff 90       	pop	r15
    149e:	ef 90       	pop	r14
    14a0:	df 90       	pop	r13
    14a2:	cf 90       	pop	r12
    14a4:	08 95       	ret

000014a6 <adjust_tilt_angle>:

/*============================================================================*/
// angle_delta is an integer between -5 and 5.
void adjust_tilt_angle(int angle_delta)
{
    14a6:	cf 92       	push	r12
    14a8:	df 92       	push	r13
    14aa:	ef 92       	push	r14
    14ac:	ff 92       	push	r15
    14ae:	cf 93       	push	r28
    14b0:	df 93       	push	r29
    14b2:	ec 01       	movw	r28, r24
	//Verifying angle delta.
	if (angle_delta > MAX_ANGLE_DELTA)		// Max increase.
    14b4:	bc 01       	movw	r22, r24
    14b6:	99 0f       	add	r25, r25
    14b8:	88 0b       	sbc	r24, r24
    14ba:	99 0b       	sbc	r25, r25
    14bc:	89 d1       	rcall	.+786    	; 0x17d0 <__floatsisf>
    14be:	6b 01       	movw	r12, r22
    14c0:	7c 01       	movw	r14, r24
    14c2:	20 e0       	ldi	r18, 0x00	; 0
    14c4:	30 e0       	ldi	r19, 0x00	; 0
    14c6:	40 ea       	ldi	r20, 0xA0	; 160
    14c8:	50 e4       	ldi	r21, 0x40	; 64
    14ca:	e1 d1       	rcall	.+962    	; 0x188e <__gesf2>
    14cc:	18 16       	cp	r1, r24
    14ce:	64 f0       	brlt	.+24     	; 0x14e8 <adjust_tilt_angle+0x42>
	{
		angle_delta = MAX_ANGLE_DELTA;
	}
	else if (angle_delta < MIN_ANGLE_DELTA)	// Max decrease.
    14d0:	20 e0       	ldi	r18, 0x00	; 0
    14d2:	30 e0       	ldi	r19, 0x00	; 0
    14d4:	40 ea       	ldi	r20, 0xA0	; 160
    14d6:	50 ec       	ldi	r21, 0xC0	; 192
    14d8:	c7 01       	movw	r24, r14
    14da:	b6 01       	movw	r22, r12
    14dc:	73 d1       	rcall	.+742    	; 0x17c4 <__cmpsf2>
    14de:	88 23       	and	r24, r24
    14e0:	2c f4       	brge	.+10     	; 0x14ec <adjust_tilt_angle+0x46>
	{
		angle_delta = MIN_ANGLE_DELTA;
    14e2:	cb ef       	ldi	r28, 0xFB	; 251
    14e4:	df ef       	ldi	r29, 0xFF	; 255
    14e6:	02 c0       	rjmp	.+4      	; 0x14ec <adjust_tilt_angle+0x46>
void adjust_tilt_angle(int angle_delta)
{
	//Verifying angle delta.
	if (angle_delta > MAX_ANGLE_DELTA)		// Max increase.
	{
		angle_delta = MAX_ANGLE_DELTA;
    14e8:	c5 e0       	ldi	r28, 0x05	; 5
    14ea:	d0 e0       	ldi	r29, 0x00	; 0
	{
		angle_delta = MIN_ANGLE_DELTA;
	}

	//Verifying angle.	
	current_tilt_angle += angle_delta;
    14ec:	80 91 62 18 	lds	r24, 0x1862	; 0x801862 <current_tilt_angle>
    14f0:	90 91 63 18 	lds	r25, 0x1863	; 0x801863 <current_tilt_angle+0x1>
    14f4:	c8 0f       	add	r28, r24
    14f6:	d9 1f       	adc	r29, r25
	if (current_tilt_angle > MAX_ANGLE_VAL)			// Max angle.
    14f8:	be 01       	movw	r22, r28
    14fa:	0d 2e       	mov	r0, r29
    14fc:	00 0c       	add	r0, r0
    14fe:	88 0b       	sbc	r24, r24
    1500:	99 0b       	sbc	r25, r25
    1502:	66 d1       	rcall	.+716    	; 0x17d0 <__floatsisf>
    1504:	6b 01       	movw	r12, r22
    1506:	7c 01       	movw	r14, r24
    1508:	20 e0       	ldi	r18, 0x00	; 0
    150a:	30 e0       	ldi	r19, 0x00	; 0
    150c:	46 e9       	ldi	r20, 0x96	; 150
    150e:	53 e4       	ldi	r21, 0x43	; 67
    1510:	be d1       	rcall	.+892    	; 0x188e <__gesf2>
    1512:	18 16       	cp	r1, r24
    1514:	3c f4       	brge	.+14     	; 0x1524 <adjust_tilt_angle+0x7e>
	{
		current_tilt_angle = MAX_ANGLE_VAL;
    1516:	8c e2       	ldi	r24, 0x2C	; 44
    1518:	91 e0       	ldi	r25, 0x01	; 1
    151a:	90 93 63 18 	sts	0x1863, r25	; 0x801863 <current_tilt_angle+0x1>
    151e:	80 93 62 18 	sts	0x1862, r24	; 0x801862 <current_tilt_angle>
    1522:	14 c0       	rjmp	.+40     	; 0x154c <adjust_tilt_angle+0xa6>
	}
	else if (current_tilt_angle < MIN_ANGLE_VAL)	// Min angle.
    1524:	20 e0       	ldi	r18, 0x00	; 0
    1526:	30 e0       	ldi	r19, 0x00	; 0
    1528:	4a e8       	ldi	r20, 0x8A	; 138
    152a:	52 e4       	ldi	r21, 0x42	; 66
    152c:	c7 01       	movw	r24, r14
    152e:	b6 01       	movw	r22, r12
    1530:	49 d1       	rcall	.+658    	; 0x17c4 <__cmpsf2>
    1532:	88 23       	and	r24, r24
    1534:	2c f0       	brlt	.+10     	; 0x1540 <adjust_tilt_angle+0x9a>
	{
		angle_delta = MIN_ANGLE_DELTA;
	}

	//Verifying angle.	
	current_tilt_angle += angle_delta;
    1536:	d0 93 63 18 	sts	0x1863, r29	; 0x801863 <current_tilt_angle+0x1>
    153a:	c0 93 62 18 	sts	0x1862, r28	; 0x801862 <current_tilt_angle>
    153e:	06 c0       	rjmp	.+12     	; 0x154c <adjust_tilt_angle+0xa6>
	{
		current_tilt_angle = MAX_ANGLE_VAL;
	}
	else if (current_tilt_angle < MIN_ANGLE_VAL)	// Min angle.
	{
		current_tilt_angle = MIN_ANGLE_VAL;
    1540:	85 e4       	ldi	r24, 0x45	; 69
    1542:	90 e0       	ldi	r25, 0x00	; 0
    1544:	90 93 63 18 	sts	0x1863, r25	; 0x801863 <current_tilt_angle+0x1>
    1548:	80 93 62 18 	sts	0x1862, r24	; 0x801862 <current_tilt_angle>
	}
	OCR3B = current_tilt_angle;
    154c:	80 91 62 18 	lds	r24, 0x1862	; 0x801862 <current_tilt_angle>
    1550:	90 91 63 18 	lds	r25, 0x1863	; 0x801863 <current_tilt_angle+0x1>
    1554:	90 93 9b 00 	sts	0x009B, r25	; 0x80009b <__TEXT_REGION_LENGTH__+0x70009b>
    1558:	80 93 9a 00 	sts	0x009A, r24	; 0x80009a <__TEXT_REGION_LENGTH__+0x70009a>
    155c:	df 91       	pop	r29
    155e:	cf 91       	pop	r28
    1560:	ff 90       	pop	r15
    1562:	ef 90       	pop	r14
    1564:	df 90       	pop	r13
    1566:	cf 90       	pop	r12
    1568:	08 95       	ret

0000156a <Cir_Buf_Init>:
/** Initialize values in a Circular Buffer 
	@param	cb		Address of the circular buffer to initialize.
*/
inline void Cir_Buf_Init(volatile circular_buffer *cb)
{
	cb->size = cb->next_postion = cb->start_position = 0;
    156a:	fc 01       	movw	r30, r24
    156c:	e8 59       	subi	r30, 0x98	; 152
    156e:	ff 4f       	sbci	r31, 0xFF	; 255
    1570:	11 82       	std	Z+1, r1	; 0x01
    1572:	10 82       	st	Z, r1
    1574:	32 97       	sbiw	r30, 0x02	; 2
    1576:	11 82       	std	Z+1, r1	; 0x01
    1578:	10 82       	st	Z, r1
    157a:	32 97       	sbiw	r30, 0x02	; 2
    157c:	11 82       	std	Z+1, r1	; 0x01
    157e:	10 82       	st	Z, r1
    1580:	08 95       	ret

00001582 <Cir_Buf_Add>:
	@param	cb		Address of the circular buffer
	@param	byte	Byte to add to buffer
*/
void Cir_Buf_Add(volatile circular_buffer *cb, unsigned char byte)
{	
	*(cb->buffer + cb->next_postion) = byte;
    1582:	fc 01       	movw	r30, r24
    1584:	ea 59       	subi	r30, 0x9A	; 154
    1586:	ff 4f       	sbci	r31, 0xFF	; 255
    1588:	a0 81       	ld	r26, Z
    158a:	b1 81       	ldd	r27, Z+1	; 0x01
    158c:	a8 0f       	add	r26, r24
    158e:	b9 1f       	adc	r27, r25
    1590:	6c 93       	st	X, r22
	
	// Wrap around
	if(++cb->next_postion >= CIR_BUF_SIZE)
    1592:	20 81       	ld	r18, Z
    1594:	31 81       	ldd	r19, Z+1	; 0x01
    1596:	2f 5f       	subi	r18, 0xFF	; 255
    1598:	3f 4f       	sbci	r19, 0xFF	; 255
    159a:	31 83       	std	Z+1, r19	; 0x01
    159c:	20 83       	st	Z, r18
    159e:	24 36       	cpi	r18, 0x64	; 100
    15a0:	31 05       	cpc	r19, r1
    15a2:	10 f0       	brcs	.+4      	; 0x15a8 <Cir_Buf_Add+0x26>
	{
		cb->next_postion = 0;
    15a4:	11 82       	std	Z+1, r1	; 0x01
    15a6:	10 82       	st	Z, r1
	}
	
	// Update size or start position
	if(cb->size < CIR_BUF_SIZE)
    15a8:	fc 01       	movw	r30, r24
    15aa:	ec 59       	subi	r30, 0x9C	; 156
    15ac:	ff 4f       	sbci	r31, 0xFF	; 255
    15ae:	20 81       	ld	r18, Z
    15b0:	31 81       	ldd	r19, Z+1	; 0x01
    15b2:	24 36       	cpi	r18, 0x64	; 100
    15b4:	31 05       	cpc	r19, r1
    15b6:	30 f4       	brcc	.+12     	; 0x15c4 <Cir_Buf_Add+0x42>
	{
		cb->size++;
    15b8:	80 81       	ld	r24, Z
    15ba:	91 81       	ldd	r25, Z+1	; 0x01
    15bc:	01 96       	adiw	r24, 0x01	; 1
    15be:	91 83       	std	Z+1, r25	; 0x01
    15c0:	80 83       	st	Z, r24
    15c2:	08 95       	ret
	}
	else
	{
		cb->start_position++;
    15c4:	fc 01       	movw	r30, r24
    15c6:	e8 59       	subi	r30, 0x98	; 152
    15c8:	ff 4f       	sbci	r31, 0xFF	; 255
    15ca:	80 81       	ld	r24, Z
    15cc:	91 81       	ldd	r25, Z+1	; 0x01
    15ce:	01 96       	adiw	r24, 0x01	; 1
    15d0:	91 83       	std	Z+1, r25	; 0x01
    15d2:	80 83       	st	Z, r24
    15d4:	08 95       	ret

000015d6 <Cir_Buf_Read>:
*/
volatile unsigned char Cir_Buf_Read(volatile circular_buffer* cb)
{	
	volatile unsigned char *byte = NULL;
	
	if(cb->size == 0)
    15d6:	fc 01       	movw	r30, r24
    15d8:	ec 59       	subi	r30, 0x9C	; 156
    15da:	ff 4f       	sbci	r31, 0xFF	; 255
    15dc:	20 81       	ld	r18, Z
    15de:	31 81       	ldd	r19, Z+1	; 0x01
    15e0:	23 2b       	or	r18, r19
    15e2:	e9 f0       	breq	.+58     	; 0x161e <Cir_Buf_Read+0x48>
	{
		return 0;
	}

	byte = cb->buffer + cb->start_position++;
    15e4:	34 96       	adiw	r30, 0x04	; 4
    15e6:	20 81       	ld	r18, Z
    15e8:	31 81       	ldd	r19, Z+1	; 0x01
    15ea:	a9 01       	movw	r20, r18
    15ec:	4f 5f       	subi	r20, 0xFF	; 255
    15ee:	5f 4f       	sbci	r21, 0xFF	; 255
    15f0:	51 83       	std	Z+1, r21	; 0x01
    15f2:	40 83       	st	Z, r20

	if(cb->start_position >= CIR_BUF_SIZE)
    15f4:	40 81       	ld	r20, Z
    15f6:	51 81       	ldd	r21, Z+1	; 0x01
    15f8:	44 36       	cpi	r20, 0x64	; 100
    15fa:	51 05       	cpc	r21, r1
    15fc:	10 f0       	brcs	.+4      	; 0x1602 <Cir_Buf_Read+0x2c>
	{
		cb->start_position = 0;
    15fe:	11 82       	std	Z+1, r1	; 0x01
    1600:	10 82       	st	Z, r1
	}

	cb->size--;
    1602:	fc 01       	movw	r30, r24
    1604:	ec 59       	subi	r30, 0x9C	; 156
    1606:	ff 4f       	sbci	r31, 0xFF	; 255
    1608:	40 81       	ld	r20, Z
    160a:	51 81       	ldd	r21, Z+1	; 0x01
    160c:	41 50       	subi	r20, 0x01	; 1
    160e:	51 09       	sbc	r21, r1
    1610:	51 83       	std	Z+1, r21	; 0x01
    1612:	40 83       	st	Z, r20
	return *byte;
    1614:	fc 01       	movw	r30, r24
    1616:	e2 0f       	add	r30, r18
    1618:	f3 1f       	adc	r31, r19
    161a:	80 81       	ld	r24, Z
    161c:	08 95       	ret
{	
	volatile unsigned char *byte = NULL;
	
	if(cb->size == 0)
	{
		return 0;
    161e:	80 e0       	ldi	r24, 0x00	; 0
		cb->start_position = 0;
	}

	cb->size--;
	return *byte;
    1620:	08 95       	ret

00001622 <init_uart_usb>:
	if((UCSR2A & _BV(RXC2)) == 0)		// If data if not available, return null char.
	{
		return '\0';
	}
	return UDR2;
}
    1622:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7000c5>
    1626:	87 e6       	ldi	r24, 0x67	; 103
    1628:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>
    162c:	e0 ec       	ldi	r30, 0xC0	; 192
    162e:	f0 e0       	ldi	r31, 0x00	; 0
    1630:	80 81       	ld	r24, Z
    1632:	8d 7f       	andi	r24, 0xFD	; 253
    1634:	80 83       	st	Z, r24
    1636:	86 e0       	ldi	r24, 0x06	; 6
    1638:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7000c2>
    163c:	88 e1       	ldi	r24, 0x18	; 24
    163e:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
    1642:	08 95       	ret

00001644 <serial_write_usb>:
    1644:	e0 ec       	ldi	r30, 0xC0	; 192
    1646:	f0 e0       	ldi	r31, 0x00	; 0
    1648:	90 81       	ld	r25, Z
    164a:	95 ff       	sbrs	r25, 5
    164c:	fd cf       	rjmp	.-6      	; 0x1648 <serial_write_usb+0x4>
    164e:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    1652:	08 95       	ret

00001654 <init_uart_bt>:
    1654:	10 92 cd 00 	sts	0x00CD, r1	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7000cd>
    1658:	87 e6       	ldi	r24, 0x67	; 103
    165a:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7000cc>
    165e:	e8 ec       	ldi	r30, 0xC8	; 200
    1660:	f0 e0       	ldi	r31, 0x00	; 0
    1662:	80 e4       	ldi	r24, 0x40	; 64
    1664:	80 83       	st	Z, r24
    1666:	88 ed       	ldi	r24, 0xD8	; 216
    1668:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7000c9>
    166c:	86 e0       	ldi	r24, 0x06	; 6
    166e:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7000ca>
    1672:	80 81       	ld	r24, Z
    1674:	8d 7f       	andi	r24, 0xFD	; 253
    1676:	80 83       	st	Z, r24
    1678:	80 ef       	ldi	r24, 0xF0	; 240
    167a:	97 e1       	ldi	r25, 0x17	; 23
    167c:	76 df       	rcall	.-276    	; 0x156a <Cir_Buf_Init>
    167e:	86 e8       	ldi	r24, 0x86	; 134
    1680:	97 e1       	ldi	r25, 0x17	; 23
    1682:	73 df       	rcall	.-282    	; 0x156a <Cir_Buf_Init>
    1684:	10 92 5f 18 	sts	0x185F, r1	; 0x80185f <rx_data_in_blue_tooth_buffer+0x1>
    1688:	10 92 5e 18 	sts	0x185E, r1	; 0x80185e <rx_data_in_blue_tooth_buffer>
    168c:	08 95       	ret

0000168e <serial_read_bt>:
    168e:	80 91 54 18 	lds	r24, 0x1854	; 0x801854 <blue_tooth_rx_buff+0x64>
    1692:	90 91 55 18 	lds	r25, 0x1855	; 0x801855 <blue_tooth_rx_buff+0x65>
    1696:	89 2b       	or	r24, r25
    1698:	71 f0       	breq	.+28     	; 0x16b6 <serial_read_bt+0x28>
    169a:	80 91 54 18 	lds	r24, 0x1854	; 0x801854 <blue_tooth_rx_buff+0x64>
    169e:	90 91 55 18 	lds	r25, 0x1855	; 0x801855 <blue_tooth_rx_buff+0x65>
    16a2:	01 97       	sbiw	r24, 0x01	; 1
    16a4:	21 f4       	brne	.+8      	; 0x16ae <serial_read_bt+0x20>
    16a6:	10 92 5f 18 	sts	0x185F, r1	; 0x80185f <rx_data_in_blue_tooth_buffer+0x1>
    16aa:	10 92 5e 18 	sts	0x185E, r1	; 0x80185e <rx_data_in_blue_tooth_buffer>
    16ae:	80 ef       	ldi	r24, 0xF0	; 240
    16b0:	97 e1       	ldi	r25, 0x17	; 23
    16b2:	91 cf       	rjmp	.-222    	; 0x15d6 <Cir_Buf_Read>
    16b4:	08 95       	ret
    16b6:	80 e0       	ldi	r24, 0x00	; 0
    16b8:	08 95       	ret

000016ba <__vector_38>:
    16ba:	1f 92       	push	r1
    16bc:	0f 92       	push	r0
    16be:	0f b6       	in	r0, 0x3f	; 63
    16c0:	0f 92       	push	r0
    16c2:	11 24       	eor	r1, r1
    16c4:	0b b6       	in	r0, 0x3b	; 59
    16c6:	0f 92       	push	r0
    16c8:	2f 93       	push	r18
    16ca:	3f 93       	push	r19
    16cc:	4f 93       	push	r20
    16ce:	5f 93       	push	r21
    16d0:	6f 93       	push	r22
    16d2:	7f 93       	push	r23
    16d4:	8f 93       	push	r24
    16d6:	9f 93       	push	r25
    16d8:	af 93       	push	r26
    16da:	bf 93       	push	r27
    16dc:	ef 93       	push	r30
    16de:	ff 93       	push	r31
    16e0:	80 91 ea 17 	lds	r24, 0x17EA	; 0x8017ea <blue_tooth_tx_buff+0x64>
    16e4:	90 91 eb 17 	lds	r25, 0x17EB	; 0x8017eb <blue_tooth_tx_buff+0x65>
    16e8:	89 2b       	or	r24, r25
    16ea:	31 f0       	breq	.+12     	; 0x16f8 <__vector_38+0x3e>
    16ec:	86 e8       	ldi	r24, 0x86	; 134
    16ee:	97 e1       	ldi	r25, 0x17	; 23
    16f0:	72 df       	rcall	.-284    	; 0x15d6 <Cir_Buf_Read>
    16f2:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
    16f6:	09 c0       	rjmp	.+18     	; 0x170a <__vector_38+0x50>
    16f8:	80 91 84 17 	lds	r24, 0x1784	; 0x801784 <blue_tooth_uart_status>
    16fc:	90 91 85 17 	lds	r25, 0x1785	; 0x801785 <blue_tooth_uart_status+0x1>
    1700:	8e 7f       	andi	r24, 0xFE	; 254
    1702:	90 93 85 17 	sts	0x1785, r25	; 0x801785 <blue_tooth_uart_status+0x1>
    1706:	80 93 84 17 	sts	0x1784, r24	; 0x801784 <blue_tooth_uart_status>
    170a:	ff 91       	pop	r31
    170c:	ef 91       	pop	r30
    170e:	bf 91       	pop	r27
    1710:	af 91       	pop	r26
    1712:	9f 91       	pop	r25
    1714:	8f 91       	pop	r24
    1716:	7f 91       	pop	r23
    1718:	6f 91       	pop	r22
    171a:	5f 91       	pop	r21
    171c:	4f 91       	pop	r20
    171e:	3f 91       	pop	r19
    1720:	2f 91       	pop	r18
    1722:	0f 90       	pop	r0
    1724:	0b be       	out	0x3b, r0	; 59
    1726:	0f 90       	pop	r0
    1728:	0f be       	out	0x3f, r0	; 63
    172a:	0f 90       	pop	r0
    172c:	1f 90       	pop	r1
    172e:	18 95       	reti

00001730 <__vector_36>:
    1730:	1f 92       	push	r1
    1732:	0f 92       	push	r0
    1734:	0f b6       	in	r0, 0x3f	; 63
    1736:	0f 92       	push	r0
    1738:	11 24       	eor	r1, r1
    173a:	0b b6       	in	r0, 0x3b	; 59
    173c:	0f 92       	push	r0
    173e:	2f 93       	push	r18
    1740:	3f 93       	push	r19
    1742:	4f 93       	push	r20
    1744:	5f 93       	push	r21
    1746:	6f 93       	push	r22
    1748:	7f 93       	push	r23
    174a:	8f 93       	push	r24
    174c:	9f 93       	push	r25
    174e:	af 93       	push	r26
    1750:	bf 93       	push	r27
    1752:	ef 93       	push	r30
    1754:	ff 93       	push	r31
    1756:	60 91 ce 00 	lds	r22, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
    175a:	80 ef       	ldi	r24, 0xF0	; 240
    175c:	97 e1       	ldi	r25, 0x17	; 23
    175e:	11 df       	rcall	.-478    	; 0x1582 <Cir_Buf_Add>
    1760:	81 e0       	ldi	r24, 0x01	; 1
    1762:	90 e0       	ldi	r25, 0x00	; 0
    1764:	90 93 5f 18 	sts	0x185F, r25	; 0x80185f <rx_data_in_blue_tooth_buffer+0x1>
    1768:	80 93 5e 18 	sts	0x185E, r24	; 0x80185e <rx_data_in_blue_tooth_buffer>
    176c:	ff 91       	pop	r31
    176e:	ef 91       	pop	r30
    1770:	bf 91       	pop	r27
    1772:	af 91       	pop	r26
    1774:	9f 91       	pop	r25
    1776:	8f 91       	pop	r24
    1778:	7f 91       	pop	r23
    177a:	6f 91       	pop	r22
    177c:	5f 91       	pop	r21
    177e:	4f 91       	pop	r20
    1780:	3f 91       	pop	r19
    1782:	2f 91       	pop	r18
    1784:	0f 90       	pop	r0
    1786:	0b be       	out	0x3b, r0	; 59
    1788:	0f 90       	pop	r0
    178a:	0f be       	out	0x3f, r0	; 63
    178c:	0f 90       	pop	r0
    178e:	1f 90       	pop	r1
    1790:	18 95       	reti

00001792 <init_uart_roomba>:
    1792:	10 92 d5 00 	sts	0x00D5, r1	; 0x8000d5 <__TEXT_REGION_LENGTH__+0x7000d5>
    1796:	83 e3       	ldi	r24, 0x33	; 51
    1798:	80 93 d4 00 	sts	0x00D4, r24	; 0x8000d4 <__TEXT_REGION_LENGTH__+0x7000d4>
    179c:	e0 ed       	ldi	r30, 0xD0	; 208
    179e:	f0 e0       	ldi	r31, 0x00	; 0
    17a0:	80 81       	ld	r24, Z
    17a2:	8d 7f       	andi	r24, 0xFD	; 253
    17a4:	80 83       	st	Z, r24
    17a6:	86 e0       	ldi	r24, 0x06	; 6
    17a8:	80 93 d2 00 	sts	0x00D2, r24	; 0x8000d2 <__TEXT_REGION_LENGTH__+0x7000d2>
    17ac:	88 e1       	ldi	r24, 0x18	; 24
    17ae:	80 93 d1 00 	sts	0x00D1, r24	; 0x8000d1 <__TEXT_REGION_LENGTH__+0x7000d1>
    17b2:	08 95       	ret

000017b4 <serial_write_roomba>:

/*============================================================================*/
void serial_write_roomba(unsigned char data_out)
{
	while ((UCSR2A & _BV(UDRE2)) == 0)		// while NOT ready to transmit
    17b4:	e0 ed       	ldi	r30, 0xD0	; 208
    17b6:	f0 e0       	ldi	r31, 0x00	; 0
    17b8:	90 81       	ld	r25, Z
    17ba:	95 ff       	sbrs	r25, 5
    17bc:	fd cf       	rjmp	.-6      	; 0x17b8 <serial_write_roomba+0x4>
	{;;}
	UDR2 = data_out;
    17be:	80 93 d6 00 	sts	0x00D6, r24	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
    17c2:	08 95       	ret

000017c4 <__cmpsf2>:
    17c4:	40 d0       	rcall	.+128    	; 0x1846 <__fp_cmp>
    17c6:	08 f4       	brcc	.+2      	; 0x17ca <__cmpsf2+0x6>
    17c8:	81 e0       	ldi	r24, 0x01	; 1
    17ca:	08 95       	ret

000017cc <__floatunsisf>:
    17cc:	e8 94       	clt
    17ce:	09 c0       	rjmp	.+18     	; 0x17e2 <__floatsisf+0x12>

000017d0 <__floatsisf>:
    17d0:	97 fb       	bst	r25, 7
    17d2:	3e f4       	brtc	.+14     	; 0x17e2 <__floatsisf+0x12>
    17d4:	90 95       	com	r25
    17d6:	80 95       	com	r24
    17d8:	70 95       	com	r23
    17da:	61 95       	neg	r22
    17dc:	7f 4f       	sbci	r23, 0xFF	; 255
    17de:	8f 4f       	sbci	r24, 0xFF	; 255
    17e0:	9f 4f       	sbci	r25, 0xFF	; 255
    17e2:	99 23       	and	r25, r25
    17e4:	a9 f0       	breq	.+42     	; 0x1810 <__floatsisf+0x40>
    17e6:	f9 2f       	mov	r31, r25
    17e8:	96 e9       	ldi	r25, 0x96	; 150
    17ea:	bb 27       	eor	r27, r27
    17ec:	93 95       	inc	r25
    17ee:	f6 95       	lsr	r31
    17f0:	87 95       	ror	r24
    17f2:	77 95       	ror	r23
    17f4:	67 95       	ror	r22
    17f6:	b7 95       	ror	r27
    17f8:	f1 11       	cpse	r31, r1
    17fa:	f8 cf       	rjmp	.-16     	; 0x17ec <__floatsisf+0x1c>
    17fc:	fa f4       	brpl	.+62     	; 0x183c <__floatsisf+0x6c>
    17fe:	bb 0f       	add	r27, r27
    1800:	11 f4       	brne	.+4      	; 0x1806 <__floatsisf+0x36>
    1802:	60 ff       	sbrs	r22, 0
    1804:	1b c0       	rjmp	.+54     	; 0x183c <__floatsisf+0x6c>
    1806:	6f 5f       	subi	r22, 0xFF	; 255
    1808:	7f 4f       	sbci	r23, 0xFF	; 255
    180a:	8f 4f       	sbci	r24, 0xFF	; 255
    180c:	9f 4f       	sbci	r25, 0xFF	; 255
    180e:	16 c0       	rjmp	.+44     	; 0x183c <__floatsisf+0x6c>
    1810:	88 23       	and	r24, r24
    1812:	11 f0       	breq	.+4      	; 0x1818 <__floatsisf+0x48>
    1814:	96 e9       	ldi	r25, 0x96	; 150
    1816:	11 c0       	rjmp	.+34     	; 0x183a <__floatsisf+0x6a>
    1818:	77 23       	and	r23, r23
    181a:	21 f0       	breq	.+8      	; 0x1824 <__floatsisf+0x54>
    181c:	9e e8       	ldi	r25, 0x8E	; 142
    181e:	87 2f       	mov	r24, r23
    1820:	76 2f       	mov	r23, r22
    1822:	05 c0       	rjmp	.+10     	; 0x182e <__floatsisf+0x5e>
    1824:	66 23       	and	r22, r22
    1826:	71 f0       	breq	.+28     	; 0x1844 <__floatsisf+0x74>
    1828:	96 e8       	ldi	r25, 0x86	; 134
    182a:	86 2f       	mov	r24, r22
    182c:	70 e0       	ldi	r23, 0x00	; 0
    182e:	60 e0       	ldi	r22, 0x00	; 0
    1830:	2a f0       	brmi	.+10     	; 0x183c <__floatsisf+0x6c>
    1832:	9a 95       	dec	r25
    1834:	66 0f       	add	r22, r22
    1836:	77 1f       	adc	r23, r23
    1838:	88 1f       	adc	r24, r24
    183a:	da f7       	brpl	.-10     	; 0x1832 <__floatsisf+0x62>
    183c:	88 0f       	add	r24, r24
    183e:	96 95       	lsr	r25
    1840:	87 95       	ror	r24
    1842:	97 f9       	bld	r25, 7
    1844:	08 95       	ret

00001846 <__fp_cmp>:
    1846:	99 0f       	add	r25, r25
    1848:	00 08       	sbc	r0, r0
    184a:	55 0f       	add	r21, r21
    184c:	aa 0b       	sbc	r26, r26
    184e:	e0 e8       	ldi	r30, 0x80	; 128
    1850:	fe ef       	ldi	r31, 0xFE	; 254
    1852:	16 16       	cp	r1, r22
    1854:	17 06       	cpc	r1, r23
    1856:	e8 07       	cpc	r30, r24
    1858:	f9 07       	cpc	r31, r25
    185a:	c0 f0       	brcs	.+48     	; 0x188c <__fp_cmp+0x46>
    185c:	12 16       	cp	r1, r18
    185e:	13 06       	cpc	r1, r19
    1860:	e4 07       	cpc	r30, r20
    1862:	f5 07       	cpc	r31, r21
    1864:	98 f0       	brcs	.+38     	; 0x188c <__fp_cmp+0x46>
    1866:	62 1b       	sub	r22, r18
    1868:	73 0b       	sbc	r23, r19
    186a:	84 0b       	sbc	r24, r20
    186c:	95 0b       	sbc	r25, r21
    186e:	39 f4       	brne	.+14     	; 0x187e <__fp_cmp+0x38>
    1870:	0a 26       	eor	r0, r26
    1872:	61 f0       	breq	.+24     	; 0x188c <__fp_cmp+0x46>
    1874:	23 2b       	or	r18, r19
    1876:	24 2b       	or	r18, r20
    1878:	25 2b       	or	r18, r21
    187a:	21 f4       	brne	.+8      	; 0x1884 <__fp_cmp+0x3e>
    187c:	08 95       	ret
    187e:	0a 26       	eor	r0, r26
    1880:	09 f4       	brne	.+2      	; 0x1884 <__fp_cmp+0x3e>
    1882:	a1 40       	sbci	r26, 0x01	; 1
    1884:	a6 95       	lsr	r26
    1886:	8f ef       	ldi	r24, 0xFF	; 255
    1888:	81 1d       	adc	r24, r1
    188a:	81 1d       	adc	r24, r1
    188c:	08 95       	ret

0000188e <__gesf2>:
    188e:	db df       	rcall	.-74     	; 0x1846 <__fp_cmp>
    1890:	08 f4       	brcc	.+2      	; 0x1894 <__gesf2+0x6>
    1892:	8f ef       	ldi	r24, 0xFF	; 255
    1894:	08 95       	ret

00001896 <__tablejump2__>:
    1896:	ee 0f       	add	r30, r30
    1898:	ff 1f       	adc	r31, r31
    189a:	88 1f       	adc	r24, r24
    189c:	8b bf       	out	0x3b, r24	; 59
    189e:	07 90       	elpm	r0, Z+
    18a0:	f6 91       	elpm	r31, Z
    18a2:	e0 2d       	mov	r30, r0
    18a4:	19 94       	eijmp

000018a6 <atoi>:
    18a6:	fc 01       	movw	r30, r24
    18a8:	88 27       	eor	r24, r24
    18aa:	99 27       	eor	r25, r25
    18ac:	e8 94       	clt
    18ae:	21 91       	ld	r18, Z+
    18b0:	20 32       	cpi	r18, 0x20	; 32
    18b2:	e9 f3       	breq	.-6      	; 0x18ae <atoi+0x8>
    18b4:	29 30       	cpi	r18, 0x09	; 9
    18b6:	10 f0       	brcs	.+4      	; 0x18bc <atoi+0x16>
    18b8:	2e 30       	cpi	r18, 0x0E	; 14
    18ba:	c8 f3       	brcs	.-14     	; 0x18ae <atoi+0x8>
    18bc:	2b 32       	cpi	r18, 0x2B	; 43
    18be:	39 f0       	breq	.+14     	; 0x18ce <atoi+0x28>
    18c0:	2d 32       	cpi	r18, 0x2D	; 45
    18c2:	31 f4       	brne	.+12     	; 0x18d0 <atoi+0x2a>
    18c4:	68 94       	set
    18c6:	03 c0       	rjmp	.+6      	; 0x18ce <atoi+0x28>
    18c8:	0b d0       	rcall	.+22     	; 0x18e0 <__mulhi_const_10>
    18ca:	82 0f       	add	r24, r18
    18cc:	91 1d       	adc	r25, r1
    18ce:	21 91       	ld	r18, Z+
    18d0:	20 53       	subi	r18, 0x30	; 48
    18d2:	2a 30       	cpi	r18, 0x0A	; 10
    18d4:	c8 f3       	brcs	.-14     	; 0x18c8 <atoi+0x22>
    18d6:	1e f4       	brtc	.+6      	; 0x18de <atoi+0x38>
    18d8:	90 95       	com	r25
    18da:	81 95       	neg	r24
    18dc:	9f 4f       	sbci	r25, 0xFF	; 255
    18de:	08 95       	ret

000018e0 <__mulhi_const_10>:
    18e0:	7a e0       	ldi	r23, 0x0A	; 10
    18e2:	97 9f       	mul	r25, r23
    18e4:	90 2d       	mov	r25, r0
    18e6:	87 9f       	mul	r24, r23
    18e8:	80 2d       	mov	r24, r0
    18ea:	91 0d       	add	r25, r1
    18ec:	11 24       	eor	r1, r1
    18ee:	08 95       	ret

000018f0 <_exit>:
    18f0:	f8 94       	cli

000018f2 <__stop_program>:
    18f2:	ff cf       	rjmp	.-2      	; 0x18f2 <__stop_program>
