
project_3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00800200  000018f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000187c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00001b84  00800200  00800200  000018f0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000018f0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001920  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002c0  00000000  00000000  00001960  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000313c  00000000  00000000  00001c20  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000166c  00000000  00000000  00004d5c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001b28  00000000  00000000  000063c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000007e4  00000000  00000000  00007ef0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000f69  00000000  00000000  000086d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000018e4  00000000  00000000  0000963d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002a0  00000000  00000000  0000af21  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	7a c0       	rjmp	.+244    	; 0xf6 <__ctors_end>
       2:	00 00       	nop
       4:	8b c0       	rjmp	.+278    	; 0x11c <__bad_interrupt>
       6:	00 00       	nop
       8:	89 c0       	rjmp	.+274    	; 0x11c <__bad_interrupt>
       a:	00 00       	nop
       c:	87 c0       	rjmp	.+270    	; 0x11c <__bad_interrupt>
       e:	00 00       	nop
      10:	85 c0       	rjmp	.+266    	; 0x11c <__bad_interrupt>
      12:	00 00       	nop
      14:	83 c0       	rjmp	.+262    	; 0x11c <__bad_interrupt>
      16:	00 00       	nop
      18:	81 c0       	rjmp	.+258    	; 0x11c <__bad_interrupt>
      1a:	00 00       	nop
      1c:	7f c0       	rjmp	.+254    	; 0x11c <__bad_interrupt>
      1e:	00 00       	nop
      20:	7d c0       	rjmp	.+250    	; 0x11c <__bad_interrupt>
      22:	00 00       	nop
      24:	7b c0       	rjmp	.+246    	; 0x11c <__bad_interrupt>
      26:	00 00       	nop
      28:	79 c0       	rjmp	.+242    	; 0x11c <__bad_interrupt>
      2a:	00 00       	nop
      2c:	77 c0       	rjmp	.+238    	; 0x11c <__bad_interrupt>
      2e:	00 00       	nop
      30:	75 c0       	rjmp	.+234    	; 0x11c <__bad_interrupt>
      32:	00 00       	nop
      34:	73 c0       	rjmp	.+230    	; 0x11c <__bad_interrupt>
      36:	00 00       	nop
      38:	71 c0       	rjmp	.+226    	; 0x11c <__bad_interrupt>
      3a:	00 00       	nop
      3c:	6f c0       	rjmp	.+222    	; 0x11c <__bad_interrupt>
      3e:	00 00       	nop
      40:	6d c0       	rjmp	.+218    	; 0x11c <__bad_interrupt>
      42:	00 00       	nop
      44:	15 c6       	rjmp	.+3114   	; 0xc70 <__vector_17>
      46:	00 00       	nop
      48:	69 c0       	rjmp	.+210    	; 0x11c <__bad_interrupt>
      4a:	00 00       	nop
      4c:	67 c0       	rjmp	.+206    	; 0x11c <__bad_interrupt>
      4e:	00 00       	nop
      50:	65 c0       	rjmp	.+202    	; 0x11c <__bad_interrupt>
      52:	00 00       	nop
      54:	63 c0       	rjmp	.+198    	; 0x11c <__bad_interrupt>
      56:	00 00       	nop
      58:	61 c0       	rjmp	.+194    	; 0x11c <__bad_interrupt>
      5a:	00 00       	nop
      5c:	5f c0       	rjmp	.+190    	; 0x11c <__bad_interrupt>
      5e:	00 00       	nop
      60:	5d c0       	rjmp	.+186    	; 0x11c <__bad_interrupt>
      62:	00 00       	nop
      64:	5b c0       	rjmp	.+182    	; 0x11c <__bad_interrupt>
      66:	00 00       	nop
      68:	59 c0       	rjmp	.+178    	; 0x11c <__bad_interrupt>
      6a:	00 00       	nop
      6c:	57 c0       	rjmp	.+174    	; 0x11c <__bad_interrupt>
      6e:	00 00       	nop
      70:	55 c0       	rjmp	.+170    	; 0x11c <__bad_interrupt>
      72:	00 00       	nop
      74:	53 c0       	rjmp	.+166    	; 0x11c <__bad_interrupt>
      76:	00 00       	nop
      78:	51 c0       	rjmp	.+162    	; 0x11c <__bad_interrupt>
      7a:	00 00       	nop
      7c:	4f c0       	rjmp	.+158    	; 0x11c <__bad_interrupt>
      7e:	00 00       	nop
      80:	4d c0       	rjmp	.+154    	; 0x11c <__bad_interrupt>
      82:	00 00       	nop
      84:	4b c0       	rjmp	.+150    	; 0x11c <__bad_interrupt>
      86:	00 00       	nop
      88:	49 c0       	rjmp	.+146    	; 0x11c <__bad_interrupt>
      8a:	00 00       	nop
      8c:	47 c0       	rjmp	.+142    	; 0x11c <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 e7 0a 	jmp	0x15ce	; 0x15ce <__vector_36>
      94:	43 c0       	rjmp	.+134    	; 0x11c <__bad_interrupt>
      96:	00 00       	nop
      98:	0c 94 ac 0a 	jmp	0x1558	; 0x1558 <__vector_38>
      9c:	3f c0       	rjmp	.+126    	; 0x11c <__bad_interrupt>
      9e:	00 00       	nop
      a0:	3d c0       	rjmp	.+122    	; 0x11c <__bad_interrupt>
      a2:	00 00       	nop
      a4:	3b c0       	rjmp	.+118    	; 0x11c <__bad_interrupt>
      a6:	00 00       	nop
      a8:	39 c0       	rjmp	.+114    	; 0x11c <__bad_interrupt>
      aa:	00 00       	nop
      ac:	37 c0       	rjmp	.+110    	; 0x11c <__bad_interrupt>
      ae:	00 00       	nop
      b0:	35 c0       	rjmp	.+106    	; 0x11c <__bad_interrupt>
      b2:	00 00       	nop
      b4:	33 c0       	rjmp	.+102    	; 0x11c <__bad_interrupt>
      b6:	00 00       	nop
      b8:	31 c0       	rjmp	.+98     	; 0x11c <__bad_interrupt>
      ba:	00 00       	nop
      bc:	2f c0       	rjmp	.+94     	; 0x11c <__bad_interrupt>
      be:	00 00       	nop
      c0:	2d c0       	rjmp	.+90     	; 0x11c <__bad_interrupt>
      c2:	00 00       	nop
      c4:	2b c0       	rjmp	.+86     	; 0x11c <__bad_interrupt>
      c6:	00 00       	nop
      c8:	29 c0       	rjmp	.+82     	; 0x11c <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0c 94 4e 0b 	jmp	0x169c	; 0x169c <__vector_51>
      d0:	25 c0       	rjmp	.+74     	; 0x11c <__bad_interrupt>
      d2:	00 00       	nop
      d4:	23 c0       	rjmp	.+70     	; 0x11c <__bad_interrupt>
      d6:	00 00       	nop
      d8:	21 c0       	rjmp	.+66     	; 0x11c <__bad_interrupt>
      da:	00 00       	nop
      dc:	1f c0       	rjmp	.+62     	; 0x11c <__bad_interrupt>
      de:	00 00       	nop
      e0:	1d c0       	rjmp	.+58     	; 0x11c <__bad_interrupt>
      e2:	00 00       	nop
      e4:	d5 04       	cpc	r13, r5
      e6:	b2 04       	cpc	r11, r2
      e8:	d5 04       	cpc	r13, r5
      ea:	e1 04       	cpc	r14, r1
      ec:	d8 04       	cpc	r13, r8
      ee:	ee 04       	cpc	r14, r14
      f0:	f4 04       	cpc	r15, r4
      f2:	01 05       	cpc	r16, r1
      f4:	03 05       	cpc	r16, r3

000000f6 <__ctors_end>:
      f6:	11 24       	eor	r1, r1
      f8:	1f be       	out	0x3f, r1	; 63
      fa:	cf ef       	ldi	r28, 0xFF	; 255
      fc:	d1 e2       	ldi	r29, 0x21	; 33
      fe:	de bf       	out	0x3e, r29	; 62
     100:	cd bf       	out	0x3d, r28	; 61
     102:	00 e0       	ldi	r16, 0x00	; 0
     104:	0c bf       	out	0x3c, r16	; 60

00000106 <__do_clear_bss>:
     106:	2d e1       	ldi	r18, 0x1D	; 29
     108:	a0 e0       	ldi	r26, 0x00	; 0
     10a:	b2 e0       	ldi	r27, 0x02	; 2
     10c:	01 c0       	rjmp	.+2      	; 0x110 <.do_clear_bss_start>

0000010e <.do_clear_bss_loop>:
     10e:	1d 92       	st	X+, r1

00000110 <.do_clear_bss_start>:
     110:	a4 38       	cpi	r26, 0x84	; 132
     112:	b2 07       	cpc	r27, r18
     114:	e1 f7       	brne	.-8      	; 0x10e <.do_clear_bss_loop>
     116:	e9 d5       	rcall	.+3026   	; 0xcea <main>
     118:	0c 94 3c 0c 	jmp	0x1878	; 0x1878 <_exit>

0000011c <__bad_interrupt>:
     11c:	71 cf       	rjmp	.-286    	; 0x0 <__vectors>

0000011e <CSwitch>:
Exit_Kernel:
        /*
          * This is the "top" half of CSwitch(), generally called by the kernel.
          * Assume I = 0, i.e., all interrupts are disabled.
          */
        SAVECTX
     11e:	0f 92       	push	r0
     120:	1f 92       	push	r1
     122:	2f 92       	push	r2
     124:	3f 92       	push	r3
     126:	4f 92       	push	r4
     128:	5f 92       	push	r5
     12a:	6f 92       	push	r6
     12c:	7f 92       	push	r7
     12e:	8f 92       	push	r8
     130:	9f 92       	push	r9
     132:	af 92       	push	r10
     134:	bf 92       	push	r11
     136:	cf 92       	push	r12
     138:	df 92       	push	r13
     13a:	ef 92       	push	r14
     13c:	ff 92       	push	r15
     13e:	0f 93       	push	r16
     140:	1f 93       	push	r17
     142:	2f 93       	push	r18
     144:	3f 93       	push	r19
     146:	4f 93       	push	r20
     148:	5f 93       	push	r21
     14a:	6f 93       	push	r22
     14c:	7f 93       	push	r23
     14e:	8f 93       	push	r24
     150:	9f 93       	push	r25
     152:	af 93       	push	r26
     154:	bf 93       	push	r27
     156:	cf 93       	push	r28
     158:	df 93       	push	r29
     15a:	ef 93       	push	r30
     15c:	ff 93       	push	r31
     15e:	fc b7       	in	r31, 0x3c	; 60
     160:	ff 93       	push	r31
     162:	0f b7       	in	r16, 0x3f	; 63
     164:	0f 93       	push	r16
        /*
          * Now, we have saved the kernel's context.
          * Save the current H/W stack pointer into KernelSp.
          */
        in   r30, SPL
     166:	ed b7       	in	r30, 0x3d	; 61
        in   r31, SPH
     168:	fe b7       	in	r31, 0x3e	; 62
        sts  KernelSp, r30
     16a:	e0 93 7a 1d 	sts	0x1D7A, r30	; 0x801d7a <KernelSp>
        sts  KernelSp+1, r31
     16e:	f0 93 7b 1d 	sts	0x1D7B, r31	; 0x801d7b <KernelSp+0x1>
        /*
          * We are now ready to restore Cp's context, i.e.,
          * switching the H/W stack pointer to CurrentSp.
          */
        lds  r30, CurrentSp
     172:	e0 91 78 1d 	lds	r30, 0x1D78	; 0x801d78 <CurrentSp>
        lds  r31, CurrentSp+1
     176:	f0 91 79 1d 	lds	r31, 0x1D79	; 0x801d79 <CurrentSp+0x1>
        out  SPL, r30
     17a:	ed bf       	out	0x3d, r30	; 61
        out  SPH, r31
     17c:	fe bf       	out	0x3e, r31	; 62
        /*
          * We are now executing in Cp's stack.
          * Note: at the bottom of the Cp's context is its return address.
          */
        RESTORECTX
     17e:	0f 91       	pop	r16
     180:	0f bf       	out	0x3f, r16	; 63
     182:	ff 91       	pop	r31
     184:	fc bf       	out	0x3c, r31	; 60
     186:	ff 91       	pop	r31
     188:	ef 91       	pop	r30
     18a:	df 91       	pop	r29
     18c:	cf 91       	pop	r28
     18e:	bf 91       	pop	r27
     190:	af 91       	pop	r26
     192:	9f 91       	pop	r25
     194:	8f 91       	pop	r24
     196:	7f 91       	pop	r23
     198:	6f 91       	pop	r22
     19a:	5f 91       	pop	r21
     19c:	4f 91       	pop	r20
     19e:	3f 91       	pop	r19
     1a0:	2f 91       	pop	r18
     1a2:	1f 91       	pop	r17
     1a4:	0f 91       	pop	r16
     1a6:	ff 90       	pop	r15
     1a8:	ef 90       	pop	r14
     1aa:	df 90       	pop	r13
     1ac:	cf 90       	pop	r12
     1ae:	bf 90       	pop	r11
     1b0:	af 90       	pop	r10
     1b2:	9f 90       	pop	r9
     1b4:	8f 90       	pop	r8
     1b6:	7f 90       	pop	r7
     1b8:	6f 90       	pop	r6
     1ba:	5f 90       	pop	r5
     1bc:	4f 90       	pop	r4
     1be:	3f 90       	pop	r3
     1c0:	2f 90       	pop	r2
     1c2:	1f 90       	pop	r1
     1c4:	0f 90       	pop	r0
        reti         /* re-enable all global interrupts */
     1c6:	18 95       	reti

000001c8 <Enter_Kernel>:
Enter_Kernel:
        /*
          * This is the "bottom" half of CSwitch(). We are still executing in
          * Cp's context.
          */
        SAVECTX
     1c8:	0f 92       	push	r0
     1ca:	1f 92       	push	r1
     1cc:	2f 92       	push	r2
     1ce:	3f 92       	push	r3
     1d0:	4f 92       	push	r4
     1d2:	5f 92       	push	r5
     1d4:	6f 92       	push	r6
     1d6:	7f 92       	push	r7
     1d8:	8f 92       	push	r8
     1da:	9f 92       	push	r9
     1dc:	af 92       	push	r10
     1de:	bf 92       	push	r11
     1e0:	cf 92       	push	r12
     1e2:	df 92       	push	r13
     1e4:	ef 92       	push	r14
     1e6:	ff 92       	push	r15
     1e8:	0f 93       	push	r16
     1ea:	1f 93       	push	r17
     1ec:	2f 93       	push	r18
     1ee:	3f 93       	push	r19
     1f0:	4f 93       	push	r20
     1f2:	5f 93       	push	r21
     1f4:	6f 93       	push	r22
     1f6:	7f 93       	push	r23
     1f8:	8f 93       	push	r24
     1fa:	9f 93       	push	r25
     1fc:	af 93       	push	r26
     1fe:	bf 93       	push	r27
     200:	cf 93       	push	r28
     202:	df 93       	push	r29
     204:	ef 93       	push	r30
     206:	ff 93       	push	r31
     208:	fc b7       	in	r31, 0x3c	; 60
     20a:	ff 93       	push	r31
     20c:	0f b7       	in	r16, 0x3f	; 63
     20e:	0f 93       	push	r16
        /*
          * Now, we have saved the Cp's context.
          * Save the current H/W stack pointer into CurrentSp.
          */
        in   r30, SPL
     210:	ed b7       	in	r30, 0x3d	; 61
        in   r31, SPH
     212:	fe b7       	in	r31, 0x3e	; 62
        sts  CurrentSp, r30
     214:	e0 93 78 1d 	sts	0x1D78, r30	; 0x801d78 <CurrentSp>
        sts  CurrentSp+1, r31
     218:	f0 93 79 1d 	sts	0x1D79, r31	; 0x801d79 <CurrentSp+0x1>
        /*
          * We are now ready to restore kernel's context, i.e.,
          * switching the H/W stack pointer back to KernelSp.
          */
        lds  r30, KernelSp
     21c:	e0 91 7a 1d 	lds	r30, 0x1D7A	; 0x801d7a <KernelSp>
        lds  r31, KernelSp+1
     220:	f0 91 7b 1d 	lds	r31, 0x1D7B	; 0x801d7b <KernelSp+0x1>
        out  SPL, r30
     224:	ed bf       	out	0x3d, r30	; 61
        out  SPH, r31
     226:	fe bf       	out	0x3e, r31	; 62
        /*
          * We are now executing in kernel's stack.
          */
       RESTORECTX
     228:	0f 91       	pop	r16
     22a:	0f bf       	out	0x3f, r16	; 63
     22c:	ff 91       	pop	r31
     22e:	fc bf       	out	0x3c, r31	; 60
     230:	ff 91       	pop	r31
     232:	ef 91       	pop	r30
     234:	df 91       	pop	r29
     236:	cf 91       	pop	r28
     238:	bf 91       	pop	r27
     23a:	af 91       	pop	r26
     23c:	9f 91       	pop	r25
     23e:	8f 91       	pop	r24
     240:	7f 91       	pop	r23
     242:	6f 91       	pop	r22
     244:	5f 91       	pop	r21
     246:	4f 91       	pop	r20
     248:	3f 91       	pop	r19
     24a:	2f 91       	pop	r18
     24c:	1f 91       	pop	r17
     24e:	0f 91       	pop	r16
     250:	ff 90       	pop	r15
     252:	ef 90       	pop	r14
     254:	df 90       	pop	r13
     256:	cf 90       	pop	r12
     258:	bf 90       	pop	r11
     25a:	af 90       	pop	r10
     25c:	9f 90       	pop	r9
     25e:	8f 90       	pop	r8
     260:	7f 90       	pop	r7
     262:	6f 90       	pop	r6
     264:	5f 90       	pop	r5
     266:	4f 90       	pop	r4
     268:	3f 90       	pop	r3
     26a:	2f 90       	pop	r2
     26c:	1f 90       	pop	r1
     26e:	0f 90       	pop	r0
        /*
          * We are ready to return to the caller of CSwitch() (or Exit_Kernel()).
          * Note: We should NOT re-enable interrupts while kernel is running.
          *         Therefore, we use "ret", and not "reti".
          */
       ret
     270:	08 95       	ret

00000272 <Idle_Task>:
unsigned int Now()
{
	unsigned int temp_time = TCNT1;
	unsigned int time = (10 * current_tick) + (temp_time / 2000);
	return time;
}
     272:	ff cf       	rjmp	.-2      	; 0x272 <Idle_Task>

00000274 <Task_Terminate>:
     274:	80 91 b4 04 	lds	r24, 0x04B4	; 0x8004b4 <KernelActive>
     278:	90 91 b5 04 	lds	r25, 0x04B5	; 0x8004b5 <KernelActive+0x1>
     27c:	89 2b       	or	r24, r25
     27e:	69 f0       	breq	.+26     	; 0x29a <Task_Terminate+0x26>
     280:	f8 94       	cli
     282:	e0 91 b8 04 	lds	r30, 0x04B8	; 0x8004b8 <Cp>
     286:	f0 91 b9 04 	lds	r31, 0x04B9	; 0x8004b9 <Cp+0x1>
     28a:	e8 5f       	subi	r30, 0xF8	; 248
     28c:	fe 4f       	sbci	r31, 0xFE	; 254
     28e:	83 e0       	ldi	r24, 0x03	; 3
     290:	80 83       	st	Z, r24
     292:	80 e1       	ldi	r24, 0x10	; 16
     294:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <__TEXT_REGION_LENGTH__+0x70010b>
     298:	97 cf       	rjmp	.-210    	; 0x1c8 <Enter_Kernel>
     29a:	08 95       	ret

0000029c <enqueue>:
     29c:	fc 01       	movw	r30, r24
     29e:	80 a1       	ldd	r24, Z+32	; 0x20
     2a0:	91 a1       	ldd	r25, Z+33	; 0x21
     2a2:	40 97       	sbiw	r24, 0x10	; 16
     2a4:	19 f4       	brne	.+6      	; 0x2ac <enqueue+0x10>
     2a6:	8c e0       	ldi	r24, 0x0C	; 12
     2a8:	88 b9       	out	0x08, r24	; 8
     2aa:	ff cf       	rjmp	.-2      	; 0x2aa <enqueue+0xe>
     2ac:	a4 a1       	ldd	r26, Z+36	; 0x24
     2ae:	b5 a1       	ldd	r27, Z+37	; 0x25
     2b0:	aa 0f       	add	r26, r26
     2b2:	bb 1f       	adc	r27, r27
     2b4:	ae 0f       	add	r26, r30
     2b6:	bf 1f       	adc	r27, r31
     2b8:	11 96       	adiw	r26, 0x01	; 1
     2ba:	7c 93       	st	X, r23
     2bc:	6e 93       	st	-X, r22
     2be:	80 a1       	ldd	r24, Z+32	; 0x20
     2c0:	91 a1       	ldd	r25, Z+33	; 0x21
     2c2:	01 96       	adiw	r24, 0x01	; 1
     2c4:	91 a3       	std	Z+33, r25	; 0x21
     2c6:	80 a3       	std	Z+32, r24	; 0x20
     2c8:	84 a1       	ldd	r24, Z+36	; 0x24
     2ca:	95 a1       	ldd	r25, Z+37	; 0x25
     2cc:	01 96       	adiw	r24, 0x01	; 1
     2ce:	60 e1       	ldi	r22, 0x10	; 16
     2d0:	70 e0       	ldi	r23, 0x00	; 0
     2d2:	0e 94 fc 0b 	call	0x17f8	; 0x17f8 <__divmodhi4>
     2d6:	95 a3       	std	Z+37, r25	; 0x25
     2d8:	84 a3       	std	Z+36, r24	; 0x24
     2da:	08 95       	ret

000002dc <dequeue>:
     2dc:	cf 93       	push	r28
     2de:	df 93       	push	r29
     2e0:	fc 01       	movw	r30, r24
     2e2:	80 a1       	ldd	r24, Z+32	; 0x20
     2e4:	91 a1       	ldd	r25, Z+33	; 0x21
     2e6:	89 2b       	or	r24, r25
     2e8:	19 f4       	brne	.+6      	; 0x2f0 <dequeue+0x14>
     2ea:	8d e0       	ldi	r24, 0x0D	; 13
     2ec:	88 b9       	out	0x08, r24	; 8
     2ee:	ff cf       	rjmp	.-2      	; 0x2ee <dequeue+0x12>
     2f0:	a2 a1       	ldd	r26, Z+34	; 0x22
     2f2:	b3 a1       	ldd	r27, Z+35	; 0x23
     2f4:	aa 0f       	add	r26, r26
     2f6:	bb 1f       	adc	r27, r27
     2f8:	ae 0f       	add	r26, r30
     2fa:	bf 1f       	adc	r27, r31
     2fc:	cd 91       	ld	r28, X+
     2fe:	dc 91       	ld	r29, X
     300:	20 a1       	ldd	r18, Z+32	; 0x20
     302:	31 a1       	ldd	r19, Z+33	; 0x21
     304:	21 50       	subi	r18, 0x01	; 1
     306:	31 09       	sbc	r19, r1
     308:	31 a3       	std	Z+33, r19	; 0x21
     30a:	20 a3       	std	Z+32, r18	; 0x20
     30c:	22 a1       	ldd	r18, Z+34	; 0x22
     30e:	33 a1       	ldd	r19, Z+35	; 0x23
     310:	c9 01       	movw	r24, r18
     312:	01 96       	adiw	r24, 0x01	; 1
     314:	60 e1       	ldi	r22, 0x10	; 16
     316:	70 e0       	ldi	r23, 0x00	; 0
     318:	0e 94 fc 0b 	call	0x17f8	; 0x17f8 <__divmodhi4>
     31c:	93 a3       	std	Z+35, r25	; 0x23
     31e:	82 a3       	std	Z+34, r24	; 0x22
     320:	ce 01       	movw	r24, r28
     322:	df 91       	pop	r29
     324:	cf 91       	pop	r28
     326:	08 95       	ret

00000328 <Dispatch>:
     328:	80 91 02 05 	lds	r24, 0x0502	; 0x800502 <ReadyQSystem+0x20>
     32c:	90 91 03 05 	lds	r25, 0x0503	; 0x800503 <ReadyQSystem+0x21>
     330:	18 16       	cp	r1, r24
     332:	19 06       	cpc	r1, r25
     334:	1c f4       	brge	.+6      	; 0x33c <Dispatch+0x14>
     336:	82 ee       	ldi	r24, 0xE2	; 226
     338:	94 e0       	ldi	r25, 0x04	; 4
     33a:	1d c0       	rjmp	.+58     	; 0x376 <Dispatch+0x4e>
     33c:	80 91 28 05 	lds	r24, 0x0528	; 0x800528 <ReadyQTime+0x20>
     340:	90 91 29 05 	lds	r25, 0x0529	; 0x800529 <ReadyQTime+0x21>
     344:	18 16       	cp	r1, r24
     346:	19 06       	cpc	r1, r25
     348:	1c f4       	brge	.+6      	; 0x350 <Dispatch+0x28>
     34a:	88 e0       	ldi	r24, 0x08	; 8
     34c:	95 e0       	ldi	r25, 0x05	; 5
     34e:	13 c0       	rjmp	.+38     	; 0x376 <Dispatch+0x4e>
     350:	80 91 4e 05 	lds	r24, 0x054E	; 0x80054e <ReadyQRR+0x20>
     354:	90 91 4f 05 	lds	r25, 0x054F	; 0x80054f <ReadyQRR+0x21>
     358:	18 16       	cp	r1, r24
     35a:	19 06       	cpc	r1, r25
     35c:	1c f4       	brge	.+6      	; 0x364 <Dispatch+0x3c>
     35e:	8e e2       	ldi	r24, 0x2E	; 46
     360:	95 e0       	ldi	r25, 0x05	; 5
     362:	09 c0       	rjmp	.+18     	; 0x376 <Dispatch+0x4e>
     364:	80 91 dc 04 	lds	r24, 0x04DC	; 0x8004dc <ReadyQIdle+0x20>
     368:	90 91 dd 04 	lds	r25, 0x04DD	; 0x8004dd <ReadyQIdle+0x21>
     36c:	18 16       	cp	r1, r24
     36e:	19 06       	cpc	r1, r25
     370:	9c f4       	brge	.+38     	; 0x398 <Dispatch+0x70>
     372:	8c eb       	ldi	r24, 0xBC	; 188
     374:	94 e0       	ldi	r25, 0x04	; 4
     376:	b2 df       	rcall	.-156    	; 0x2dc <dequeue>
     378:	90 93 b9 04 	sts	0x04B9, r25	; 0x8004b9 <Cp+0x1>
     37c:	80 93 b8 04 	sts	0x04B8, r24	; 0x8004b8 <Cp>
     380:	fc 01       	movw	r30, r24
     382:	23 81       	ldd	r18, Z+3	; 0x03
     384:	34 81       	ldd	r19, Z+4	; 0x04
     386:	30 93 79 1d 	sts	0x1D79, r19	; 0x801d79 <CurrentSp+0x1>
     38a:	20 93 78 1d 	sts	0x1D78, r18	; 0x801d78 <CurrentSp>
     38e:	eb 5f       	subi	r30, 0xFB	; 251
     390:	fe 4f       	sbci	r31, 0xFE	; 254
     392:	82 e0       	ldi	r24, 0x02	; 2
     394:	80 83       	st	Z, r24
     396:	08 95       	ret
     398:	88 e1       	ldi	r24, 0x18	; 24
     39a:	88 b9       	out	0x08, r24	; 8
     39c:	ff cf       	rjmp	.-2      	; 0x39c <Dispatch+0x74>

0000039e <setReady>:
     39e:	cf 93       	push	r28
     3a0:	df 93       	push	r29
     3a2:	ec 01       	movw	r28, r24
     3a4:	8a 81       	ldd	r24, Y+2	; 0x02
     3a6:	81 30       	cpi	r24, 0x01	; 1
     3a8:	69 f0       	breq	.+26     	; 0x3c4 <setReady+0x26>
     3aa:	c8 f0       	brcs	.+50     	; 0x3de <setReady+0x40>
     3ac:	82 30       	cpi	r24, 0x02	; 2
     3ae:	31 f0       	breq	.+12     	; 0x3bc <setReady+0x1e>
     3b0:	83 30       	cpi	r24, 0x03	; 3
     3b2:	d1 f4       	brne	.+52     	; 0x3e8 <setReady+0x4a>
     3b4:	be 01       	movw	r22, r28
     3b6:	8c eb       	ldi	r24, 0xBC	; 188
     3b8:	94 e0       	ldi	r25, 0x04	; 4
     3ba:	14 c0       	rjmp	.+40     	; 0x3e4 <setReady+0x46>
     3bc:	be 01       	movw	r22, r28
     3be:	8e e2       	ldi	r24, 0x2E	; 46
     3c0:	95 e0       	ldi	r25, 0x05	; 5
     3c2:	10 c0       	rjmp	.+32     	; 0x3e4 <setReady+0x46>
     3c4:	be 01       	movw	r22, r28
     3c6:	88 e0       	ldi	r24, 0x08	; 8
     3c8:	95 e0       	ldi	r25, 0x05	; 5
     3ca:	68 df       	rcall	.-304    	; 0x29c <enqueue>
     3cc:	80 91 28 05 	lds	r24, 0x0528	; 0x800528 <ReadyQTime+0x20>
     3d0:	90 91 29 05 	lds	r25, 0x0529	; 0x800529 <ReadyQTime+0x21>
     3d4:	02 97       	sbiw	r24, 0x02	; 2
     3d6:	5c f0       	brlt	.+22     	; 0x3ee <setReady+0x50>
     3d8:	85 e0       	ldi	r24, 0x05	; 5
     3da:	88 b9       	out	0x08, r24	; 8
     3dc:	ff cf       	rjmp	.-2      	; 0x3dc <setReady+0x3e>
     3de:	be 01       	movw	r22, r28
     3e0:	82 ee       	ldi	r24, 0xE2	; 226
     3e2:	94 e0       	ldi	r25, 0x04	; 4
     3e4:	5b df       	rcall	.-330    	; 0x29c <enqueue>
     3e6:	03 c0       	rjmp	.+6      	; 0x3ee <setReady+0x50>
     3e8:	8c e7       	ldi	r24, 0x7C	; 124
     3ea:	88 b9       	out	0x08, r24	; 8
     3ec:	ff cf       	rjmp	.-2      	; 0x3ec <setReady+0x4e>
     3ee:	cb 5f       	subi	r28, 0xFB	; 251
     3f0:	de 4f       	sbci	r29, 0xFE	; 254
     3f2:	81 e0       	ldi	r24, 0x01	; 1
     3f4:	88 83       	st	Y, r24
     3f6:	df 91       	pop	r29
     3f8:	cf 91       	pop	r28
     3fa:	08 95       	ret

000003fc <Kernel_Create_Task_At>:
     3fc:	8f 92       	push	r8
     3fe:	9f 92       	push	r9
     400:	af 92       	push	r10
     402:	bf 92       	push	r11
     404:	cf 92       	push	r12
     406:	df 92       	push	r13
     408:	ef 92       	push	r14
     40a:	ff 92       	push	r15
     40c:	0f 93       	push	r16
     40e:	cf 93       	push	r28
     410:	df 93       	push	r29
     412:	ec 01       	movw	r28, r24
     414:	fc 01       	movw	r30, r24
     416:	35 96       	adiw	r30, 0x05	; 5
     418:	81 2c       	mov	r8, r1
     41a:	99 24       	eor	r9, r9
     41c:	93 94       	inc	r9
     41e:	df 01       	movw	r26, r30
     420:	c4 01       	movw	r24, r8
     422:	1d 92       	st	X+, r1
     424:	01 97       	sbiw	r24, 0x01	; 1
     426:	e9 f7       	brne	.-6      	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
     428:	e1 50       	subi	r30, 0x01	; 1
     42a:	ff 4f       	sbci	r31, 0xFF	; 255
     42c:	8a e3       	ldi	r24, 0x3A	; 58
     42e:	91 e0       	ldi	r25, 0x01	; 1
     430:	80 83       	st	Z, r24
     432:	31 97       	sbiw	r30, 0x01	; 1
     434:	90 83       	st	Z, r25
     436:	31 97       	sbiw	r30, 0x01	; 1
     438:	10 82       	st	Z, r1
     43a:	31 97       	sbiw	r30, 0x01	; 1
     43c:	60 83       	st	Z, r22
     43e:	31 97       	sbiw	r30, 0x01	; 1
     440:	70 83       	st	Z, r23
     442:	31 97       	sbiw	r30, 0x01	; 1
     444:	10 82       	st	Z, r1
     446:	de 01       	movw	r26, r28
     448:	a4 52       	subi	r26, 0x24	; 36
     44a:	bf 4f       	sbci	r27, 0xFF	; 255
     44c:	b2 97       	sbiw	r30, 0x22	; 34
     44e:	80 81       	ld	r24, Z
     450:	80 68       	ori	r24, 0x80	; 128
     452:	80 83       	st	Z, r24
     454:	bc 83       	std	Y+4, r27	; 0x04
     456:	ab 83       	std	Y+3, r26	; 0x03
     458:	b9 96       	adiw	r30, 0x29	; 41
     45a:	71 83       	std	Z+1, r23	; 0x01
     45c:	60 83       	st	Z, r22
     45e:	32 96       	adiw	r30, 0x02	; 2
     460:	10 82       	st	Z, r1
     462:	9d 96       	adiw	r26, 0x2d	; 45
     464:	11 96       	adiw	r26, 0x01	; 1
     466:	5c 93       	st	X, r21
     468:	4e 93       	st	-X, r20
     46a:	39 83       	std	Y+1, r19	; 0x01
     46c:	28 83       	st	Y, r18
     46e:	0a 83       	std	Y+2, r16	; 0x02
     470:	10 82       	st	Z, r1
     472:	39 96       	adiw	r30, 0x09	; 9
     474:	f1 82       	std	Z+1, r15	; 0x01
     476:	e0 82       	st	Z, r14
     478:	32 96       	adiw	r30, 0x02	; 2
     47a:	d1 82       	std	Z+1, r13	; 0x01
     47c:	c0 82       	st	Z, r12
     47e:	32 96       	adiw	r30, 0x02	; 2
     480:	b1 82       	std	Z+1, r11	; 0x01
     482:	a0 82       	st	Z, r10
     484:	32 96       	adiw	r30, 0x02	; 2
     486:	b1 82       	std	Z+1, r11	; 0x01
     488:	a0 82       	st	Z, r10
     48a:	32 96       	adiw	r30, 0x02	; 2
     48c:	11 82       	std	Z+1, r1	; 0x01
     48e:	10 82       	st	Z, r1
     490:	01 30       	cpi	r16, 0x01	; 1
     492:	21 f4       	brne	.+8      	; 0x49c <__LOCK_REGION_LENGTH__+0x9c>
     494:	84 e0       	ldi	r24, 0x04	; 4
     496:	74 97       	sbiw	r30, 0x14	; 20
     498:	80 83       	st	Z, r24
     49a:	02 c0       	rjmp	.+4      	; 0x4a0 <__LOCK_REGION_LENGTH__+0xa0>
     49c:	ce 01       	movw	r24, r28
     49e:	7f df       	rcall	.-258    	; 0x39e <setReady>
     4a0:	88 81       	ld	r24, Y
     4a2:	99 81       	ldd	r25, Y+1	; 0x01
     4a4:	df 91       	pop	r29
     4a6:	cf 91       	pop	r28
     4a8:	0f 91       	pop	r16
     4aa:	ff 90       	pop	r15
     4ac:	ef 90       	pop	r14
     4ae:	df 90       	pop	r13
     4b0:	cf 90       	pop	r12
     4b2:	bf 90       	pop	r11
     4b4:	af 90       	pop	r10
     4b6:	9f 90       	pop	r9
     4b8:	8f 90       	pop	r8
     4ba:	08 95       	ret

000004bc <Kernel_Create_Task>:
     4bc:	af 92       	push	r10
     4be:	bf 92       	push	r11
     4c0:	cf 92       	push	r12
     4c2:	df 92       	push	r13
     4c4:	ef 92       	push	r14
     4c6:	ff 92       	push	r15
     4c8:	0f 93       	push	r16
     4ca:	1f 93       	push	r17
     4cc:	e0 91 b2 04 	lds	r30, 0x04B2	; 0x8004b2 <Tasks>
     4d0:	f0 91 b3 04 	lds	r31, 0x04B3	; 0x8004b3 <Tasks+0x1>
     4d4:	70 97       	sbiw	r30, 0x10	; 16
     4d6:	61 f1       	breq	.+88     	; 0x530 <Kernel_Create_Task+0x74>
     4d8:	a9 e5       	ldi	r26, 0x59	; 89
     4da:	b6 e0       	ldi	r27, 0x06	; 6
     4dc:	e0 e0       	ldi	r30, 0x00	; 0
     4de:	f0 e0       	ldi	r31, 0x00	; 0
     4e0:	5c 91       	ld	r21, X
     4e2:	55 23       	and	r21, r21
     4e4:	31 f0       	breq	.+12     	; 0x4f2 <Kernel_Create_Task+0x36>
     4e6:	31 96       	adiw	r30, 0x01	; 1
     4e8:	ae 5d       	subi	r26, 0xDE	; 222
     4ea:	be 4f       	sbci	r27, 0xFE	; 254
     4ec:	e0 31       	cpi	r30, 0x10	; 16
     4ee:	f1 05       	cpc	r31, r1
     4f0:	b9 f7       	brne	.-18     	; 0x4e0 <Kernel_Create_Task+0x24>
     4f2:	57 01       	movw	r10, r14
     4f4:	68 01       	movw	r12, r16
     4f6:	79 01       	movw	r14, r18
     4f8:	04 2f       	mov	r16, r20
     4fa:	ab 01       	movw	r20, r22
     4fc:	bc 01       	movw	r22, r24
     4fe:	80 91 b2 04 	lds	r24, 0x04B2	; 0x8004b2 <Tasks>
     502:	90 91 b3 04 	lds	r25, 0x04B3	; 0x8004b3 <Tasks+0x1>
     506:	01 96       	adiw	r24, 0x01	; 1
     508:	90 93 b3 04 	sts	0x04B3, r25	; 0x8004b3 <Tasks+0x1>
     50c:	80 93 b2 04 	sts	0x04B2, r24	; 0x8004b2 <Tasks>
     510:	9f 01       	movw	r18, r30
     512:	2f 5f       	subi	r18, 0xFF	; 255
     514:	3f 4f       	sbci	r19, 0xFF	; 255
     516:	a2 e2       	ldi	r26, 0x22	; 34
     518:	b1 e0       	ldi	r27, 0x01	; 1
     51a:	ea 9f       	mul	r30, r26
     51c:	c0 01       	movw	r24, r0
     51e:	eb 9f       	mul	r30, r27
     520:	90 0d       	add	r25, r0
     522:	fa 9f       	mul	r31, r26
     524:	90 0d       	add	r25, r0
     526:	11 24       	eor	r1, r1
     528:	8c 5a       	subi	r24, 0xAC	; 172
     52a:	9a 4f       	sbci	r25, 0xFA	; 250
     52c:	67 df       	rcall	.-306    	; 0x3fc <Kernel_Create_Task_At>
     52e:	02 c0       	rjmp	.+4      	; 0x534 <Kernel_Create_Task+0x78>
     530:	80 e0       	ldi	r24, 0x00	; 0
     532:	90 e0       	ldi	r25, 0x00	; 0
     534:	1f 91       	pop	r17
     536:	0f 91       	pop	r16
     538:	ff 90       	pop	r15
     53a:	ef 90       	pop	r14
     53c:	df 90       	pop	r13
     53e:	cf 90       	pop	r12
     540:	bf 90       	pop	r11
     542:	af 90       	pop	r10
     544:	08 95       	ret

00000546 <Kernel_Chan_Init>:
     546:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <_edata>
     54a:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <_edata+0x1>
     54e:	40 97       	sbiw	r24, 0x10	; 16
     550:	18 f0       	brcs	.+6      	; 0x558 <Kernel_Chan_Init+0x12>
     552:	82 e0       	ldi	r24, 0x02	; 2
     554:	88 b9       	out	0x08, r24	; 8
     556:	ff cf       	rjmp	.-2      	; 0x556 <Kernel_Chan_Init+0x10>
     558:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <_edata>
     55c:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <_edata+0x1>
     560:	8b e2       	ldi	r24, 0x2B	; 43
     562:	82 9f       	mul	r24, r18
     564:	f0 01       	movw	r30, r0
     566:	83 9f       	mul	r24, r19
     568:	f0 0d       	add	r31, r0
     56a:	11 24       	eor	r1, r1
     56c:	ee 5f       	subi	r30, 0xFE	; 254
     56e:	fd 4f       	sbci	r31, 0xFD	; 253
     570:	91 e0       	ldi	r25, 0x01	; 1
     572:	90 83       	st	Z, r25
     574:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <_edata>
     578:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <_edata+0x1>
     57c:	82 9f       	mul	r24, r18
     57e:	f0 01       	movw	r30, r0
     580:	83 9f       	mul	r24, r19
     582:	f0 0d       	add	r31, r0
     584:	11 24       	eor	r1, r1
     586:	ee 5f       	subi	r30, 0xFE	; 254
     588:	fd 4f       	sbci	r31, 0xFD	; 253
     58a:	14 a2       	std	Z+36, r1	; 0x24
     58c:	13 a2       	std	Z+35, r1	; 0x23
     58e:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <_edata>
     592:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <_edata+0x1>
     596:	82 9f       	mul	r24, r18
     598:	f0 01       	movw	r30, r0
     59a:	83 9f       	mul	r24, r19
     59c:	f0 0d       	add	r31, r0
     59e:	11 24       	eor	r1, r1
     5a0:	ee 5f       	subi	r30, 0xFE	; 254
     5a2:	fd 4f       	sbci	r31, 0xFD	; 253
     5a4:	16 a2       	std	Z+38, r1	; 0x26
     5a6:	15 a2       	std	Z+37, r1	; 0x25
     5a8:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <_edata>
     5ac:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <_edata+0x1>
     5b0:	82 9f       	mul	r24, r18
     5b2:	f0 01       	movw	r30, r0
     5b4:	83 9f       	mul	r24, r19
     5b6:	f0 0d       	add	r31, r0
     5b8:	11 24       	eor	r1, r1
     5ba:	ee 5f       	subi	r30, 0xFE	; 254
     5bc:	fd 4f       	sbci	r31, 0xFD	; 253
     5be:	10 a6       	std	Z+40, r1	; 0x28
     5c0:	17 a2       	std	Z+39, r1	; 0x27
     5c2:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <_edata>
     5c6:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <_edata+0x1>
     5ca:	01 96       	adiw	r24, 0x01	; 1
     5cc:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <_edata+0x1>
     5d0:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <_edata>
     5d4:	08 95       	ret

000005d6 <Kernel_Chan_Send>:
     5d6:	af 92       	push	r10
     5d8:	bf 92       	push	r11
     5da:	cf 92       	push	r12
     5dc:	df 92       	push	r13
     5de:	ef 92       	push	r14
     5e0:	ff 92       	push	r15
     5e2:	0f 93       	push	r16
     5e4:	1f 93       	push	r17
     5e6:	cf 93       	push	r28
     5e8:	df 93       	push	r29
     5ea:	a0 91 b8 04 	lds	r26, 0x04B8	; 0x8004b8 <Cp>
     5ee:	b0 91 b9 04 	lds	r27, 0x04B9	; 0x8004b9 <Cp+0x1>
     5f2:	12 96       	adiw	r26, 0x02	; 2
     5f4:	8c 91       	ld	r24, X
     5f6:	12 97       	sbiw	r26, 0x02	; 2
     5f8:	81 30       	cpi	r24, 0x01	; 1
     5fa:	19 f4       	brne	.+6      	; 0x602 <Kernel_Chan_Send+0x2c>
     5fc:	83 e0       	ldi	r24, 0x03	; 3
     5fe:	88 b9       	out	0x08, r24	; 8
     600:	ff cf       	rjmp	.-2      	; 0x600 <Kernel_Chan_Send+0x2a>
     602:	fd 01       	movw	r30, r26
     604:	e3 5f       	subi	r30, 0xF3	; 243
     606:	fe 4f       	sbci	r31, 0xFE	; 254
     608:	20 81       	ld	r18, Z
     60a:	31 81       	ldd	r19, Z+1	; 0x01
     60c:	21 50       	subi	r18, 0x01	; 1
     60e:	31 09       	sbc	r19, r1
     610:	8b e2       	ldi	r24, 0x2B	; 43
     612:	82 9f       	mul	r24, r18
     614:	a0 01       	movw	r20, r0
     616:	83 9f       	mul	r24, r19
     618:	50 0d       	add	r21, r0
     61a:	11 24       	eor	r1, r1
     61c:	fa 01       	movw	r30, r20
     61e:	ee 5f       	subi	r30, 0xFE	; 254
     620:	fd 4f       	sbci	r31, 0xFD	; 253
     622:	90 81       	ld	r25, Z
     624:	91 11       	cpse	r25, r1
     626:	03 c0       	rjmp	.+6      	; 0x62e <Kernel_Chan_Send+0x58>
     628:	82 e0       	ldi	r24, 0x02	; 2
     62a:	88 b9       	out	0x08, r24	; 8
     62c:	ff cf       	rjmp	.-2      	; 0x62c <Kernel_Chan_Send+0x56>
     62e:	92 30       	cpi	r25, 0x02	; 2
     630:	19 f4       	brne	.+6      	; 0x638 <Kernel_Chan_Send+0x62>
     632:	84 e0       	ldi	r24, 0x04	; 4
     634:	88 b9       	out	0x08, r24	; 8
     636:	ff cf       	rjmp	.-2      	; 0x636 <Kernel_Chan_Send+0x60>
     638:	ed 01       	movw	r28, r26
     63a:	c1 5f       	subi	r28, 0xF1	; 241
     63c:	de 4f       	sbci	r29, 0xFE	; 254
     63e:	28 81       	ld	r18, Y
     640:	39 81       	ldd	r19, Y+1	; 0x01
     642:	32 a7       	std	Z+42, r19	; 0x2a
     644:	21 a7       	std	Z+41, r18	; 0x29
     646:	93 30       	cpi	r25, 0x03	; 3
     648:	89 f5       	brne	.+98     	; 0x6ac <Kernel_Chan_Send+0xd6>
     64a:	ef 01       	movw	r28, r30
     64c:	6f 01       	movw	r12, r30
     64e:	83 e2       	ldi	r24, 0x23	; 35
     650:	c8 0e       	add	r12, r24
     652:	d1 1c       	adc	r13, r1
     654:	da 01       	movw	r26, r20
     656:	ab 5f       	subi	r26, 0xFB	; 251
     658:	bd 4f       	sbci	r27, 0xFD	; 253
     65a:	7d 01       	movw	r14, r26
     65c:	5f 01       	movw	r10, r30
     65e:	b9 e2       	ldi	r27, 0x29	; 41
     660:	ab 0e       	add	r10, r27
     662:	b1 1c       	adc	r11, r1
     664:	f6 01       	movw	r30, r12
     666:	80 81       	ld	r24, Z
     668:	91 81       	ldd	r25, Z+1	; 0x01
     66a:	18 16       	cp	r1, r24
     66c:	19 06       	cpc	r1, r25
     66e:	dc f4       	brge	.+54     	; 0x6a6 <Kernel_Chan_Send+0xd0>
     670:	c7 01       	movw	r24, r14
     672:	34 de       	rcall	.-920    	; 0x2dc <dequeue>
     674:	8c 01       	movw	r16, r24
     676:	fc 01       	movw	r30, r24
     678:	e5 5f       	subi	r30, 0xF5	; 245
     67a:	fe 4f       	sbci	r31, 0xFE	; 254
     67c:	d5 01       	movw	r26, r10
     67e:	8d 91       	ld	r24, X+
     680:	9c 91       	ld	r25, X
     682:	91 83       	std	Z+1, r25	; 0x01
     684:	80 83       	st	Z, r24
     686:	c8 01       	movw	r24, r16
     688:	8a de       	rcall	.-748    	; 0x39e <setReady>
     68a:	80 91 b8 04 	lds	r24, 0x04B8	; 0x8004b8 <Cp>
     68e:	90 91 b9 04 	lds	r25, 0x04B9	; 0x8004b9 <Cp+0x1>
     692:	fc 01       	movw	r30, r24
     694:	22 81       	ldd	r18, Z+2	; 0x02
     696:	d8 01       	movw	r26, r16
     698:	12 96       	adiw	r26, 0x02	; 2
     69a:	3c 91       	ld	r19, X
     69c:	32 17       	cp	r19, r18
     69e:	10 f7       	brcc	.-60     	; 0x664 <Kernel_Chan_Send+0x8e>
     6a0:	7e de       	rcall	.-772    	; 0x39e <setReady>
     6a2:	42 de       	rcall	.-892    	; 0x328 <Dispatch>
     6a4:	df cf       	rjmp	.-66     	; 0x664 <Kernel_Chan_Send+0x8e>
     6a6:	81 e0       	ldi	r24, 0x01	; 1
     6a8:	88 83       	st	Y, r24
     6aa:	08 c0       	rjmp	.+16     	; 0x6bc <Kernel_Chan_Send+0xe6>
     6ac:	82 e0       	ldi	r24, 0x02	; 2
     6ae:	80 83       	st	Z, r24
     6b0:	b2 83       	std	Z+2, r27	; 0x02
     6b2:	a1 83       	std	Z+1, r26	; 0x01
     6b4:	ab 5f       	subi	r26, 0xFB	; 251
     6b6:	be 4f       	sbci	r27, 0xFE	; 254
     6b8:	83 e0       	ldi	r24, 0x03	; 3
     6ba:	8c 93       	st	X, r24
     6bc:	df 91       	pop	r29
     6be:	cf 91       	pop	r28
     6c0:	1f 91       	pop	r17
     6c2:	0f 91       	pop	r16
     6c4:	ff 90       	pop	r15
     6c6:	ef 90       	pop	r14
     6c8:	df 90       	pop	r13
     6ca:	cf 90       	pop	r12
     6cc:	bf 90       	pop	r11
     6ce:	af 90       	pop	r10
     6d0:	08 95       	ret

000006d2 <Kernel_Chan_Receive>:
     6d2:	ef 92       	push	r14
     6d4:	ff 92       	push	r15
     6d6:	0f 93       	push	r16
     6d8:	1f 93       	push	r17
     6da:	cf 93       	push	r28
     6dc:	df 93       	push	r29
     6de:	c0 91 b8 04 	lds	r28, 0x04B8	; 0x8004b8 <Cp>
     6e2:	d0 91 b9 04 	lds	r29, 0x04B9	; 0x8004b9 <Cp+0x1>
     6e6:	8a 81       	ldd	r24, Y+2	; 0x02
     6e8:	81 30       	cpi	r24, 0x01	; 1
     6ea:	19 f4       	brne	.+6      	; 0x6f2 <Kernel_Chan_Receive+0x20>
     6ec:	83 e0       	ldi	r24, 0x03	; 3
     6ee:	88 b9       	out	0x08, r24	; 8
     6f0:	ff cf       	rjmp	.-2      	; 0x6f0 <Kernel_Chan_Receive+0x1e>
     6f2:	fe 01       	movw	r30, r28
     6f4:	e3 5f       	subi	r30, 0xF3	; 243
     6f6:	fe 4f       	sbci	r31, 0xFE	; 254
     6f8:	e0 80       	ld	r14, Z
     6fa:	f1 80       	ldd	r15, Z+1	; 0x01
     6fc:	81 e0       	ldi	r24, 0x01	; 1
     6fe:	e8 1a       	sub	r14, r24
     700:	f1 08       	sbc	r15, r1
     702:	2b e2       	ldi	r18, 0x2B	; 43
     704:	2e 9d       	mul	r18, r14
     706:	c0 01       	movw	r24, r0
     708:	2f 9d       	mul	r18, r15
     70a:	90 0d       	add	r25, r0
     70c:	11 24       	eor	r1, r1
     70e:	8c 01       	movw	r16, r24
     710:	0e 5f       	subi	r16, 0xFE	; 254
     712:	1d 4f       	sbci	r17, 0xFD	; 253
     714:	d8 01       	movw	r26, r16
     716:	2c 91       	ld	r18, X
     718:	21 11       	cpse	r18, r1
     71a:	03 c0       	rjmp	.+6      	; 0x722 <Kernel_Chan_Receive+0x50>
     71c:	82 e0       	ldi	r24, 0x02	; 2
     71e:	88 b9       	out	0x08, r24	; 8
     720:	ff cf       	rjmp	.-2      	; 0x720 <Kernel_Chan_Receive+0x4e>
     722:	22 30       	cpi	r18, 0x02	; 2
     724:	39 f5       	brne	.+78     	; 0x774 <Kernel_Chan_Receive+0xa2>
     726:	f8 01       	movw	r30, r16
     728:	81 a5       	ldd	r24, Z+41	; 0x29
     72a:	92 a5       	ldd	r25, Z+42	; 0x2a
     72c:	fe 01       	movw	r30, r28
     72e:	e5 5f       	subi	r30, 0xF5	; 245
     730:	fe 4f       	sbci	r31, 0xFE	; 254
     732:	91 83       	std	Z+1, r25	; 0x01
     734:	80 83       	st	Z, r24
     736:	d8 01       	movw	r26, r16
     738:	11 96       	adiw	r26, 0x01	; 1
     73a:	8d 91       	ld	r24, X+
     73c:	9c 91       	ld	r25, X
     73e:	12 97       	sbiw	r26, 0x02	; 2
     740:	2e de       	rcall	.-932    	; 0x39e <setReady>
     742:	8a 81       	ldd	r24, Y+2	; 0x02
     744:	d8 01       	movw	r26, r16
     746:	11 96       	adiw	r26, 0x01	; 1
     748:	ed 91       	ld	r30, X+
     74a:	fc 91       	ld	r31, X
     74c:	12 97       	sbiw	r26, 0x02	; 2
     74e:	92 81       	ldd	r25, Z+2	; 0x02
     750:	98 17       	cp	r25, r24
     752:	18 f4       	brcc	.+6      	; 0x75a <Kernel_Chan_Receive+0x88>
     754:	ce 01       	movw	r24, r28
     756:	23 de       	rcall	.-954    	; 0x39e <setReady>
     758:	e7 dd       	rcall	.-1074   	; 0x328 <Dispatch>
     75a:	8b e2       	ldi	r24, 0x2B	; 43
     75c:	8e 9d       	mul	r24, r14
     75e:	f0 01       	movw	r30, r0
     760:	8f 9d       	mul	r24, r15
     762:	f0 0d       	add	r31, r0
     764:	11 24       	eor	r1, r1
     766:	ee 5f       	subi	r30, 0xFE	; 254
     768:	fd 4f       	sbci	r31, 0xFD	; 253
     76a:	12 82       	std	Z+2, r1	; 0x02
     76c:	11 82       	std	Z+1, r1	; 0x01
     76e:	81 e0       	ldi	r24, 0x01	; 1
     770:	80 83       	st	Z, r24
     772:	0a c0       	rjmp	.+20     	; 0x788 <Kernel_Chan_Receive+0xb6>
     774:	be 01       	movw	r22, r28
     776:	8b 5f       	subi	r24, 0xFB	; 251
     778:	9d 4f       	sbci	r25, 0xFD	; 253
     77a:	90 dd       	rcall	.-1248   	; 0x29c <enqueue>
     77c:	83 e0       	ldi	r24, 0x03	; 3
     77e:	f8 01       	movw	r30, r16
     780:	80 83       	st	Z, r24
     782:	cb 5f       	subi	r28, 0xFB	; 251
     784:	de 4f       	sbci	r29, 0xFE	; 254
     786:	88 83       	st	Y, r24
     788:	df 91       	pop	r29
     78a:	cf 91       	pop	r28
     78c:	1f 91       	pop	r17
     78e:	0f 91       	pop	r16
     790:	ff 90       	pop	r15
     792:	ef 90       	pop	r14
     794:	08 95       	ret

00000796 <Kernel_Chan_Write>:
     796:	af 92       	push	r10
     798:	bf 92       	push	r11
     79a:	cf 92       	push	r12
     79c:	df 92       	push	r13
     79e:	ef 92       	push	r14
     7a0:	ff 92       	push	r15
     7a2:	0f 93       	push	r16
     7a4:	1f 93       	push	r17
     7a6:	cf 93       	push	r28
     7a8:	df 93       	push	r29
     7aa:	20 91 b8 04 	lds	r18, 0x04B8	; 0x8004b8 <Cp>
     7ae:	30 91 b9 04 	lds	r19, 0x04B9	; 0x8004b9 <Cp+0x1>
     7b2:	f9 01       	movw	r30, r18
     7b4:	e3 5f       	subi	r30, 0xF3	; 243
     7b6:	fe 4f       	sbci	r31, 0xFE	; 254
     7b8:	40 81       	ld	r20, Z
     7ba:	51 81       	ldd	r21, Z+1	; 0x01
     7bc:	41 50       	subi	r20, 0x01	; 1
     7be:	51 09       	sbc	r21, r1
     7c0:	8b e2       	ldi	r24, 0x2B	; 43
     7c2:	84 9f       	mul	r24, r20
     7c4:	b0 01       	movw	r22, r0
     7c6:	85 9f       	mul	r24, r21
     7c8:	70 0d       	add	r23, r0
     7ca:	11 24       	eor	r1, r1
     7cc:	eb 01       	movw	r28, r22
     7ce:	ce 5f       	subi	r28, 0xFE	; 254
     7d0:	dd 4f       	sbci	r29, 0xFD	; 253
     7d2:	98 81       	ld	r25, Y
     7d4:	91 11       	cpse	r25, r1
     7d6:	03 c0       	rjmp	.+6      	; 0x7de <Kernel_Chan_Write+0x48>
     7d8:	82 e0       	ldi	r24, 0x02	; 2
     7da:	88 b9       	out	0x08, r24	; 8
     7dc:	ff cf       	rjmp	.-2      	; 0x7dc <Kernel_Chan_Write+0x46>
     7de:	92 30       	cpi	r25, 0x02	; 2
     7e0:	19 f4       	brne	.+6      	; 0x7e8 <Kernel_Chan_Write+0x52>
     7e2:	84 e0       	ldi	r24, 0x04	; 4
     7e4:	88 b9       	out	0x08, r24	; 8
     7e6:	ff cf       	rjmp	.-2      	; 0x7e6 <Kernel_Chan_Write+0x50>
     7e8:	93 30       	cpi	r25, 0x03	; 3
     7ea:	b1 f5       	brne	.+108    	; 0x858 <Kernel_Chan_Write+0xc2>
     7ec:	f9 01       	movw	r30, r18
     7ee:	e1 5f       	subi	r30, 0xF1	; 241
     7f0:	fe 4f       	sbci	r31, 0xFE	; 254
     7f2:	80 81       	ld	r24, Z
     7f4:	91 81       	ldd	r25, Z+1	; 0x01
     7f6:	9a a7       	std	Y+42, r25	; 0x2a
     7f8:	89 a7       	std	Y+41, r24	; 0x29
     7fa:	6e 01       	movw	r12, r28
     7fc:	83 e2       	ldi	r24, 0x23	; 35
     7fe:	c8 0e       	add	r12, r24
     800:	d1 1c       	adc	r13, r1
     802:	db 01       	movw	r26, r22
     804:	ab 5f       	subi	r26, 0xFB	; 251
     806:	bd 4f       	sbci	r27, 0xFD	; 253
     808:	7d 01       	movw	r14, r26
     80a:	5e 01       	movw	r10, r28
     80c:	b9 e2       	ldi	r27, 0x29	; 41
     80e:	ab 0e       	add	r10, r27
     810:	b1 1c       	adc	r11, r1
     812:	f6 01       	movw	r30, r12
     814:	80 81       	ld	r24, Z
     816:	91 81       	ldd	r25, Z+1	; 0x01
     818:	18 16       	cp	r1, r24
     81a:	19 06       	cpc	r1, r25
     81c:	dc f4       	brge	.+54     	; 0x854 <Kernel_Chan_Write+0xbe>
     81e:	c7 01       	movw	r24, r14
     820:	5d dd       	rcall	.-1350   	; 0x2dc <dequeue>
     822:	8c 01       	movw	r16, r24
     824:	fc 01       	movw	r30, r24
     826:	e5 5f       	subi	r30, 0xF5	; 245
     828:	fe 4f       	sbci	r31, 0xFE	; 254
     82a:	d5 01       	movw	r26, r10
     82c:	8d 91       	ld	r24, X+
     82e:	9c 91       	ld	r25, X
     830:	91 83       	std	Z+1, r25	; 0x01
     832:	80 83       	st	Z, r24
     834:	c8 01       	movw	r24, r16
     836:	b3 dd       	rcall	.-1178   	; 0x39e <setReady>
     838:	80 91 b8 04 	lds	r24, 0x04B8	; 0x8004b8 <Cp>
     83c:	90 91 b9 04 	lds	r25, 0x04B9	; 0x8004b9 <Cp+0x1>
     840:	fc 01       	movw	r30, r24
     842:	22 81       	ldd	r18, Z+2	; 0x02
     844:	d8 01       	movw	r26, r16
     846:	12 96       	adiw	r26, 0x02	; 2
     848:	3c 91       	ld	r19, X
     84a:	32 17       	cp	r19, r18
     84c:	10 f7       	brcc	.-60     	; 0x812 <Kernel_Chan_Write+0x7c>
     84e:	a7 dd       	rcall	.-1202   	; 0x39e <setReady>
     850:	6b dd       	rcall	.-1322   	; 0x328 <Dispatch>
     852:	df cf       	rjmp	.-66     	; 0x812 <Kernel_Chan_Write+0x7c>
     854:	81 e0       	ldi	r24, 0x01	; 1
     856:	88 83       	st	Y, r24
     858:	df 91       	pop	r29
     85a:	cf 91       	pop	r28
     85c:	1f 91       	pop	r17
     85e:	0f 91       	pop	r16
     860:	ff 90       	pop	r15
     862:	ef 90       	pop	r14
     864:	df 90       	pop	r13
     866:	cf 90       	pop	r12
     868:	bf 90       	pop	r11
     86a:	af 90       	pop	r10
     86c:	08 95       	ret

0000086e <OS_Init>:
     86e:	10 92 b3 04 	sts	0x04B3, r1	; 0x8004b3 <Tasks+0x1>
     872:	10 92 b2 04 	sts	0x04B2, r1	; 0x8004b2 <Tasks>
     876:	10 92 b5 04 	sts	0x04B5, r1	; 0x8004b5 <KernelActive+0x1>
     87a:	10 92 b4 04 	sts	0x04B4, r1	; 0x8004b4 <KernelActive>
     87e:	10 92 b7 04 	sts	0x04B7, r1	; 0x8004b7 <NextP+0x1>
     882:	10 92 b6 04 	sts	0x04B6, r1	; 0x8004b6 <NextP>
     886:	e4 e5       	ldi	r30, 0x54	; 84
     888:	f5 e0       	ldi	r31, 0x05	; 5
     88a:	82 e2       	ldi	r24, 0x22	; 34
     88c:	91 e0       	ldi	r25, 0x01	; 1
     88e:	df 01       	movw	r26, r30
     890:	9c 01       	movw	r18, r24
     892:	1d 92       	st	X+, r1
     894:	21 50       	subi	r18, 0x01	; 1
     896:	30 40       	sbci	r19, 0x00	; 0
     898:	e1 f7       	brne	.-8      	; 0x892 <OS_Init+0x24>
     89a:	df 01       	movw	r26, r30
     89c:	ab 5f       	subi	r26, 0xFB	; 251
     89e:	be 4f       	sbci	r27, 0xFE	; 254
     8a0:	1c 92       	st	X, r1
     8a2:	ee 5d       	subi	r30, 0xDE	; 222
     8a4:	fe 4f       	sbci	r31, 0xFE	; 254
     8a6:	37 e1       	ldi	r19, 0x17	; 23
     8a8:	e4 37       	cpi	r30, 0x74	; 116
     8aa:	f3 07       	cpc	r31, r19
     8ac:	81 f7       	brne	.-32     	; 0x88e <OS_Init+0x20>
     8ae:	10 92 01 02 	sts	0x0201, r1	; 0x800201 <_edata+0x1>
     8b2:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <_edata>
     8b6:	e2 e0       	ldi	r30, 0x02	; 2
     8b8:	f2 e0       	ldi	r31, 0x02	; 2
     8ba:	8b e2       	ldi	r24, 0x2B	; 43
     8bc:	df 01       	movw	r26, r30
     8be:	28 2f       	mov	r18, r24
     8c0:	1d 92       	st	X+, r1
     8c2:	2a 95       	dec	r18
     8c4:	e9 f7       	brne	.-6      	; 0x8c0 <OS_Init+0x52>
     8c6:	10 82       	st	Z, r1
     8c8:	bb 96       	adiw	r30, 0x2b	; 43
     8ca:	34 e0       	ldi	r19, 0x04	; 4
     8cc:	e2 3b       	cpi	r30, 0xB2	; 178
     8ce:	f3 07       	cpc	r31, r19
     8d0:	a9 f7       	brne	.-22     	; 0x8bc <OS_Init+0x4e>
     8d2:	08 95       	ret

000008d4 <OS_Start>:
     8d4:	af 92       	push	r10
     8d6:	bf 92       	push	r11
     8d8:	df 92       	push	r13
     8da:	ef 92       	push	r14
     8dc:	ff 92       	push	r15
     8de:	0f 93       	push	r16
     8e0:	1f 93       	push	r17
     8e2:	cf 93       	push	r28
     8e4:	df 93       	push	r29
     8e6:	80 91 b4 04 	lds	r24, 0x04B4	; 0x8004b4 <KernelActive>
     8ea:	90 91 b5 04 	lds	r25, 0x04B5	; 0x8004b5 <KernelActive+0x1>
     8ee:	89 2b       	or	r24, r25
     8f0:	09 f0       	breq	.+2      	; 0x8f4 <OS_Start+0x20>
     8f2:	8b c0       	rjmp	.+278    	; 0xa0a <OS_Start+0x136>
     8f4:	80 91 b2 04 	lds	r24, 0x04B2	; 0x8004b2 <Tasks>
     8f8:	90 91 b3 04 	lds	r25, 0x04B3	; 0x8004b3 <Tasks+0x1>
     8fc:	89 2b       	or	r24, r25
     8fe:	09 f4       	brne	.+2      	; 0x902 <OS_Start+0x2e>
     900:	84 c0       	rjmp	.+264    	; 0xa0a <OS_Start+0x136>
     902:	f8 94       	cli
     904:	81 e0       	ldi	r24, 0x01	; 1
     906:	90 e0       	ldi	r25, 0x00	; 0
     908:	90 93 b5 04 	sts	0x04B5, r25	; 0x8004b5 <KernelActive+0x1>
     90c:	80 93 b4 04 	sts	0x04B4, r24	; 0x8004b4 <KernelActive>
     910:	0b dd       	rcall	.-1514   	; 0x328 <Dispatch>
     912:	84 e0       	ldi	r24, 0x04	; 4
     914:	d8 2e       	mov	r13, r24
     916:	e0 91 b8 04 	lds	r30, 0x04B8	; 0x8004b8 <Cp>
     91a:	f0 91 b9 04 	lds	r31, 0x04B9	; 0x8004b9 <Cp+0x1>
     91e:	df 01       	movw	r26, r30
     920:	a8 5f       	subi	r26, 0xF8	; 248
     922:	be 4f       	sbci	r27, 0xFE	; 254
     924:	1c 92       	st	X, r1
     926:	83 81       	ldd	r24, Z+3	; 0x03
     928:	94 81       	ldd	r25, Z+4	; 0x04
     92a:	90 93 79 1d 	sts	0x1D79, r25	; 0x801d79 <CurrentSp+0x1>
     92e:	80 93 78 1d 	sts	0x1D78, r24	; 0x801d78 <CurrentSp>
     932:	f5 db       	rcall	.-2070   	; 0x11e <CSwitch>
     934:	c0 91 b8 04 	lds	r28, 0x04B8	; 0x8004b8 <Cp>
     938:	d0 91 b9 04 	lds	r29, 0x04B9	; 0x8004b9 <Cp+0x1>
     93c:	80 91 78 1d 	lds	r24, 0x1D78	; 0x801d78 <CurrentSp>
     940:	90 91 79 1d 	lds	r25, 0x1D79	; 0x801d79 <CurrentSp+0x1>
     944:	9c 83       	std	Y+4, r25	; 0x04
     946:	8b 83       	std	Y+3, r24	; 0x03
     948:	fe 01       	movw	r30, r28
     94a:	e8 5f       	subi	r30, 0xF8	; 248
     94c:	fe 4f       	sbci	r31, 0xFE	; 254
     94e:	80 81       	ld	r24, Z
     950:	90 e0       	ldi	r25, 0x00	; 0
     952:	89 30       	cpi	r24, 0x09	; 9
     954:	91 05       	cpc	r25, r1
     956:	f8 f6       	brcc	.-66     	; 0x916 <OS_Start+0x42>
     958:	fc 01       	movw	r30, r24
     95a:	88 27       	eor	r24, r24
     95c:	ee 58       	subi	r30, 0x8E	; 142
     95e:	ff 4f       	sbci	r31, 0xFF	; 255
     960:	8f 4f       	sbci	r24, 0xFF	; 255
     962:	5d c7       	rjmp	.+3770   	; 0x181e <__tablejump2__>
     964:	fe 01       	movw	r30, r28
     966:	e0 5e       	subi	r30, 0xE0	; 224
     968:	fe 4f       	sbci	r31, 0xFE	; 254
     96a:	e0 80       	ld	r14, Z
     96c:	f1 80       	ldd	r15, Z+1	; 0x01
     96e:	32 97       	sbiw	r30, 0x02	; 2
     970:	00 81       	ld	r16, Z
     972:	11 81       	ldd	r17, Z+1	; 0x01
     974:	32 97       	sbiw	r30, 0x02	; 2
     976:	20 81       	ld	r18, Z
     978:	31 81       	ldd	r19, Z+1	; 0x01
     97a:	5e 01       	movw	r10, r28
     97c:	85 ee       	ldi	r24, 0xE5	; 229
     97e:	a8 1a       	sub	r10, r24
     980:	8e ef       	ldi	r24, 0xFE	; 254
     982:	b8 0a       	sbc	r11, r24
     984:	f5 01       	movw	r30, r10
     986:	40 81       	ld	r20, Z
     988:	72 97       	sbiw	r30, 0x12	; 18
     98a:	60 81       	ld	r22, Z
     98c:	71 81       	ldd	r23, Z+1	; 0x01
     98e:	33 97       	sbiw	r30, 0x03	; 3
     990:	80 81       	ld	r24, Z
     992:	91 81       	ldd	r25, Z+1	; 0x01
     994:	93 dd       	rcall	.-1242   	; 0x4bc <Kernel_Create_Task>
     996:	f5 01       	movw	r30, r10
     998:	80 81       	ld	r24, Z
     99a:	82 30       	cpi	r24, 0x02	; 2
     99c:	08 f0       	brcs	.+2      	; 0x9a0 <OS_Start+0xcc>
     99e:	bb cf       	rjmp	.-138    	; 0x916 <OS_Start+0x42>
     9a0:	90 81       	ld	r25, Z
     9a2:	8a 81       	ldd	r24, Y+2	; 0x02
     9a4:	98 17       	cp	r25, r24
     9a6:	08 f0       	brcs	.+2      	; 0x9aa <OS_Start+0xd6>
     9a8:	b6 cf       	rjmp	.-148    	; 0x916 <OS_Start+0x42>
     9aa:	ce 01       	movw	r24, r28
     9ac:	f8 dc       	rcall	.-1552   	; 0x39e <setReady>
     9ae:	27 c0       	rjmp	.+78     	; 0x9fe <OS_Start+0x12a>
     9b0:	fe 01       	movw	r30, r28
     9b2:	e7 5e       	subi	r30, 0xE7	; 231
     9b4:	fe 4f       	sbci	r31, 0xFE	; 254
     9b6:	11 82       	std	Z+1, r1	; 0x01
     9b8:	10 82       	st	Z, r1
     9ba:	cb 5f       	subi	r28, 0xFB	; 251
     9bc:	de 4f       	sbci	r29, 0xFE	; 254
     9be:	d8 82       	st	Y, r13
     9c0:	1e c0       	rjmp	.+60     	; 0x9fe <OS_Start+0x12a>
     9c2:	cb 5f       	subi	r28, 0xFB	; 251
     9c4:	de 4f       	sbci	r29, 0xFE	; 254
     9c6:	18 82       	st	Y, r1
     9c8:	80 91 b2 04 	lds	r24, 0x04B2	; 0x8004b2 <Tasks>
     9cc:	90 91 b3 04 	lds	r25, 0x04B3	; 0x8004b3 <Tasks+0x1>
     9d0:	01 97       	sbiw	r24, 0x01	; 1
     9d2:	90 93 b3 04 	sts	0x04B3, r25	; 0x8004b3 <Tasks+0x1>
     9d6:	80 93 b2 04 	sts	0x04B2, r24	; 0x8004b2 <Tasks>
     9da:	11 c0       	rjmp	.+34     	; 0x9fe <OS_Start+0x12a>
     9dc:	b4 dd       	rcall	.-1176   	; 0x546 <Kernel_Chan_Init>
     9de:	c5 5f       	subi	r28, 0xF5	; 245
     9e0:	de 4f       	sbci	r29, 0xFE	; 254
     9e2:	99 83       	std	Y+1, r25	; 0x01
     9e4:	88 83       	st	Y, r24
     9e6:	97 cf       	rjmp	.-210    	; 0x916 <OS_Start+0x42>
     9e8:	f6 dd       	rcall	.-1044   	; 0x5d6 <Kernel_Chan_Send>
     9ea:	e0 91 b8 04 	lds	r30, 0x04B8	; 0x8004b8 <Cp>
     9ee:	f0 91 b9 04 	lds	r31, 0x04B9	; 0x8004b9 <Cp+0x1>
     9f2:	eb 5f       	subi	r30, 0xFB	; 251
     9f4:	fe 4f       	sbci	r31, 0xFE	; 254
     9f6:	80 81       	ld	r24, Z
     9f8:	83 30       	cpi	r24, 0x03	; 3
     9fa:	09 f0       	breq	.+2      	; 0x9fe <OS_Start+0x12a>
     9fc:	8c cf       	rjmp	.-232    	; 0x916 <OS_Start+0x42>
     9fe:	94 dc       	rcall	.-1752   	; 0x328 <Dispatch>
     a00:	8a cf       	rjmp	.-236    	; 0x916 <OS_Start+0x42>
     a02:	67 de       	rcall	.-818    	; 0x6d2 <Kernel_Chan_Receive>
     a04:	f2 cf       	rjmp	.-28     	; 0x9ea <OS_Start+0x116>
     a06:	c7 de       	rcall	.-626    	; 0x796 <Kernel_Chan_Write>
     a08:	86 cf       	rjmp	.-244    	; 0x916 <OS_Start+0x42>
     a0a:	df 91       	pop	r29
     a0c:	cf 91       	pop	r28
     a0e:	1f 91       	pop	r17
     a10:	0f 91       	pop	r16
     a12:	ff 90       	pop	r15
     a14:	ef 90       	pop	r14
     a16:	df 90       	pop	r13
     a18:	bf 90       	pop	r11
     a1a:	af 90       	pop	r10
     a1c:	08 95       	ret

00000a1e <Task_Create_System>:
     a1e:	ef 92       	push	r14
     a20:	ff 92       	push	r15
     a22:	0f 93       	push	r16
     a24:	1f 93       	push	r17
     a26:	20 91 b4 04 	lds	r18, 0x04B4	; 0x8004b4 <KernelActive>
     a2a:	30 91 b5 04 	lds	r19, 0x04B5	; 0x8004b5 <KernelActive+0x1>
     a2e:	23 2b       	or	r18, r19
     a30:	01 f1       	breq	.+64     	; 0xa72 <Task_Create_System+0x54>
     a32:	f8 94       	cli
     a34:	20 91 b8 04 	lds	r18, 0x04B8	; 0x8004b8 <Cp>
     a38:	30 91 b9 04 	lds	r19, 0x04B9	; 0x8004b9 <Cp+0x1>
     a3c:	f9 01       	movw	r30, r18
     a3e:	e8 5f       	subi	r30, 0xF8	; 248
     a40:	fe 4f       	sbci	r31, 0xFE	; 254
     a42:	41 e0       	ldi	r20, 0x01	; 1
     a44:	40 83       	st	Z, r20
     a46:	32 97       	sbiw	r30, 0x02	; 2
     a48:	91 83       	std	Z+1, r25	; 0x01
     a4a:	80 83       	st	Z, r24
     a4c:	33 96       	adiw	r30, 0x03	; 3
     a4e:	71 83       	std	Z+1, r23	; 0x01
     a50:	60 83       	st	Z, r22
     a52:	72 96       	adiw	r30, 0x12	; 18
     a54:	10 82       	st	Z, r1
     a56:	31 96       	adiw	r30, 0x01	; 1
     a58:	11 82       	std	Z+1, r1	; 0x01
     a5a:	10 82       	st	Z, r1
     a5c:	32 96       	adiw	r30, 0x02	; 2
     a5e:	11 82       	std	Z+1, r1	; 0x01
     a60:	10 82       	st	Z, r1
     a62:	32 96       	adiw	r30, 0x02	; 2
     a64:	11 82       	std	Z+1, r1	; 0x01
     a66:	10 82       	st	Z, r1
     a68:	80 e1       	ldi	r24, 0x10	; 16
     a6a:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <__TEXT_REGION_LENGTH__+0x70010b>
     a6e:	ac db       	rcall	.-2216   	; 0x1c8 <Enter_Kernel>
     a70:	08 c0       	rjmp	.+16     	; 0xa82 <Task_Create_System+0x64>
     a72:	e1 2c       	mov	r14, r1
     a74:	f1 2c       	mov	r15, r1
     a76:	00 e0       	ldi	r16, 0x00	; 0
     a78:	10 e0       	ldi	r17, 0x00	; 0
     a7a:	20 e0       	ldi	r18, 0x00	; 0
     a7c:	30 e0       	ldi	r19, 0x00	; 0
     a7e:	40 e0       	ldi	r20, 0x00	; 0
     a80:	1d dd       	rcall	.-1478   	; 0x4bc <Kernel_Create_Task>
     a82:	e0 91 b8 04 	lds	r30, 0x04B8	; 0x8004b8 <Cp>
     a86:	f0 91 b9 04 	lds	r31, 0x04B9	; 0x8004b9 <Cp+0x1>
     a8a:	80 81       	ld	r24, Z
     a8c:	91 81       	ldd	r25, Z+1	; 0x01
     a8e:	1f 91       	pop	r17
     a90:	0f 91       	pop	r16
     a92:	ff 90       	pop	r15
     a94:	ef 90       	pop	r14
     a96:	08 95       	ret

00000a98 <Task_Create_Idle>:
     a98:	ef 92       	push	r14
     a9a:	ff 92       	push	r15
     a9c:	0f 93       	push	r16
     a9e:	1f 93       	push	r17
     aa0:	20 91 b4 04 	lds	r18, 0x04B4	; 0x8004b4 <KernelActive>
     aa4:	30 91 b5 04 	lds	r19, 0x04B5	; 0x8004b5 <KernelActive+0x1>
     aa8:	23 2b       	or	r18, r19
     aaa:	29 f1       	breq	.+74     	; 0xaf6 <Task_Create_Idle+0x5e>
     aac:	f8 94       	cli
     aae:	e0 91 b8 04 	lds	r30, 0x04B8	; 0x8004b8 <Cp>
     ab2:	f0 91 b9 04 	lds	r31, 0x04B9	; 0x8004b9 <Cp+0x1>
     ab6:	df 01       	movw	r26, r30
     ab8:	a8 5f       	subi	r26, 0xF8	; 248
     aba:	be 4f       	sbci	r27, 0xFE	; 254
     abc:	21 e0       	ldi	r18, 0x01	; 1
     abe:	2c 93       	st	X, r18
     ac0:	12 97       	sbiw	r26, 0x02	; 2
     ac2:	11 96       	adiw	r26, 0x01	; 1
     ac4:	9c 93       	st	X, r25
     ac6:	8e 93       	st	-X, r24
     ac8:	13 96       	adiw	r26, 0x03	; 3
     aca:	11 96       	adiw	r26, 0x01	; 1
     acc:	7c 93       	st	X, r23
     ace:	6e 93       	st	-X, r22
     ad0:	83 e0       	ldi	r24, 0x03	; 3
     ad2:	82 83       	std	Z+2, r24	; 0x02
     ad4:	18 96       	adiw	r26, 0x08	; 8
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 92       	st	X, r1
     ada:	1e 92       	st	-X, r1
     adc:	12 96       	adiw	r26, 0x02	; 2
     ade:	11 96       	adiw	r26, 0x01	; 1
     ae0:	1c 92       	st	X, r1
     ae2:	1e 92       	st	-X, r1
     ae4:	eb 5e       	subi	r30, 0xEB	; 235
     ae6:	fe 4f       	sbci	r31, 0xFE	; 254
     ae8:	11 82       	std	Z+1, r1	; 0x01
     aea:	10 82       	st	Z, r1
     aec:	80 e1       	ldi	r24, 0x10	; 16
     aee:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <__TEXT_REGION_LENGTH__+0x70010b>
     af2:	6a db       	rcall	.-2348   	; 0x1c8 <Enter_Kernel>
     af4:	08 c0       	rjmp	.+16     	; 0xb06 <Task_Create_Idle+0x6e>
     af6:	e1 2c       	mov	r14, r1
     af8:	f1 2c       	mov	r15, r1
     afa:	00 e0       	ldi	r16, 0x00	; 0
     afc:	10 e0       	ldi	r17, 0x00	; 0
     afe:	20 e0       	ldi	r18, 0x00	; 0
     b00:	30 e0       	ldi	r19, 0x00	; 0
     b02:	43 e0       	ldi	r20, 0x03	; 3
     b04:	db dc       	rcall	.-1610   	; 0x4bc <Kernel_Create_Task>
     b06:	e0 91 b8 04 	lds	r30, 0x04B8	; 0x8004b8 <Cp>
     b0a:	f0 91 b9 04 	lds	r31, 0x04B9	; 0x8004b9 <Cp+0x1>
     b0e:	80 81       	ld	r24, Z
     b10:	91 81       	ldd	r25, Z+1	; 0x01
     b12:	1f 91       	pop	r17
     b14:	0f 91       	pop	r16
     b16:	ff 90       	pop	r15
     b18:	ef 90       	pop	r14
     b1a:	08 95       	ret

00000b1c <Task_Next_2>:
     b1c:	80 91 b4 04 	lds	r24, 0x04B4	; 0x8004b4 <KernelActive>
     b20:	90 91 b5 04 	lds	r25, 0x04B5	; 0x8004b5 <KernelActive+0x1>
     b24:	89 2b       	or	r24, r25
     b26:	69 f0       	breq	.+26     	; 0xb42 <Task_Next_2+0x26>
     b28:	f8 94       	cli
     b2a:	e0 91 b8 04 	lds	r30, 0x04B8	; 0x8004b8 <Cp>
     b2e:	f0 91 b9 04 	lds	r31, 0x04B9	; 0x8004b9 <Cp+0x1>
     b32:	e8 5f       	subi	r30, 0xF8	; 248
     b34:	fe 4f       	sbci	r31, 0xFE	; 254
     b36:	82 e0       	ldi	r24, 0x02	; 2
     b38:	80 83       	st	Z, r24
     b3a:	80 e1       	ldi	r24, 0x10	; 16
     b3c:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <__TEXT_REGION_LENGTH__+0x70010b>
     b40:	43 cb       	rjmp	.-2426   	; 0x1c8 <Enter_Kernel>
     b42:	08 95       	ret

00000b44 <Task_Next>:
     b44:	80 91 b4 04 	lds	r24, 0x04B4	; 0x8004b4 <KernelActive>
     b48:	90 91 b5 04 	lds	r25, 0x04B5	; 0x8004b5 <KernelActive+0x1>
     b4c:	89 2b       	or	r24, r25
     b4e:	89 f0       	breq	.+34     	; 0xb72 <Task_Next+0x2e>
     b50:	e0 91 b8 04 	lds	r30, 0x04B8	; 0x8004b8 <Cp>
     b54:	f0 91 b9 04 	lds	r31, 0x04B9	; 0x8004b9 <Cp+0x1>
     b58:	82 81       	ldd	r24, Z+2	; 0x02
     b5a:	81 30       	cpi	r24, 0x01	; 1
     b5c:	09 f0       	breq	.+2      	; 0xb60 <Task_Next+0x1c>
     b5e:	de cf       	rjmp	.-68     	; 0xb1c <Task_Next_2>
     b60:	f8 94       	cli
     b62:	e8 5f       	subi	r30, 0xF8	; 248
     b64:	fe 4f       	sbci	r31, 0xFE	; 254
     b66:	84 e0       	ldi	r24, 0x04	; 4
     b68:	80 83       	st	Z, r24
     b6a:	80 e1       	ldi	r24, 0x10	; 16
     b6c:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <__TEXT_REGION_LENGTH__+0x70010b>
     b70:	2b cb       	rjmp	.-2474   	; 0x1c8 <Enter_Kernel>
     b72:	08 95       	ret

00000b74 <Timer_Init>:
  * A Simple Test
  *============
  */
void Timer_Init()
{
  Disable_Interrupt();
     b74:	f8 94       	cli
  //Clear timer config.
  TCCR1A = 0;
     b76:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
  TCCR1B = 0;
     b7a:	e1 e8       	ldi	r30, 0x81	; 129
     b7c:	f0 e0       	ldi	r31, 0x00	; 0
     b7e:	10 82       	st	Z, r1
  //Set to CTC (mode 4)
  TCCR1B |= (1<<WGM12);
     b80:	80 81       	ld	r24, Z
     b82:	88 60       	ori	r24, 0x08	; 8
     b84:	80 83       	st	Z, r24

  //Set prescaller to 1/8
  TCCR1B |= (1<<CS11);
     b86:	80 81       	ld	r24, Z
     b88:	82 60       	ori	r24, 0x02	; 2
     b8a:	80 83       	st	Z, r24

  //Set TOP value 0.0001s*MSECPERTICK
  OCR1A = 2000*MSECPERTICK;
     b8c:	80 e2       	ldi	r24, 0x20	; 32
     b8e:	9e e4       	ldi	r25, 0x4E	; 78
     b90:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x700089>
     b94:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x700088>

  //Enable interrupt A for timer 3.
  TIMSK1 |= (1<<OCIE1A);
     b98:	ef e6       	ldi	r30, 0x6F	; 111
     b9a:	f0 e0       	ldi	r31, 0x00	; 0
     b9c:	80 81       	ld	r24, Z
     b9e:	82 60       	ori	r24, 0x02	; 2
     ba0:	80 83       	st	Z, r24

  //Set timer to 0 (optional here).
  TCNT1 = 0;
     ba2:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x700085>
     ba6:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x700084>

  // enable interrupt
  Enable_Interrupt();
     baa:	78 94       	sei
     bac:	08 95       	ret

00000bae <Kernel_Tick>:
}

void Kernel_Tick()
{
     bae:	ef 92       	push	r14
     bb0:	ff 92       	push	r15
     bb2:	0f 93       	push	r16
     bb4:	1f 93       	push	r17
     bb6:	cf 93       	push	r28
     bb8:	df 93       	push	r29
  current_tick++;
     bba:	80 91 ba 04 	lds	r24, 0x04BA	; 0x8004ba <current_tick>
     bbe:	90 91 bb 04 	lds	r25, 0x04BB	; 0x8004bb <current_tick+0x1>
     bc2:	01 96       	adiw	r24, 0x01	; 1
     bc4:	90 93 bb 04 	sts	0x04BB, r25	; 0x8004bb <current_tick+0x1>
     bc8:	80 93 ba 04 	sts	0x04BA, r24	; 0x8004ba <current_tick>
     bcc:	c9 e5       	ldi	r28, 0x59	; 89
     bce:	d6 e0       	ldi	r29, 0x06	; 6
  int x;
  int ready_time_tasks = 0;
     bd0:	00 e0       	ldi	r16, 0x00	; 0
     bd2:	10 e0       	ldi	r17, 0x00	; 0
     bd4:	7e 01       	movw	r14, r28
     bd6:	83 e0       	ldi	r24, 0x03	; 3
     bd8:	e8 1a       	sub	r14, r24
     bda:	81 e0       	ldi	r24, 0x01	; 1
     bdc:	f8 0a       	sbc	r15, r24
  for (x = 0; x < MAXPROCESS; x++) {
    if (Process[x].py == TIME && Process[x].state != SUSPENDED){
     bde:	f7 01       	movw	r30, r14
     be0:	20 81       	ld	r18, Z
     be2:	38 81       	ld	r19, Y
     be4:	21 30       	cpi	r18, 0x01	; 1
     be6:	79 f4       	brne	.+30     	; 0xc06 <Kernel_Tick+0x58>
     be8:	34 30       	cpi	r19, 0x04	; 4
     bea:	89 f0       	breq	.+34     	; 0xc0e <Kernel_Tick+0x60>
      Process[x].executed_ticks++;
     bec:	8c 89       	ldd	r24, Y+20	; 0x14
     bee:	9d 89       	ldd	r25, Y+21	; 0x15
     bf0:	01 96       	adiw	r24, 0x01	; 1
     bf2:	9d 8b       	std	Y+21, r25	; 0x15
     bf4:	8c 8b       	std	Y+20, r24	; 0x14
      if (Process[x].executed_ticks >= Process[x].wcet){
     bf6:	4e 85       	ldd	r20, Y+14	; 0x0e
     bf8:	5f 85       	ldd	r21, Y+15	; 0x0f
     bfa:	84 17       	cp	r24, r20
     bfc:	95 07       	cpc	r25, r21
     bfe:	18 f0       	brcs	.+6      	; 0xc06 <Kernel_Tick+0x58>

/**
  * TODO: communicate error code
  */
void OS_Abort(unsigned int error) {
	OS_ABORT_DEBUG_PORT = error;
     c00:	86 e0       	ldi	r24, 0x06	; 6
     c02:	88 b9       	out	0x08, r24	; 8
     c04:	ff cf       	rjmp	.-2      	; 0xc04 <Kernel_Tick+0x56>
      Process[x].executed_ticks++;
      if (Process[x].executed_ticks >= Process[x].wcet){
        OS_Abort(ERROR_WCET_VIOLATION);
      }
    }
    if (Process[x].state == SUSPENDED && Process[x].py == TIME && Process[x].next_schedule == current_tick)
     c06:	34 30       	cpi	r19, 0x04	; 4
     c08:	a9 f4       	brne	.+42     	; 0xc34 <Kernel_Tick+0x86>
     c0a:	21 30       	cpi	r18, 0x01	; 1
     c0c:	99 f4       	brne	.+38     	; 0xc34 <Kernel_Tick+0x86>
     c0e:	8a 89       	ldd	r24, Y+18	; 0x12
     c10:	9b 89       	ldd	r25, Y+19	; 0x13
     c12:	20 91 ba 04 	lds	r18, 0x04BA	; 0x8004ba <current_tick>
     c16:	30 91 bb 04 	lds	r19, 0x04BB	; 0x8004bb <current_tick+0x1>
     c1a:	82 17       	cp	r24, r18
     c1c:	93 07       	cpc	r25, r19
     c1e:	51 f4       	brne	.+20     	; 0xc34 <Kernel_Tick+0x86>
    {
      Process[x].next_schedule = Process[x].next_schedule + Process[x].period;
     c20:	2c 85       	ldd	r18, Y+12	; 0x0c
     c22:	3d 85       	ldd	r19, Y+13	; 0x0d
     c24:	82 0f       	add	r24, r18
     c26:	93 1f       	adc	r25, r19
     c28:	9b 8b       	std	Y+19, r25	; 0x13
     c2a:	8a 8b       	std	Y+18, r24	; 0x12
      setReady(&Process[x]);
     c2c:	ce 01       	movw	r24, r28
     c2e:	85 50       	subi	r24, 0x05	; 5
     c30:	91 40       	sbci	r25, 0x01	; 1
     c32:	b5 db       	rcall	.-2198   	; 0x39e <setReady>
    }
    if (Process[x].py == TIME && (Process[x].state == RUNNING || Process[x].state == READY))
     c34:	f7 01       	movw	r30, r14
     c36:	80 81       	ld	r24, Z
     c38:	81 30       	cpi	r24, 0x01	; 1
     c3a:	31 f4       	brne	.+12     	; 0xc48 <Kernel_Tick+0x9a>
     c3c:	88 81       	ld	r24, Y
     c3e:	81 50       	subi	r24, 0x01	; 1
     c40:	82 30       	cpi	r24, 0x02	; 2
     c42:	10 f4       	brcc	.+4      	; 0xc48 <Kernel_Tick+0x9a>
    {
      ready_time_tasks++;
     c44:	0f 5f       	subi	r16, 0xFF	; 255
     c46:	1f 4f       	sbci	r17, 0xFF	; 255
     c48:	ce 5d       	subi	r28, 0xDE	; 222
     c4a:	de 4f       	sbci	r29, 0xFE	; 254
void Kernel_Tick()
{
  current_tick++;
  int x;
  int ready_time_tasks = 0;
  for (x = 0; x < MAXPROCESS; x++) {
     c4c:	f8 e1       	ldi	r31, 0x18	; 24
     c4e:	c9 37       	cpi	r28, 0x79	; 121
     c50:	df 07       	cpc	r29, r31
     c52:	09 f0       	breq	.+2      	; 0xc56 <Kernel_Tick+0xa8>
     c54:	bf cf       	rjmp	.-130    	; 0xbd4 <Kernel_Tick+0x26>
    if (Process[x].py == TIME && (Process[x].state == RUNNING || Process[x].state == READY))
    {
      ready_time_tasks++;
    }
  }
  if (ready_time_tasks > 1)
     c56:	02 30       	cpi	r16, 0x02	; 2
     c58:	11 05       	cpc	r17, r1
     c5a:	1c f0       	brlt	.+6      	; 0xc62 <Kernel_Tick+0xb4>

/**
  * TODO: communicate error code
  */
void OS_Abort(unsigned int error) {
	OS_ABORT_DEBUG_PORT = error;
     c5c:	85 e0       	ldi	r24, 0x05	; 5
     c5e:	88 b9       	out	0x08, r24	; 8
     c60:	ff cf       	rjmp	.-2      	; 0xc60 <Kernel_Tick+0xb2>
  //   if(Cp->executed_ticks >= Cp->wcet){
  //     OS_Abort(ERROR_WCET_VIOLATION);
  //   }
  // }

}
     c62:	df 91       	pop	r29
     c64:	cf 91       	pop	r28
     c66:	1f 91       	pop	r17
     c68:	0f 91       	pop	r16
     c6a:	ff 90       	pop	r15
     c6c:	ef 90       	pop	r14
     c6e:	08 95       	ret

00000c70 <__vector_17>:

// This ISR fires every MSECPERTICKms and represents our RTOS tick
ISR(TIMER1_COMPA_vect)
{
     c70:	1f 92       	push	r1
     c72:	0f 92       	push	r0
     c74:	0f b6       	in	r0, 0x3f	; 63
     c76:	0f 92       	push	r0
     c78:	11 24       	eor	r1, r1
     c7a:	0b b6       	in	r0, 0x3b	; 59
     c7c:	0f 92       	push	r0
     c7e:	2f 93       	push	r18
     c80:	3f 93       	push	r19
     c82:	4f 93       	push	r20
     c84:	5f 93       	push	r21
     c86:	6f 93       	push	r22
     c88:	7f 93       	push	r23
     c8a:	8f 93       	push	r24
     c8c:	9f 93       	push	r25
     c8e:	af 93       	push	r26
     c90:	bf 93       	push	r27
     c92:	ef 93       	push	r30
     c94:	ff 93       	push	r31
  Kernel_Tick();
     c96:	8b df       	rcall	.-234    	; 0xbae <Kernel_Tick>
  if (Cp->py >= RR)
     c98:	e0 91 b8 04 	lds	r30, 0x04B8	; 0x8004b8 <Cp>
     c9c:	f0 91 b9 04 	lds	r31, 0x04B9	; 0x8004b9 <Cp+0x1>
     ca0:	82 81       	ldd	r24, Z+2	; 0x02
     ca2:	82 30       	cpi	r24, 0x02	; 2
     ca4:	08 f0       	brcs	.+2      	; 0xca8 <__vector_17+0x38>
  {
    Task_Next_2();
     ca6:	3a df       	rcall	.-396    	; 0xb1c <Task_Next_2>
  }
}
     ca8:	ff 91       	pop	r31
     caa:	ef 91       	pop	r30
     cac:	bf 91       	pop	r27
     cae:	af 91       	pop	r26
     cb0:	9f 91       	pop	r25
     cb2:	8f 91       	pop	r24
     cb4:	7f 91       	pop	r23
     cb6:	6f 91       	pop	r22
     cb8:	5f 91       	pop	r21
     cba:	4f 91       	pop	r20
     cbc:	3f 91       	pop	r19
     cbe:	2f 91       	pop	r18
     cc0:	0f 90       	pop	r0
     cc2:	0b be       	out	0x3b, r0	; 59
     cc4:	0f 90       	pop	r0
     cc6:	0f be       	out	0x3f, r0	; 63
     cc8:	0f 90       	pop	r0
     cca:	1f 90       	pop	r1
     ccc:	18 95       	reti

00000cce <Init_Debug_LEDs>:

void Init_Debug_LEDs()
{
  DDRL |= (1<<PL2);
     cce:	ea e0       	ldi	r30, 0x0A	; 10
     cd0:	f1 e0       	ldi	r31, 0x01	; 1
     cd2:	80 81       	ld	r24, Z
     cd4:	84 60       	ori	r24, 0x04	; 4
     cd6:	80 83       	st	Z, r24
  DDRL |= (1<<PL3);
     cd8:	80 81       	ld	r24, Z
     cda:	88 60       	ori	r24, 0x08	; 8
     cdc:	80 83       	st	Z, r24
  DDRL |= (1<<PL4);
     cde:	80 81       	ld	r24, Z
     ce0:	80 61       	ori	r24, 0x10	; 16
     ce2:	80 83       	st	Z, r24
  DDRC = 0xFF;
     ce4:	8f ef       	ldi	r24, 0xFF	; 255
     ce6:	87 b9       	out	0x07, r24	; 7
     ce8:	08 95       	ret

00000cea <main>:
/**
  * OS main function
  */
int main()
{
   OS_Init();
     cea:	c1 dd       	rcall	.-1150   	; 0x86e <OS_Init>
   Init_Debug_LEDs();
     cec:	f0 df       	rcall	.-32     	; 0xcce <Init_Debug_LEDs>
   // Here we create a task for a_main which should be defined externally to create
   // all tasks needed for the application, and then terminate.
   // #TODO this should be created as a system task once we implement this functionality
   Task_Create_Idle(Idle_Task, 0);
     cee:	60 e0       	ldi	r22, 0x00	; 0
     cf0:	70 e0       	ldi	r23, 0x00	; 0
     cf2:	89 e3       	ldi	r24, 0x39	; 57
     cf4:	91 e0       	ldi	r25, 0x01	; 1
     cf6:	d0 de       	rcall	.-608    	; 0xa98 <Task_Create_Idle>
   Task_Create_System( a_main , PL2);
     cf8:	62 e0       	ldi	r22, 0x02	; 2
     cfa:	70 e0       	ldi	r23, 0x00	; 0
     cfc:	85 e9       	ldi	r24, 0x95	; 149
     cfe:	98 e0       	ldi	r25, 0x08	; 8
     d00:	8e de       	rcall	.-740    	; 0xa1e <Task_Create_System>
   Timer_Init();
     d02:	38 df       	rcall	.-400    	; 0xb74 <Timer_Init>
   OS_Start();
     d04:	e7 dd       	rcall	.-1074   	; 0x8d4 <OS_Start>
     d06:	80 e0       	ldi	r24, 0x00	; 0
     d08:	90 e0       	ldi	r25, 0x00	; 0
     d0a:	08 95       	ret

00000d0c <setup>:

/*============================================================================*/
void setup()
{
	// Serial INIT
	init_uart_usb();
     d0c:	db d3       	rcall	.+1974   	; 0x14c4 <init_uart_usb>
	init_uart_bt();
     d0e:	f2 d3       	rcall	.+2020   	; 0x14f4 <init_uart_bt>
	init_uart_roomba();
     d10:	8f d4       	rcall	.+2334   	; 0x1630 <init_uart_roomba>
	
	// Roomba INTI
	init_roomba();			// This takes around 5 seconds to complete, so offset other tasks accordingly.
     d12:	15 d2       	rcall	.+1066   	; 0x113e <init_roomba>
	
	// Laser INIT
	DDRA |= 0b00000001;		// Enable pin 22 as output
     d14:	08 9a       	sbi	0x01, 0	; 1
	PORTA &= 0b11111110;	// Turn pin 22 to low
     d16:	10 98       	cbi	0x02, 0	; 2
	
	// Servo INIT
	init_servos();
     d18:	8f c2       	rjmp	.+1310   	; 0x1238 <init_servos>

00000d1a <receive_transmission>:
#define Enable_Interrupt()		asm volatile ("sei"::)

/*============================================================================*/
// Read in a update transmission.
void receive_transmission()
{
     d1a:	ef 92       	push	r14
     d1c:	ff 92       	push	r15
     d1e:	0f 93       	push	r16
     d20:	1f 93       	push	r17
     d22:	cf 93       	push	r28
     d24:	df 93       	push	r29
     d26:	cd b7       	in	r28, 0x3d	; 61
     d28:	de b7       	in	r29, 0x3e	; 62
     d2a:	cb 5f       	subi	r28, 0xFB	; 251
     d2c:	d1 09       	sbc	r29, r1
     d2e:	0f b6       	in	r0, 0x3f	; 63
     d30:	f8 94       	cli
     d32:	de bf       	out	0x3e, r29	; 62
     d34:	0f be       	out	0x3f, r0	; 63
     d36:	cd bf       	out	0x3d, r28	; 61
	char roombaRadius_val [MAXINPUT];

	// Cycle through char array.
	unsigned int input_pos = 0;
		
	if(rx_data_in_blue_tooth_buffer == 1)
     d38:	80 91 7c 1d 	lds	r24, 0x1D7C	; 0x801d7c <rx_data_in_blue_tooth_buffer>
     d3c:	90 91 7d 1d 	lds	r25, 0x1D7D	; 0x801d7d <rx_data_in_blue_tooth_buffer+0x1>
     d40:	01 97       	sbiw	r24, 0x01	; 1
     d42:	09 f0       	breq	.+2      	; 0xd46 <receive_transmission+0x2c>
     d44:	de c0       	rjmp	.+444    	; 0xf02 <receive_transmission+0x1e8>
	{
		unsigned char inByte = serial_read_bt();
     d46:	f3 d3       	rcall	.+2022   	; 0x152e <serial_read_bt>
     d48:	18 2f       	mov	r17, r24

		// FOR DEBUG.
		serial_write_usb(inByte);
     d4a:	cd d3       	rcall	.+1946   	; 0x14e6 <serial_write_usb>

		if (inByte == '#')
     d4c:	13 32       	cpi	r17, 0x23	; 35
     d4e:	09 f0       	breq	.+2      	; 0xd52 <receive_transmission+0x38>
     d50:	d8 c0       	rjmp	.+432    	; 0xf02 <receive_transmission+0x1e8>
     d52:	00 e0       	ldi	r16, 0x00	; 0
     d54:	10 e0       	ldi	r17, 0x00	; 0
     d56:	e1 2c       	mov	r14, r1
     d58:	f1 2c       	mov	r15, r1
		{
			status = 1;
			while(status == 1)
			{
				if(rx_data_in_blue_tooth_buffer == 1)
     d5a:	80 91 7c 1d 	lds	r24, 0x1D7C	; 0x801d7c <rx_data_in_blue_tooth_buffer>
     d5e:	90 91 7d 1d 	lds	r25, 0x1D7D	; 0x801d7d <rx_data_in_blue_tooth_buffer+0x1>
     d62:	01 97       	sbiw	r24, 0x01	; 1
     d64:	d1 f7       	brne	.-12     	; 0xd5a <receive_transmission+0x40>
				{
					inByte = serial_read_bt();
     d66:	e3 d3       	rcall	.+1990   	; 0x152e <serial_read_bt>
     d68:	98 2f       	mov	r25, r24
					
					// FOR DEBUG.
					serial_write_usb(inByte);
     d6a:	c5 50       	subi	r28, 0x05	; 5
     d6c:	df 4f       	sbci	r29, 0xFF	; 255
     d6e:	98 83       	st	Y, r25
     d70:	cb 5f       	subi	r28, 0xFB	; 251
     d72:	d0 40       	sbci	r29, 0x00	; 0
     d74:	b8 d3       	rcall	.+1904   	; 0x14e6 <serial_write_usb>
					
					if (inByte == '%')
     d76:	c5 50       	subi	r28, 0x05	; 5
     d78:	df 4f       	sbci	r29, 0xFF	; 255
     d7a:	98 81       	ld	r25, Y
     d7c:	cb 5f       	subi	r28, 0xFB	; 251
     d7e:	d0 40       	sbci	r29, 0x00	; 0
     d80:	95 32       	cpi	r25, 0x25	; 37
     d82:	09 f0       	breq	.+2      	; 0xd86 <receive_transmission+0x6c>
     d84:	4f c0       	rjmp	.+158    	; 0xe24 <receive_transmission+0x10a>
					{
						// ADD NULL TERMINATORS.
						switch(packetnum)
     d86:	82 e0       	ldi	r24, 0x02	; 2
     d88:	e8 16       	cp	r14, r24
     d8a:	f1 04       	cpc	r15, r1
     d8c:	c1 f0       	breq	.+48     	; 0xdbe <receive_transmission+0xa4>
     d8e:	48 f4       	brcc	.+18     	; 0xda2 <receive_transmission+0x88>
     d90:	e1 14       	cp	r14, r1
     d92:	f1 04       	cpc	r15, r1
     d94:	89 f0       	breq	.+34     	; 0xdb8 <receive_transmission+0x9e>
     d96:	ea 94       	dec	r14
     d98:	ef 28       	or	r14, r15
     d9a:	d9 f4       	brne	.+54     	; 0xdd2 <receive_transmission+0xb8>
						{
							case 0:
								panSpeed_val	  [input_pos] = '\0';  // terminating null byte
								break;
							case 1:
								tiltSpeed_val	  [input_pos] = '\0';  // terminating null byte
     d9c:	e3 e3       	ldi	r30, 0x33	; 51
     d9e:	f0 e0       	ldi	r31, 0x00	; 0
     da0:	13 c0       	rjmp	.+38     	; 0xdc8 <receive_transmission+0xae>
					serial_write_usb(inByte);
					
					if (inByte == '%')
					{
						// ADD NULL TERMINATORS.
						switch(packetnum)
     da2:	83 e0       	ldi	r24, 0x03	; 3
     da4:	e8 16       	cp	r14, r24
     da6:	f1 04       	cpc	r15, r1
     da8:	69 f0       	breq	.+26     	; 0xdc4 <receive_transmission+0xaa>
     daa:	84 e0       	ldi	r24, 0x04	; 4
     dac:	e8 16       	cp	r14, r24
     dae:	f1 04       	cpc	r15, r1
     db0:	81 f4       	brne	.+32     	; 0xdd2 <receive_transmission+0xb8>
								break;
							case 3:
								roombaSpeed_val   [input_pos] = '\0';  // terminating null byte
								break;
							case 4:
								roombaRadius_val  [input_pos] = '\0';  // terminating null byte
     db2:	e9 ec       	ldi	r30, 0xC9	; 201
     db4:	f0 e0       	ldi	r31, 0x00	; 0
     db6:	08 c0       	rjmp	.+16     	; 0xdc8 <receive_transmission+0xae>
					{
						// ADD NULL TERMINATORS.
						switch(packetnum)
						{
							case 0:
								panSpeed_val	  [input_pos] = '\0';  // terminating null byte
     db8:	e1 e0       	ldi	r30, 0x01	; 1
     dba:	f0 e0       	ldi	r31, 0x00	; 0
     dbc:	05 c0       	rjmp	.+10     	; 0xdc8 <receive_transmission+0xae>
								break;
							case 1:
								tiltSpeed_val	  [input_pos] = '\0';  // terminating null byte
								break;
							case 2:
								laser_val         [input_pos] = '\0';  // terminating null byte
     dbe:	e5 e6       	ldi	r30, 0x65	; 101
     dc0:	f0 e0       	ldi	r31, 0x00	; 0
     dc2:	02 c0       	rjmp	.+4      	; 0xdc8 <receive_transmission+0xae>
								break;
							case 3:
								roombaSpeed_val   [input_pos] = '\0';  // terminating null byte
     dc4:	e7 e9       	ldi	r30, 0x97	; 151
     dc6:	f0 e0       	ldi	r31, 0x00	; 0
								break;
							case 4:
								roombaRadius_val  [input_pos] = '\0';  // terminating null byte
     dc8:	ec 0f       	add	r30, r28
     dca:	fd 1f       	adc	r31, r29
     dcc:	e0 0f       	add	r30, r16
     dce:	f1 1f       	adc	r31, r17
     dd0:	10 82       	st	Z, r1
								break;
							default:
								break;
						}
						// PROCESS INPUT VALUES.
						pan_speed     = atoi(panSpeed_val);
     dd2:	ce 01       	movw	r24, r28
     dd4:	01 96       	adiw	r24, 0x01	; 1
     dd6:	2b d5       	rcall	.+2646   	; 0x182e <atoi>
     dd8:	90 93 87 17 	sts	0x1787, r25	; 0x801787 <pan_speed+0x1>
     ddc:	80 93 86 17 	sts	0x1786, r24	; 0x801786 <pan_speed>
						tilt_speed    = atoi(tiltSpeed_val);
     de0:	ce 01       	movw	r24, r28
     de2:	c3 96       	adiw	r24, 0x33	; 51
     de4:	24 d5       	rcall	.+2632   	; 0x182e <atoi>
     de6:	90 93 85 17 	sts	0x1785, r25	; 0x801785 <tilt_speed+0x1>
     dea:	80 93 84 17 	sts	0x1784, r24	; 0x801784 <tilt_speed>
						laser_target_state	 = atoi(laser_val);
     dee:	ce 01       	movw	r24, r28
     df0:	8b 59       	subi	r24, 0x9B	; 155
     df2:	9f 4f       	sbci	r25, 0xFF	; 255
     df4:	1c d5       	rcall	.+2616   	; 0x182e <atoi>
     df6:	90 93 79 17 	sts	0x1779, r25	; 0x801779 <laser_target_state+0x1>
     dfa:	80 93 78 17 	sts	0x1778, r24	; 0x801778 <laser_target_state>
						roomba_target_speed  = atoi(roombaSpeed_val);
     dfe:	ce 01       	movw	r24, r28
     e00:	89 56       	subi	r24, 0x69	; 105
     e02:	9f 4f       	sbci	r25, 0xFF	; 255
     e04:	14 d5       	rcall	.+2600   	; 0x182e <atoi>
     e06:	90 93 83 17 	sts	0x1783, r25	; 0x801783 <roomba_target_speed+0x1>
     e0a:	80 93 82 17 	sts	0x1782, r24	; 0x801782 <roomba_target_speed>
						roomba_target_radius = atoi(roombaRadius_val);
     e0e:	ce 01       	movw	r24, r28
     e10:	87 53       	subi	r24, 0x37	; 55
     e12:	9f 4f       	sbci	r25, 0xFF	; 255
     e14:	0c d5       	rcall	.+2584   	; 0x182e <atoi>
     e16:	90 93 81 17 	sts	0x1781, r25	; 0x801781 <roomba_target_radius+0x1>
     e1a:	80 93 80 17 	sts	0x1780, r24	; 0x801780 <roomba_target_radius>
			
						// FOR DEBUG.
						serial_write_usb('\n');
     e1e:	8a e0       	ldi	r24, 0x0A	; 10
     e20:	62 d3       	rcall	.+1732   	; 0x14e6 <serial_write_usb>
						// Reset values.
						input_pos = 0;
						packetnum = 0;
						status = 0;
						
						break;
     e22:	6f c0       	rjmp	.+222    	; 0xf02 <receive_transmission+0x1e8>
					}
					else if (inByte == '|')
     e24:	9c 37       	cpi	r25, 0x7C	; 124
     e26:	69 f5       	brne	.+90     	; 0xe82 <receive_transmission+0x168>
					{
						// ADD NULL TERMINATORS.
						switch(packetnum)
     e28:	82 e0       	ldi	r24, 0x02	; 2
     e2a:	e8 16       	cp	r14, r24
     e2c:	f1 04       	cpc	r15, r1
     e2e:	c9 f0       	breq	.+50     	; 0xe62 <receive_transmission+0x148>
     e30:	50 f4       	brcc	.+20     	; 0xe46 <receive_transmission+0x12c>
     e32:	e1 14       	cp	r14, r1
     e34:	f1 04       	cpc	r15, r1
     e36:	91 f0       	breq	.+36     	; 0xe5c <receive_transmission+0x142>
     e38:	81 e0       	ldi	r24, 0x01	; 1
     e3a:	e8 16       	cp	r14, r24
     e3c:	f1 04       	cpc	r15, r1
     e3e:	d9 f4       	brne	.+54     	; 0xe76 <receive_transmission+0x15c>
						{
							case 0:
								panSpeed_val	  [input_pos] = '\0';  // terminating null byte
								break;
							case 1:
								tiltSpeed_val     [input_pos] = '\0';  // terminating null byte
     e40:	e3 e3       	ldi	r30, 0x33	; 51
     e42:	f0 e0       	ldi	r31, 0x00	; 0
     e44:	13 c0       	rjmp	.+38     	; 0xe6c <receive_transmission+0x152>
						break;
					}
					else if (inByte == '|')
					{
						// ADD NULL TERMINATORS.
						switch(packetnum)
     e46:	83 e0       	ldi	r24, 0x03	; 3
     e48:	e8 16       	cp	r14, r24
     e4a:	f1 04       	cpc	r15, r1
     e4c:	69 f0       	breq	.+26     	; 0xe68 <receive_transmission+0x14e>
     e4e:	84 e0       	ldi	r24, 0x04	; 4
     e50:	e8 16       	cp	r14, r24
     e52:	f1 04       	cpc	r15, r1
     e54:	81 f4       	brne	.+32     	; 0xe76 <receive_transmission+0x15c>
								break;
							case 3:
								roombaSpeed_val   [input_pos] = '\0';  // terminating null byte
								break;
							case 4:
								roombaRadius_val  [input_pos] = '\0';  // terminating null byte
     e56:	e9 ec       	ldi	r30, 0xC9	; 201
     e58:	f0 e0       	ldi	r31, 0x00	; 0
     e5a:	08 c0       	rjmp	.+16     	; 0xe6c <receive_transmission+0x152>
					{
						// ADD NULL TERMINATORS.
						switch(packetnum)
						{
							case 0:
								panSpeed_val	  [input_pos] = '\0';  // terminating null byte
     e5c:	e1 e0       	ldi	r30, 0x01	; 1
     e5e:	f0 e0       	ldi	r31, 0x00	; 0
     e60:	05 c0       	rjmp	.+10     	; 0xe6c <receive_transmission+0x152>
								break;
							case 1:
								tiltSpeed_val     [input_pos] = '\0';  // terminating null byte
								break;
							case 2:
								laser_val         [input_pos] = '\0';  // terminating null byte
     e62:	e5 e6       	ldi	r30, 0x65	; 101
     e64:	f0 e0       	ldi	r31, 0x00	; 0
     e66:	02 c0       	rjmp	.+4      	; 0xe6c <receive_transmission+0x152>
								break;
							case 3:
								roombaSpeed_val   [input_pos] = '\0';  // terminating null byte
     e68:	e7 e9       	ldi	r30, 0x97	; 151
     e6a:	f0 e0       	ldi	r31, 0x00	; 0
								break;
							case 4:
								roombaRadius_val  [input_pos] = '\0';  // terminating null byte
     e6c:	ec 0f       	add	r30, r28
     e6e:	fd 1f       	adc	r31, r29
     e70:	e0 0f       	add	r30, r16
     e72:	f1 1f       	adc	r31, r17
     e74:	10 82       	st	Z, r1
								break;
							default:
								break;
						}
						input_pos = 0;
						packetnum++;
     e76:	8f ef       	ldi	r24, 0xFF	; 255
     e78:	e8 1a       	sub	r14, r24
     e7a:	f8 0a       	sbc	r15, r24
								roombaRadius_val  [input_pos] = '\0';  // terminating null byte
								break;
							default:
								break;
						}
						input_pos = 0;
     e7c:	00 e0       	ldi	r16, 0x00	; 0
     e7e:	10 e0       	ldi	r17, 0x00	; 0
     e80:	6c cf       	rjmp	.-296    	; 0xd5a <receive_transmission+0x40>
						packetnum++;
					}
					else
					{
						switch(packetnum)
     e82:	82 e0       	ldi	r24, 0x02	; 2
     e84:	e8 16       	cp	r14, r24
     e86:	f1 04       	cpc	r15, r1
     e88:	01 f1       	breq	.+64     	; 0xeca <receive_transmission+0x1b0>
     e8a:	40 f4       	brcc	.+16     	; 0xe9c <receive_transmission+0x182>
     e8c:	e1 14       	cp	r14, r1
     e8e:	f1 04       	cpc	r15, r1
     e90:	71 f0       	breq	.+28     	; 0xeae <receive_transmission+0x194>
     e92:	81 e0       	ldi	r24, 0x01	; 1
     e94:	e8 16       	cp	r14, r24
     e96:	f1 04       	cpc	r15, r1
     e98:	89 f0       	breq	.+34     	; 0xebc <receive_transmission+0x1a2>
     e9a:	5f cf       	rjmp	.-322    	; 0xd5a <receive_transmission+0x40>
     e9c:	83 e0       	ldi	r24, 0x03	; 3
     e9e:	e8 16       	cp	r14, r24
     ea0:	f1 04       	cpc	r15, r1
     ea2:	d1 f0       	breq	.+52     	; 0xed8 <receive_transmission+0x1be>
     ea4:	84 e0       	ldi	r24, 0x04	; 4
     ea6:	e8 16       	cp	r14, r24
     ea8:	f1 04       	cpc	r15, r1
     eaa:	e9 f0       	breq	.+58     	; 0xee6 <receive_transmission+0x1cc>
     eac:	56 cf       	rjmp	.-340    	; 0xd5a <receive_transmission+0x40>
						{
							case 0:
								if (input_pos < (MAXINPUT - 2))
     eae:	00 33       	cpi	r16, 0x30	; 48
     eb0:	11 05       	cpc	r17, r1
     eb2:	08 f0       	brcs	.+2      	; 0xeb6 <receive_transmission+0x19c>
     eb4:	52 cf       	rjmp	.-348    	; 0xd5a <receive_transmission+0x40>
									panSpeed_val[input_pos++] = inByte;
     eb6:	e1 e0       	ldi	r30, 0x01	; 1
     eb8:	f0 e0       	ldi	r31, 0x00	; 0
     eba:	1b c0       	rjmp	.+54     	; 0xef2 <receive_transmission+0x1d8>
								break;
							case 1:
								if (input_pos < (MAXINPUT - 2))
     ebc:	00 33       	cpi	r16, 0x30	; 48
     ebe:	11 05       	cpc	r17, r1
     ec0:	08 f0       	brcs	.+2      	; 0xec4 <receive_transmission+0x1aa>
     ec2:	4b cf       	rjmp	.-362    	; 0xd5a <receive_transmission+0x40>
									tiltSpeed_val[input_pos++] = inByte;
     ec4:	e3 e3       	ldi	r30, 0x33	; 51
     ec6:	f0 e0       	ldi	r31, 0x00	; 0
     ec8:	14 c0       	rjmp	.+40     	; 0xef2 <receive_transmission+0x1d8>
								break;
							case 2:
								if (input_pos < (MAXINPUT - 2))
     eca:	00 33       	cpi	r16, 0x30	; 48
     ecc:	11 05       	cpc	r17, r1
     ece:	08 f0       	brcs	.+2      	; 0xed2 <receive_transmission+0x1b8>
     ed0:	44 cf       	rjmp	.-376    	; 0xd5a <receive_transmission+0x40>
									laser_val[input_pos++] = inByte;
     ed2:	e5 e6       	ldi	r30, 0x65	; 101
     ed4:	f0 e0       	ldi	r31, 0x00	; 0
     ed6:	0d c0       	rjmp	.+26     	; 0xef2 <receive_transmission+0x1d8>
								break;
							case 3:
								if (input_pos < (MAXINPUT - 2))
     ed8:	00 33       	cpi	r16, 0x30	; 48
     eda:	11 05       	cpc	r17, r1
     edc:	08 f0       	brcs	.+2      	; 0xee0 <receive_transmission+0x1c6>
     ede:	3d cf       	rjmp	.-390    	; 0xd5a <receive_transmission+0x40>
									roombaSpeed_val[input_pos++] = inByte;
     ee0:	e7 e9       	ldi	r30, 0x97	; 151
     ee2:	f0 e0       	ldi	r31, 0x00	; 0
     ee4:	06 c0       	rjmp	.+12     	; 0xef2 <receive_transmission+0x1d8>
								break;
							case 4:
								if (input_pos < (MAXINPUT - 2))
     ee6:	00 33       	cpi	r16, 0x30	; 48
     ee8:	11 05       	cpc	r17, r1
     eea:	08 f0       	brcs	.+2      	; 0xeee <receive_transmission+0x1d4>
     eec:	36 cf       	rjmp	.-404    	; 0xd5a <receive_transmission+0x40>
									roombaRadius_val[input_pos++] = inByte;
     eee:	e9 ec       	ldi	r30, 0xC9	; 201
     ef0:	f0 e0       	ldi	r31, 0x00	; 0
     ef2:	ec 0f       	add	r30, r28
     ef4:	fd 1f       	adc	r31, r29
     ef6:	e0 0f       	add	r30, r16
     ef8:	f1 1f       	adc	r31, r17
     efa:	90 83       	st	Z, r25
     efc:	0f 5f       	subi	r16, 0xFF	; 255
     efe:	1f 4f       	sbci	r17, 0xFF	; 255
     f00:	2c cf       	rjmp	.-424    	; 0xd5a <receive_transmission+0x40>
					}
				}
			}
		}
	}
}
     f02:	c5 50       	subi	r28, 0x05	; 5
     f04:	df 4f       	sbci	r29, 0xFF	; 255
     f06:	0f b6       	in	r0, 0x3f	; 63
     f08:	f8 94       	cli
     f0a:	de bf       	out	0x3e, r29	; 62
     f0c:	0f be       	out	0x3f, r0	; 63
     f0e:	cd bf       	out	0x3d, r28	; 61
     f10:	df 91       	pop	r29
     f12:	cf 91       	pop	r28
     f14:	1f 91       	pop	r17
     f16:	0f 91       	pop	r16
     f18:	ff 90       	pop	r15
     f1a:	ef 90       	pop	r14
     f1c:	08 95       	ret

00000f1e <update_laser>:
/*============================================================================*/
// Update the state of the laser.
// ~ 0.05ms average runtime
void update_laser()
{
	if (laser_state != laser_target_state)
     f1e:	20 91 7a 17 	lds	r18, 0x177A	; 0x80177a <laser_state>
     f22:	30 91 7b 17 	lds	r19, 0x177B	; 0x80177b <laser_state+0x1>
     f26:	80 91 78 17 	lds	r24, 0x1778	; 0x801778 <laser_target_state>
     f2a:	90 91 79 17 	lds	r25, 0x1779	; 0x801779 <laser_target_state+0x1>
     f2e:	28 17       	cp	r18, r24
     f30:	39 07       	cpc	r19, r25
     f32:	b9 f0       	breq	.+46     	; 0xf62 <update_laser+0x44>
	{
		laser_state = laser_target_state;
     f34:	80 91 78 17 	lds	r24, 0x1778	; 0x801778 <laser_target_state>
     f38:	90 91 79 17 	lds	r25, 0x1779	; 0x801779 <laser_target_state+0x1>
     f3c:	90 93 7b 17 	sts	0x177B, r25	; 0x80177b <laser_state+0x1>
     f40:	80 93 7a 17 	sts	0x177A, r24	; 0x80177a <laser_state>
		if (laser_target_state == 0)
     f44:	80 91 78 17 	lds	r24, 0x1778	; 0x801778 <laser_target_state>
     f48:	90 91 79 17 	lds	r25, 0x1779	; 0x801779 <laser_target_state+0x1>
     f4c:	89 2b       	or	r24, r25
     f4e:	11 f4       	brne	.+4      	; 0xf54 <update_laser+0x36>
		{
			PORTA &= 0b11111110;    // Turn laser off.
     f50:	10 98       	cbi	0x02, 0	; 2
     f52:	08 95       	ret
		}
		else if (laser_target_state == 1)
     f54:	80 91 78 17 	lds	r24, 0x1778	; 0x801778 <laser_target_state>
     f58:	90 91 79 17 	lds	r25, 0x1779	; 0x801779 <laser_target_state+0x1>
     f5c:	01 97       	sbiw	r24, 0x01	; 1
     f5e:	09 f4       	brne	.+2      	; 0xf62 <update_laser+0x44>
		{
			PORTA |= 0b00000001;    // Turn laser on.
     f60:	10 9a       	sbi	0x02, 0	; 2
     f62:	08 95       	ret

00000f64 <update_roomba>:
 * Radius should be between -5 to 5
 * Speed should be between -500 to 500
 */
void update_roomba()
{
	if (roomba_current_speed != roomba_target_speed || roomba_current_radius != roomba_target_radius)
     f64:	20 91 7e 17 	lds	r18, 0x177E	; 0x80177e <roomba_current_speed>
     f68:	30 91 7f 17 	lds	r19, 0x177F	; 0x80177f <roomba_current_speed+0x1>
     f6c:	80 91 82 17 	lds	r24, 0x1782	; 0x801782 <roomba_target_speed>
     f70:	90 91 83 17 	lds	r25, 0x1783	; 0x801783 <roomba_target_speed+0x1>
     f74:	28 17       	cp	r18, r24
     f76:	39 07       	cpc	r19, r25
     f78:	61 f4       	brne	.+24     	; 0xf92 <update_roomba+0x2e>
     f7a:	20 91 7c 17 	lds	r18, 0x177C	; 0x80177c <roomba_current_radius>
     f7e:	30 91 7d 17 	lds	r19, 0x177D	; 0x80177d <roomba_current_radius+0x1>
     f82:	80 91 80 17 	lds	r24, 0x1780	; 0x801780 <roomba_target_radius>
     f86:	90 91 81 17 	lds	r25, 0x1781	; 0x801781 <roomba_target_radius+0x1>
     f8a:	28 17       	cp	r18, r24
     f8c:	39 07       	cpc	r19, r25
     f8e:	09 f4       	brne	.+2      	; 0xf92 <update_roomba+0x2e>
     f90:	6b c0       	rjmp	.+214    	; 0x1068 <update_roomba+0x104>
	{
		if (roomba_target_speed > MAXSPEED)
     f92:	60 91 82 17 	lds	r22, 0x1782	; 0x801782 <roomba_target_speed>
     f96:	70 91 83 17 	lds	r23, 0x1783	; 0x801783 <roomba_target_speed+0x1>
     f9a:	07 2e       	mov	r0, r23
     f9c:	00 0c       	add	r0, r0
     f9e:	88 0b       	sbc	r24, r24
     fa0:	99 0b       	sbc	r25, r25
     fa2:	b3 d3       	rcall	.+1894   	; 0x170a <__floatsisf>
     fa4:	20 e0       	ldi	r18, 0x00	; 0
     fa6:	30 e0       	ldi	r19, 0x00	; 0
     fa8:	4a ef       	ldi	r20, 0xFA	; 250
     faa:	53 e4       	ldi	r21, 0x43	; 67
     fac:	0d d4       	rcall	.+2074   	; 0x17c8 <__gesf2>
     fae:	18 16       	cp	r1, r24
     fb0:	1c f4       	brge	.+6      	; 0xfb8 <update_roomba+0x54>
		{
			roomba_target_speed = MAXSPEED;
     fb2:	84 ef       	ldi	r24, 0xF4	; 244
     fb4:	91 e0       	ldi	r25, 0x01	; 1
     fb6:	12 c0       	rjmp	.+36     	; 0xfdc <update_roomba+0x78>
		}
		else if (roomba_target_speed < MINSPEED)
     fb8:	60 91 82 17 	lds	r22, 0x1782	; 0x801782 <roomba_target_speed>
     fbc:	70 91 83 17 	lds	r23, 0x1783	; 0x801783 <roomba_target_speed+0x1>
     fc0:	07 2e       	mov	r0, r23
     fc2:	00 0c       	add	r0, r0
     fc4:	88 0b       	sbc	r24, r24
     fc6:	99 0b       	sbc	r25, r25
     fc8:	a0 d3       	rcall	.+1856   	; 0x170a <__floatsisf>
     fca:	20 e0       	ldi	r18, 0x00	; 0
     fcc:	30 e0       	ldi	r19, 0x00	; 0
     fce:	4a ef       	ldi	r20, 0xFA	; 250
     fd0:	53 ec       	ldi	r21, 0xC3	; 195
     fd2:	95 d3       	rcall	.+1834   	; 0x16fe <__cmpsf2>
     fd4:	87 ff       	sbrs	r24, 7
     fd6:	06 c0       	rjmp	.+12     	; 0xfe4 <update_roomba+0x80>
		{
			roomba_target_speed = MINSPEED;
     fd8:	8c e0       	ldi	r24, 0x0C	; 12
     fda:	9e ef       	ldi	r25, 0xFE	; 254
     fdc:	90 93 83 17 	sts	0x1783, r25	; 0x801783 <roomba_target_speed+0x1>
     fe0:	80 93 82 17 	sts	0x1782, r24	; 0x801782 <roomba_target_speed>
		}
		
		if (roomba_target_radius > MAXRADIUS)
     fe4:	60 91 80 17 	lds	r22, 0x1780	; 0x801780 <roomba_target_radius>
     fe8:	70 91 81 17 	lds	r23, 0x1781	; 0x801781 <roomba_target_radius+0x1>
     fec:	07 2e       	mov	r0, r23
     fee:	00 0c       	add	r0, r0
     ff0:	88 0b       	sbc	r24, r24
     ff2:	99 0b       	sbc	r25, r25
     ff4:	8a d3       	rcall	.+1812   	; 0x170a <__floatsisf>
     ff6:	20 e0       	ldi	r18, 0x00	; 0
     ff8:	30 e0       	ldi	r19, 0x00	; 0
     ffa:	4a ef       	ldi	r20, 0xFA	; 250
     ffc:	54 e4       	ldi	r21, 0x44	; 68
     ffe:	e4 d3       	rcall	.+1992   	; 0x17c8 <__gesf2>
    1000:	18 16       	cp	r1, r24
    1002:	1c f4       	brge	.+6      	; 0x100a <update_roomba+0xa6>
		{
			roomba_target_radius = MAXRADIUS;
    1004:	80 ed       	ldi	r24, 0xD0	; 208
    1006:	97 e0       	ldi	r25, 0x07	; 7
    1008:	12 c0       	rjmp	.+36     	; 0x102e <update_roomba+0xca>
		}
		else if (roomba_target_radius < MINRADIUS)
    100a:	60 91 80 17 	lds	r22, 0x1780	; 0x801780 <roomba_target_radius>
    100e:	70 91 81 17 	lds	r23, 0x1781	; 0x801781 <roomba_target_radius+0x1>
    1012:	07 2e       	mov	r0, r23
    1014:	00 0c       	add	r0, r0
    1016:	88 0b       	sbc	r24, r24
    1018:	99 0b       	sbc	r25, r25
    101a:	77 d3       	rcall	.+1774   	; 0x170a <__floatsisf>
    101c:	20 e0       	ldi	r18, 0x00	; 0
    101e:	30 e0       	ldi	r19, 0x00	; 0
    1020:	4a ef       	ldi	r20, 0xFA	; 250
    1022:	54 ec       	ldi	r21, 0xC4	; 196
    1024:	6c d3       	rcall	.+1752   	; 0x16fe <__cmpsf2>
    1026:	87 ff       	sbrs	r24, 7
    1028:	06 c0       	rjmp	.+12     	; 0x1036 <update_roomba+0xd2>
		{
			roomba_target_radius = MINRADIUS;
    102a:	80 e3       	ldi	r24, 0x30	; 48
    102c:	98 ef       	ldi	r25, 0xF8	; 248
    102e:	90 93 81 17 	sts	0x1781, r25	; 0x801781 <roomba_target_radius+0x1>
    1032:	80 93 80 17 	sts	0x1780, r24	; 0x801780 <roomba_target_radius>
		}
		
		roomba_current_speed = roomba_target_speed;
    1036:	80 91 82 17 	lds	r24, 0x1782	; 0x801782 <roomba_target_speed>
    103a:	90 91 83 17 	lds	r25, 0x1783	; 0x801783 <roomba_target_speed+0x1>
    103e:	90 93 7f 17 	sts	0x177F, r25	; 0x80177f <roomba_current_speed+0x1>
    1042:	80 93 7e 17 	sts	0x177E, r24	; 0x80177e <roomba_current_speed>
		roomba_current_radius = roomba_target_radius;
    1046:	80 91 80 17 	lds	r24, 0x1780	; 0x801780 <roomba_target_radius>
    104a:	90 91 81 17 	lds	r25, 0x1781	; 0x801781 <roomba_target_radius+0x1>
    104e:	90 93 7d 17 	sts	0x177D, r25	; 0x80177d <roomba_current_radius+0x1>
    1052:	80 93 7c 17 	sts	0x177C, r24	; 0x80177c <roomba_current_radius>
		
		roomba_drive(roomba_target_speed, roomba_target_radius);
    1056:	60 91 80 17 	lds	r22, 0x1780	; 0x801780 <roomba_target_radius>
    105a:	70 91 81 17 	lds	r23, 0x1781	; 0x801781 <roomba_target_radius+0x1>
    105e:	80 91 82 17 	lds	r24, 0x1782	; 0x801782 <roomba_target_speed>
    1062:	90 91 83 17 	lds	r25, 0x1783	; 0x801783 <roomba_target_speed+0x1>
    1066:	b8 c0       	rjmp	.+368    	; 0x11d8 <roomba_drive>
    1068:	08 95       	ret

0000106a <update_servos>:
/*============================================================================*/
// Update the positions of the servos.
// ~ 0.08ms average runtime
void update_servos()
{
	adjust_tilt_angle(tilt_speed);
    106a:	80 91 84 17 	lds	r24, 0x1784	; 0x801784 <tilt_speed>
    106e:	90 91 85 17 	lds	r25, 0x1785	; 0x801785 <tilt_speed+0x1>
    1072:	72 d1       	rcall	.+740    	; 0x1358 <adjust_tilt_angle>
	adjust_pan_angle(pan_speed);
    1074:	80 91 86 17 	lds	r24, 0x1786	; 0x801786 <pan_speed>
    1078:	90 91 87 17 	lds	r25, 0x1787	; 0x801787 <pan_speed+0x1>
    107c:	0f c1       	rjmp	.+542    	; 0x129c <adjust_pan_angle>

0000107e <looper>:
}

void looper(int loops){
	while(loops--)
    107e:	00 97       	sbiw	r24, 0x00	; 0
    1080:	41 f0       	breq	.+16     	; 0x1092 <looper+0x14>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1082:	ef e3       	ldi	r30, 0x3F	; 63
    1084:	fc e9       	ldi	r31, 0x9C	; 156
    1086:	31 97       	sbiw	r30, 0x01	; 1
    1088:	f1 f7       	brne	.-4      	; 0x1086 <looper+0x8>
    108a:	00 c0       	rjmp	.+0      	; 0x108c <looper+0xe>
    108c:	00 00       	nop
    108e:	01 97       	sbiw	r24, 0x01	; 1
    1090:	f6 cf       	rjmp	.-20     	; 0x107e <looper>
		_delay_ms(10);
}
    1092:	08 95       	ret

00001094 <collision_detection_and_handling>:

int setting_v = 0;
int setting_p = 0;
void collision_detection_and_handling()
{
	if (roomba_detect_physical_wall() == 1 && setting_p != 1)
    1094:	be d0       	rcall	.+380    	; 0x1212 <roomba_detect_physical_wall>
    1096:	01 97       	sbiw	r24, 0x01	; 1
    1098:	61 f4       	brne	.+24     	; 0x10b2 <collision_detection_and_handling+0x1e>
    109a:	80 91 74 17 	lds	r24, 0x1774	; 0x801774 <setting_p>
    109e:	90 91 75 17 	lds	r25, 0x1775	; 0x801775 <setting_p+0x1>
    10a2:	01 97       	sbiw	r24, 0x01	; 1
    10a4:	31 f0       	breq	.+12     	; 0x10b2 <collision_detection_and_handling+0x1e>
	{
		setting_p = 2;
    10a6:	82 e0       	ldi	r24, 0x02	; 2
    10a8:	90 e0       	ldi	r25, 0x00	; 0
    10aa:	90 93 75 17 	sts	0x1775, r25	; 0x801775 <setting_p+0x1>
    10ae:	80 93 74 17 	sts	0x1774, r24	; 0x801774 <setting_p>
	{
		setting_v = 2;
	}
	*/
	
	if(setting_v == 2 ||setting_p == 2)
    10b2:	80 91 76 17 	lds	r24, 0x1776	; 0x801776 <setting_v>
    10b6:	90 91 77 17 	lds	r25, 0x1777	; 0x801777 <setting_v+0x1>
    10ba:	02 97       	sbiw	r24, 0x02	; 2
    10bc:	31 f0       	breq	.+12     	; 0x10ca <collision_detection_and_handling+0x36>
    10be:	80 91 74 17 	lds	r24, 0x1774	; 0x801774 <setting_p>
    10c2:	90 91 75 17 	lds	r25, 0x1775	; 0x801775 <setting_p+0x1>
    10c6:	02 97       	sbiw	r24, 0x02	; 2
    10c8:	c9 f4       	brne	.+50     	; 0x10fc <collision_detection_and_handling+0x68>
	{
		setting_p = 1;
    10ca:	81 e0       	ldi	r24, 0x01	; 1
    10cc:	90 e0       	ldi	r25, 0x00	; 0
    10ce:	90 93 75 17 	sts	0x1775, r25	; 0x801775 <setting_p+0x1>
    10d2:	80 93 74 17 	sts	0x1774, r24	; 0x801774 <setting_p>
		setting_v = 1;
    10d6:	90 93 77 17 	sts	0x1777, r25	; 0x801777 <setting_v+0x1>
    10da:	80 93 76 17 	sts	0x1776, r24	; 0x801776 <setting_v>
		Disable_Interrupt();
    10de:	f8 94       	cli
		roomba_drive(-300, 0);
    10e0:	60 e0       	ldi	r22, 0x00	; 0
    10e2:	70 e0       	ldi	r23, 0x00	; 0
    10e4:	84 ed       	ldi	r24, 0xD4	; 212
    10e6:	9e ef       	ldi	r25, 0xFE	; 254
    10e8:	77 d0       	rcall	.+238    	; 0x11d8 <roomba_drive>
		looper(100);
    10ea:	84 e6       	ldi	r24, 0x64	; 100
    10ec:	90 e0       	ldi	r25, 0x00	; 0
    10ee:	c7 df       	rcall	.-114    	; 0x107e <looper>
		roomba_drive(0, 0);
    10f0:	60 e0       	ldi	r22, 0x00	; 0
    10f2:	70 e0       	ldi	r23, 0x00	; 0
    10f4:	80 e0       	ldi	r24, 0x00	; 0
    10f6:	90 e0       	ldi	r25, 0x00	; 0
    10f8:	6f d0       	rcall	.+222    	; 0x11d8 <roomba_drive>
		Enable_Interrupt();
    10fa:	78 94       	sei
	}
	
	if(roomba_detect_physical_wall() == 0)
    10fc:	8a d0       	rcall	.+276    	; 0x1212 <roomba_detect_physical_wall>
    10fe:	89 2b       	or	r24, r25
    1100:	21 f4       	brne	.+8      	; 0x110a <collision_detection_and_handling+0x76>
	{
		setting_p = 0;
    1102:	10 92 75 17 	sts	0x1775, r1	; 0x801775 <setting_p+0x1>
    1106:	10 92 74 17 	sts	0x1774, r1	; 0x801774 <setting_p>
    110a:	08 95       	ret

0000110c <remote>:
/*============================================================================*/
void remote()
{
	for(;;)
	{
		receive_transmission();
    110c:	06 de       	rcall	.-1012   	; 0xd1a <receive_transmission>
		update_laser();
    110e:	07 df       	rcall	.-498    	; 0xf1e <update_laser>
		update_servos();
    1110:	ac df       	rcall	.-168    	; 0x106a <update_servos>
		update_roomba();
    1112:	28 df       	rcall	.-432    	; 0xf64 <update_roomba>
		collision_detection_and_handling();
    1114:	bf df       	rcall	.-130    	; 0x1094 <collision_detection_and_handling>
		
		// Reseting servo targets.
		pan_speed   = 0;
    1116:	10 92 87 17 	sts	0x1787, r1	; 0x801787 <pan_speed+0x1>
    111a:	10 92 86 17 	sts	0x1786, r1	; 0x801786 <pan_speed>
		tilt_speed  = 0;
    111e:	10 92 85 17 	sts	0x1785, r1	; 0x801785 <tilt_speed+0x1>
    1122:	10 92 84 17 	sts	0x1784, r1	; 0x801784 <tilt_speed>
		
		// Pass off to any other System level task.
		Task_Next();	
    1126:	0e dd       	rcall	.-1508   	; 0xb44 <Task_Next>
	}
    1128:	f1 cf       	rjmp	.-30     	; 0x110c <remote>

0000112a <a_main>:

/*============================================================================*/
void a_main()
{	
	// Creating Setup Task.
	Task_Create_System(setup, 0);
    112a:	60 e0       	ldi	r22, 0x00	; 0
    112c:	70 e0       	ldi	r23, 0x00	; 0
    112e:	86 e8       	ldi	r24, 0x86	; 134
    1130:	96 e0       	ldi	r25, 0x06	; 6
    1132:	75 dc       	rcall	.-1814   	; 0xa1e <Task_Create_System>
	
	// Creating Main Task.
	Task_Create_System(remote, 1);
    1134:	61 e0       	ldi	r22, 0x01	; 1
    1136:	70 e0       	ldi	r23, 0x00	; 0
    1138:	86 e8       	ldi	r24, 0x86	; 134
    113a:	98 e0       	ldi	r25, 0x08	; 8
    113c:	70 cc       	rjmp	.-1824   	; 0xa1e <Task_Create_System>

0000113e <init_roomba>:
	serial_write_roomba(DOCK);
}

/*============================================================================*/
void roomba_power_off() {
	serial_write_roomba(STOP);
    113e:	09 9a       	sbi	0x01, 1	; 1
    1140:	11 9a       	sbi	0x02, 1	; 2
    1142:	76 d2       	rcall	.+1260   	; 0x1630 <init_uart_roomba>
    1144:	2f ef       	ldi	r18, 0xFF	; 255
    1146:	81 e1       	ldi	r24, 0x11	; 17
    1148:	9a e7       	ldi	r25, 0x7A	; 122
    114a:	21 50       	subi	r18, 0x01	; 1
    114c:	80 40       	sbci	r24, 0x00	; 0
    114e:	90 40       	sbci	r25, 0x00	; 0
    1150:	e1 f7       	brne	.-8      	; 0x114a <init_roomba+0xc>
    1152:	00 c0       	rjmp	.+0      	; 0x1154 <init_roomba+0x16>
    1154:	00 00       	nop
    1156:	11 98       	cbi	0x02, 1	; 2
    1158:	2f ef       	ldi	r18, 0xFF	; 255
    115a:	85 ea       	ldi	r24, 0xA5	; 165
    115c:	9e e0       	ldi	r25, 0x0E	; 14
    115e:	21 50       	subi	r18, 0x01	; 1
    1160:	80 40       	sbci	r24, 0x00	; 0
    1162:	90 40       	sbci	r25, 0x00	; 0
    1164:	e1 f7       	brne	.-8      	; 0x115e <init_roomba+0x20>
    1166:	00 c0       	rjmp	.+0      	; 0x1168 <init_roomba+0x2a>
    1168:	00 00       	nop
    116a:	11 9a       	sbi	0x02, 1	; 2
    116c:	2f ef       	ldi	r18, 0xFF	; 255
    116e:	85 ea       	ldi	r24, 0xA5	; 165
    1170:	9e e0       	ldi	r25, 0x0E	; 14
    1172:	21 50       	subi	r18, 0x01	; 1
    1174:	80 40       	sbci	r24, 0x00	; 0
    1176:	90 40       	sbci	r25, 0x00	; 0
    1178:	e1 f7       	brne	.-8      	; 0x1172 <init_roomba+0x34>
    117a:	00 c0       	rjmp	.+0      	; 0x117c <init_roomba+0x3e>
    117c:	00 00       	nop
    117e:	11 98       	cbi	0x02, 1	; 2
    1180:	2f ef       	ldi	r18, 0xFF	; 255
    1182:	85 ea       	ldi	r24, 0xA5	; 165
    1184:	9e e0       	ldi	r25, 0x0E	; 14
    1186:	21 50       	subi	r18, 0x01	; 1
    1188:	80 40       	sbci	r24, 0x00	; 0
    118a:	90 40       	sbci	r25, 0x00	; 0
    118c:	e1 f7       	brne	.-8      	; 0x1186 <init_roomba+0x48>
    118e:	00 c0       	rjmp	.+0      	; 0x1190 <init_roomba+0x52>
    1190:	00 00       	nop
    1192:	11 9a       	sbi	0x02, 1	; 2
    1194:	2f ef       	ldi	r18, 0xFF	; 255
    1196:	85 ea       	ldi	r24, 0xA5	; 165
    1198:	9e e0       	ldi	r25, 0x0E	; 14
    119a:	21 50       	subi	r18, 0x01	; 1
    119c:	80 40       	sbci	r24, 0x00	; 0
    119e:	90 40       	sbci	r25, 0x00	; 0
    11a0:	e1 f7       	brne	.-8      	; 0x119a <init_roomba+0x5c>
    11a2:	00 c0       	rjmp	.+0      	; 0x11a4 <init_roomba+0x66>
    11a4:	00 00       	nop
    11a6:	11 98       	cbi	0x02, 1	; 2
    11a8:	2f ef       	ldi	r18, 0xFF	; 255
    11aa:	85 ea       	ldi	r24, 0xA5	; 165
    11ac:	9e e0       	ldi	r25, 0x0E	; 14
    11ae:	21 50       	subi	r18, 0x01	; 1
    11b0:	80 40       	sbci	r24, 0x00	; 0
    11b2:	90 40       	sbci	r25, 0x00	; 0
    11b4:	e1 f7       	brne	.-8      	; 0x11ae <init_roomba+0x70>
    11b6:	00 c0       	rjmp	.+0      	; 0x11b8 <init_roomba+0x7a>
    11b8:	00 00       	nop
    11ba:	11 9a       	sbi	0x02, 1	; 2
    11bc:	39 d2       	rcall	.+1138   	; 0x1630 <init_uart_roomba>
    11be:	80 e8       	ldi	r24, 0x80	; 128
    11c0:	66 d2       	rcall	.+1228   	; 0x168e <serial_write_roomba>
    11c2:	2f ef       	ldi	r18, 0xFF	; 255
    11c4:	83 ec       	ldi	r24, 0xC3	; 195
    11c6:	99 e0       	ldi	r25, 0x09	; 9
    11c8:	21 50       	subi	r18, 0x01	; 1
    11ca:	80 40       	sbci	r24, 0x00	; 0
    11cc:	90 40       	sbci	r25, 0x00	; 0
    11ce:	e1 f7       	brne	.-8      	; 0x11c8 <init_roomba+0x8a>
    11d0:	00 c0       	rjmp	.+0      	; 0x11d2 <init_roomba+0x94>
    11d2:	00 00       	nop
    11d4:	83 e8       	ldi	r24, 0x83	; 131
    11d6:	5b c2       	rjmp	.+1206   	; 0x168e <serial_write_roomba>

000011d8 <roomba_drive>:
    11d8:	1f 93       	push	r17
    11da:	cf 93       	push	r28
    11dc:	df 93       	push	r29
    11de:	00 d0       	rcall	.+0      	; 0x11e0 <roomba_drive+0x8>
    11e0:	cd b7       	in	r28, 0x3d	; 61
    11e2:	de b7       	in	r29, 0x3e	; 62
    11e4:	18 2f       	mov	r17, r24
    11e6:	89 e8       	ldi	r24, 0x89	; 137
    11e8:	6b 83       	std	Y+3, r22	; 0x03
    11ea:	7a 83       	std	Y+2, r23	; 0x02
    11ec:	99 83       	std	Y+1, r25	; 0x01
    11ee:	4f d2       	rcall	.+1182   	; 0x168e <serial_write_roomba>
    11f0:	99 81       	ldd	r25, Y+1	; 0x01
    11f2:	89 2f       	mov	r24, r25
    11f4:	4c d2       	rcall	.+1176   	; 0x168e <serial_write_roomba>
    11f6:	81 2f       	mov	r24, r17
    11f8:	4a d2       	rcall	.+1172   	; 0x168e <serial_write_roomba>
    11fa:	7a 81       	ldd	r23, Y+2	; 0x02
    11fc:	87 2f       	mov	r24, r23
    11fe:	47 d2       	rcall	.+1166   	; 0x168e <serial_write_roomba>
    1200:	6b 81       	ldd	r22, Y+3	; 0x03
    1202:	86 2f       	mov	r24, r22
    1204:	0f 90       	pop	r0
    1206:	0f 90       	pop	r0
    1208:	0f 90       	pop	r0
    120a:	df 91       	pop	r29
    120c:	cf 91       	pop	r28
    120e:	1f 91       	pop	r17
    1210:	3e c2       	rjmp	.+1148   	; 0x168e <serial_write_roomba>

00001212 <roomba_detect_physical_wall>:
}

/*============================================================================*/
unsigned int roomba_detect_physical_wall(void)
{
	serial_write_roomba(SENSORS);
    1212:	8e e8       	ldi	r24, 0x8E	; 142
    1214:	3c d2       	rcall	.+1144   	; 0x168e <serial_write_roomba>
	serial_write_roomba(7);
    1216:	87 e0       	ldi	r24, 0x07	; 7
    1218:	3a d2       	rcall	.+1140   	; 0x168e <serial_write_roomba>
	while (rx_data_in_blue_tooth_buffer != 1);	// Wait for the Roomba to send us data.
    121a:	80 91 7c 1d 	lds	r24, 0x1D7C	; 0x801d7c <rx_data_in_blue_tooth_buffer>
    121e:	90 91 7d 1d 	lds	r25, 0x1D7D	; 0x801d7d <rx_data_in_blue_tooth_buffer+0x1>
    1222:	01 97       	sbiw	r24, 0x01	; 1
    1224:	d1 f7       	brne	.-12     	; 0x121a <roomba_detect_physical_wall+0x8>
	unsigned int collision = serial_read_roomba();
    1226:	1e d2       	rcall	.+1084   	; 0x1664 <serial_read_roomba>

	if (collision != 0)
    1228:	21 e0       	ldi	r18, 0x01	; 1
    122a:	30 e0       	ldi	r19, 0x00	; 0
    122c:	81 11       	cpse	r24, r1
    122e:	02 c0       	rjmp	.+4      	; 0x1234 <roomba_detect_physical_wall+0x22>
    1230:	20 e0       	ldi	r18, 0x00	; 0
    1232:	30 e0       	ldi	r19, 0x00	; 0
	{
		return 1;
	}
	return 0;
}
    1234:	c9 01       	movw	r24, r18
    1236:	08 95       	ret

00001238 <init_servos>:

/*============================================================================*/
void init_servos()
{
	// Setting PWM pins 2 & 3 to output and to low.
	DDRE  |= 0b00110000;
    1238:	8d b1       	in	r24, 0x0d	; 13
    123a:	80 63       	ori	r24, 0x30	; 48
    123c:	8d b9       	out	0x0d, r24	; 13
	PORTE &= 0b11001111;
    123e:	8e b1       	in	r24, 0x0e	; 14
    1240:	8f 7c       	andi	r24, 0xCF	; 207
    1242:	8e b9       	out	0x0e, r24	; 14

	// Initializing timer.
	TCNT3 = 0;												// set counter to 0.
    1244:	10 92 95 00 	sts	0x0095, r1	; 0x800095 <__TEXT_REGION_LENGTH__+0x700095>
    1248:	10 92 94 00 	sts	0x0094, r1	; 0x800094 <__TEXT_REGION_LENGTH__+0x700094>
	TCCR3A = 0x00;
    124c:	a0 e9       	ldi	r26, 0x90	; 144
    124e:	b0 e0       	ldi	r27, 0x00	; 0
    1250:	1c 92       	st	X, r1
	TCCR3B = 0x00;
    1252:	e1 e9       	ldi	r30, 0x91	; 145
    1254:	f0 e0       	ldi	r31, 0x00	; 0
    1256:	10 82       	st	Z, r1
	TCCR3A = (1 << COM3B1) | (1 << COM3C1) | (1 << WGM30);  // NON Inverted PWM.
    1258:	89 e2       	ldi	r24, 0x29	; 41
    125a:	8c 93       	st	X, r24
	TCCR3B |= (1 << WGM33) | (1 << CS41) | (1 << CS40);		// PRESCALER = 64 MODE 14 (FAST PWM).
    125c:	80 81       	ld	r24, Z
    125e:	83 61       	ori	r24, 0x13	; 19
    1260:	80 83       	st	Z, r24
	OCR3A = 2500;
    1262:	84 ec       	ldi	r24, 0xC4	; 196
    1264:	99 e0       	ldi	r25, 0x09	; 9
    1266:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <__TEXT_REGION_LENGTH__+0x700099>
    126a:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <__TEXT_REGION_LENGTH__+0x700098>

	// Setting angle to 90 degrees.
	current_pan_angle  = DEFUALT_ANGLE_VAL;
    126e:	8c eb       	ldi	r24, 0xBC	; 188
    1270:	90 e0       	ldi	r25, 0x00	; 0
    1272:	90 93 83 1d 	sts	0x1D83, r25	; 0x801d83 <current_pan_angle+0x1>
    1276:	80 93 82 1d 	sts	0x1D82, r24	; 0x801d82 <current_pan_angle>
	current_tilt_angle = DEFUALT_ANGLE_VAL;
    127a:	90 93 81 1d 	sts	0x1D81, r25	; 0x801d81 <current_tilt_angle+0x1>
    127e:	80 93 80 1d 	sts	0x1D80, r24	; 0x801d80 <current_tilt_angle>

	// Setting target angle to the current angle values.
	OCR3C = current_pan_angle;
    1282:	90 93 9d 00 	sts	0x009D, r25	; 0x80009d <__TEXT_REGION_LENGTH__+0x70009d>
    1286:	80 93 9c 00 	sts	0x009C, r24	; 0x80009c <__TEXT_REGION_LENGTH__+0x70009c>
	OCR3B = current_tilt_angle;
    128a:	80 91 80 1d 	lds	r24, 0x1D80	; 0x801d80 <current_tilt_angle>
    128e:	90 91 81 1d 	lds	r25, 0x1D81	; 0x801d81 <current_tilt_angle+0x1>
    1292:	90 93 9b 00 	sts	0x009B, r25	; 0x80009b <__TEXT_REGION_LENGTH__+0x70009b>
    1296:	80 93 9a 00 	sts	0x009A, r24	; 0x80009a <__TEXT_REGION_LENGTH__+0x70009a>
    129a:	08 95       	ret

0000129c <adjust_pan_angle>:
}

/*============================================================================*/
// angle_delta is an integer between -5 and 5.
void adjust_pan_angle(int angle_delta)
{
    129c:	cf 92       	push	r12
    129e:	df 92       	push	r13
    12a0:	ef 92       	push	r14
    12a2:	ff 92       	push	r15
    12a4:	cf 93       	push	r28
    12a6:	df 93       	push	r29
    12a8:	ec 01       	movw	r28, r24
	//Verifying angle delta.
	if (angle_delta > MAX_ANGLE_DELTA)		// Max increase.
    12aa:	bc 01       	movw	r22, r24
    12ac:	99 0f       	add	r25, r25
    12ae:	88 0b       	sbc	r24, r24
    12b0:	99 0b       	sbc	r25, r25
    12b2:	2b d2       	rcall	.+1110   	; 0x170a <__floatsisf>
    12b4:	6b 01       	movw	r12, r22
    12b6:	7c 01       	movw	r14, r24
    12b8:	20 e0       	ldi	r18, 0x00	; 0
    12ba:	30 e0       	ldi	r19, 0x00	; 0
    12bc:	40 ea       	ldi	r20, 0xA0	; 160
    12be:	50 e4       	ldi	r21, 0x40	; 64
    12c0:	83 d2       	rcall	.+1286   	; 0x17c8 <__gesf2>
    12c2:	18 16       	cp	r1, r24
    12c4:	64 f0       	brlt	.+24     	; 0x12de <adjust_pan_angle+0x42>
	{
		angle_delta = MAX_ANGLE_DELTA;
	}
	else if (angle_delta < MIN_ANGLE_DELTA)	// Max decrease.
    12c6:	20 e0       	ldi	r18, 0x00	; 0
    12c8:	30 e0       	ldi	r19, 0x00	; 0
    12ca:	40 ea       	ldi	r20, 0xA0	; 160
    12cc:	50 ec       	ldi	r21, 0xC0	; 192
    12ce:	c7 01       	movw	r24, r14
    12d0:	b6 01       	movw	r22, r12
    12d2:	15 d2       	rcall	.+1066   	; 0x16fe <__cmpsf2>
    12d4:	87 ff       	sbrs	r24, 7
    12d6:	05 c0       	rjmp	.+10     	; 0x12e2 <adjust_pan_angle+0x46>
	{
		angle_delta = MIN_ANGLE_DELTA;
    12d8:	cb ef       	ldi	r28, 0xFB	; 251
    12da:	df ef       	ldi	r29, 0xFF	; 255
    12dc:	02 c0       	rjmp	.+4      	; 0x12e2 <adjust_pan_angle+0x46>
void adjust_pan_angle(int angle_delta)
{
	//Verifying angle delta.
	if (angle_delta > MAX_ANGLE_DELTA)		// Max increase.
	{
		angle_delta = MAX_ANGLE_DELTA;
    12de:	c5 e0       	ldi	r28, 0x05	; 5
    12e0:	d0 e0       	ldi	r29, 0x00	; 0
	{
		angle_delta = MIN_ANGLE_DELTA;
	}

	//Verifying angle.	
	current_pan_angle += angle_delta;
    12e2:	80 91 82 1d 	lds	r24, 0x1D82	; 0x801d82 <current_pan_angle>
    12e6:	90 91 83 1d 	lds	r25, 0x1D83	; 0x801d83 <current_pan_angle+0x1>
    12ea:	c8 0f       	add	r28, r24
    12ec:	d9 1f       	adc	r29, r25
	if (current_pan_angle > MAX_ANGLE_VAL)			// Max angle.
    12ee:	be 01       	movw	r22, r28
    12f0:	0d 2e       	mov	r0, r29
    12f2:	00 0c       	add	r0, r0
    12f4:	88 0b       	sbc	r24, r24
    12f6:	99 0b       	sbc	r25, r25
    12f8:	08 d2       	rcall	.+1040   	; 0x170a <__floatsisf>
    12fa:	6b 01       	movw	r12, r22
    12fc:	7c 01       	movw	r14, r24
    12fe:	20 e0       	ldi	r18, 0x00	; 0
    1300:	30 e0       	ldi	r19, 0x00	; 0
    1302:	46 e9       	ldi	r20, 0x96	; 150
    1304:	53 e4       	ldi	r21, 0x43	; 67
    1306:	60 d2       	rcall	.+1216   	; 0x17c8 <__gesf2>
    1308:	18 16       	cp	r1, r24
    130a:	1c f4       	brge	.+6      	; 0x1312 <adjust_pan_angle+0x76>
	{
		current_pan_angle = MAX_ANGLE_VAL;
    130c:	8c e2       	ldi	r24, 0x2C	; 44
    130e:	91 e0       	ldi	r25, 0x01	; 1
    1310:	10 c0       	rjmp	.+32     	; 0x1332 <adjust_pan_angle+0x96>
	}
	else if (current_pan_angle < MIN_ANGLE_VAL)		// Min angle.
    1312:	20 e0       	ldi	r18, 0x00	; 0
    1314:	30 e0       	ldi	r19, 0x00	; 0
    1316:	4a e8       	ldi	r20, 0x8A	; 138
    1318:	52 e4       	ldi	r21, 0x42	; 66
    131a:	c7 01       	movw	r24, r14
    131c:	b6 01       	movw	r22, r12
    131e:	ef d1       	rcall	.+990    	; 0x16fe <__cmpsf2>
    1320:	87 fd       	sbrc	r24, 7
    1322:	05 c0       	rjmp	.+10     	; 0x132e <adjust_pan_angle+0x92>
	{
		angle_delta = MIN_ANGLE_DELTA;
	}

	//Verifying angle.	
	current_pan_angle += angle_delta;
    1324:	d0 93 83 1d 	sts	0x1D83, r29	; 0x801d83 <current_pan_angle+0x1>
    1328:	c0 93 82 1d 	sts	0x1D82, r28	; 0x801d82 <current_pan_angle>
    132c:	06 c0       	rjmp	.+12     	; 0x133a <adjust_pan_angle+0x9e>
	{
		current_pan_angle = MAX_ANGLE_VAL;
	}
	else if (current_pan_angle < MIN_ANGLE_VAL)		// Min angle.
	{
		current_pan_angle = MIN_ANGLE_VAL;
    132e:	85 e4       	ldi	r24, 0x45	; 69
    1330:	90 e0       	ldi	r25, 0x00	; 0
    1332:	90 93 83 1d 	sts	0x1D83, r25	; 0x801d83 <current_pan_angle+0x1>
    1336:	80 93 82 1d 	sts	0x1D82, r24	; 0x801d82 <current_pan_angle>
	}
	OCR3C = current_pan_angle;
    133a:	80 91 82 1d 	lds	r24, 0x1D82	; 0x801d82 <current_pan_angle>
    133e:	90 91 83 1d 	lds	r25, 0x1D83	; 0x801d83 <current_pan_angle+0x1>
    1342:	90 93 9d 00 	sts	0x009D, r25	; 0x80009d <__TEXT_REGION_LENGTH__+0x70009d>
    1346:	80 93 9c 00 	sts	0x009C, r24	; 0x80009c <__TEXT_REGION_LENGTH__+0x70009c>
}
    134a:	df 91       	pop	r29
    134c:	cf 91       	pop	r28
    134e:	ff 90       	pop	r15
    1350:	ef 90       	pop	r14
    1352:	df 90       	pop	r13
    1354:	cf 90       	pop	r12
    1356:	08 95       	ret

00001358 <adjust_tilt_angle>:

/*============================================================================*/
// angle_delta is an integer between -5 and 5.
void adjust_tilt_angle(int angle_delta)
{
    1358:	cf 92       	push	r12
    135a:	df 92       	push	r13
    135c:	ef 92       	push	r14
    135e:	ff 92       	push	r15
    1360:	cf 93       	push	r28
    1362:	df 93       	push	r29
    1364:	ec 01       	movw	r28, r24
	//Verifying angle delta.
	if (angle_delta > MAX_ANGLE_DELTA)		// Max increase.
    1366:	bc 01       	movw	r22, r24
    1368:	99 0f       	add	r25, r25
    136a:	88 0b       	sbc	r24, r24
    136c:	99 0b       	sbc	r25, r25
    136e:	cd d1       	rcall	.+922    	; 0x170a <__floatsisf>
    1370:	6b 01       	movw	r12, r22
    1372:	7c 01       	movw	r14, r24
    1374:	20 e0       	ldi	r18, 0x00	; 0
    1376:	30 e0       	ldi	r19, 0x00	; 0
    1378:	40 ea       	ldi	r20, 0xA0	; 160
    137a:	50 e4       	ldi	r21, 0x40	; 64
    137c:	25 d2       	rcall	.+1098   	; 0x17c8 <__gesf2>
    137e:	18 16       	cp	r1, r24
    1380:	64 f0       	brlt	.+24     	; 0x139a <adjust_tilt_angle+0x42>
	{
		angle_delta = MAX_ANGLE_DELTA;
	}
	else if (angle_delta < MIN_ANGLE_DELTA)	// Max decrease.
    1382:	20 e0       	ldi	r18, 0x00	; 0
    1384:	30 e0       	ldi	r19, 0x00	; 0
    1386:	40 ea       	ldi	r20, 0xA0	; 160
    1388:	50 ec       	ldi	r21, 0xC0	; 192
    138a:	c7 01       	movw	r24, r14
    138c:	b6 01       	movw	r22, r12
    138e:	b7 d1       	rcall	.+878    	; 0x16fe <__cmpsf2>
    1390:	87 ff       	sbrs	r24, 7
    1392:	05 c0       	rjmp	.+10     	; 0x139e <adjust_tilt_angle+0x46>
	{
		angle_delta = MIN_ANGLE_DELTA;
    1394:	cb ef       	ldi	r28, 0xFB	; 251
    1396:	df ef       	ldi	r29, 0xFF	; 255
    1398:	02 c0       	rjmp	.+4      	; 0x139e <adjust_tilt_angle+0x46>
void adjust_tilt_angle(int angle_delta)
{
	//Verifying angle delta.
	if (angle_delta > MAX_ANGLE_DELTA)		// Max increase.
	{
		angle_delta = MAX_ANGLE_DELTA;
    139a:	c5 e0       	ldi	r28, 0x05	; 5
    139c:	d0 e0       	ldi	r29, 0x00	; 0
	{
		angle_delta = MIN_ANGLE_DELTA;
	}

	//Verifying angle.	
	current_tilt_angle += angle_delta;
    139e:	80 91 80 1d 	lds	r24, 0x1D80	; 0x801d80 <current_tilt_angle>
    13a2:	90 91 81 1d 	lds	r25, 0x1D81	; 0x801d81 <current_tilt_angle+0x1>
    13a6:	c8 0f       	add	r28, r24
    13a8:	d9 1f       	adc	r29, r25
	if (current_tilt_angle > MAX_ANGLE_VAL)			// Max angle.
    13aa:	be 01       	movw	r22, r28
    13ac:	0d 2e       	mov	r0, r29
    13ae:	00 0c       	add	r0, r0
    13b0:	88 0b       	sbc	r24, r24
    13b2:	99 0b       	sbc	r25, r25
    13b4:	aa d1       	rcall	.+852    	; 0x170a <__floatsisf>
    13b6:	6b 01       	movw	r12, r22
    13b8:	7c 01       	movw	r14, r24
    13ba:	20 e0       	ldi	r18, 0x00	; 0
    13bc:	30 e0       	ldi	r19, 0x00	; 0
    13be:	46 e9       	ldi	r20, 0x96	; 150
    13c0:	53 e4       	ldi	r21, 0x43	; 67
    13c2:	02 d2       	rcall	.+1028   	; 0x17c8 <__gesf2>
    13c4:	18 16       	cp	r1, r24
    13c6:	1c f4       	brge	.+6      	; 0x13ce <adjust_tilt_angle+0x76>
	{
		current_tilt_angle = MAX_ANGLE_VAL;
    13c8:	8c e2       	ldi	r24, 0x2C	; 44
    13ca:	91 e0       	ldi	r25, 0x01	; 1
    13cc:	10 c0       	rjmp	.+32     	; 0x13ee <adjust_tilt_angle+0x96>
	}
	else if (current_tilt_angle < MIN_ANGLE_VAL)	// Min angle.
    13ce:	20 e0       	ldi	r18, 0x00	; 0
    13d0:	30 e0       	ldi	r19, 0x00	; 0
    13d2:	4a e8       	ldi	r20, 0x8A	; 138
    13d4:	52 e4       	ldi	r21, 0x42	; 66
    13d6:	c7 01       	movw	r24, r14
    13d8:	b6 01       	movw	r22, r12
    13da:	91 d1       	rcall	.+802    	; 0x16fe <__cmpsf2>
    13dc:	87 fd       	sbrc	r24, 7
    13de:	05 c0       	rjmp	.+10     	; 0x13ea <adjust_tilt_angle+0x92>
	{
		angle_delta = MIN_ANGLE_DELTA;
	}

	//Verifying angle.	
	current_tilt_angle += angle_delta;
    13e0:	d0 93 81 1d 	sts	0x1D81, r29	; 0x801d81 <current_tilt_angle+0x1>
    13e4:	c0 93 80 1d 	sts	0x1D80, r28	; 0x801d80 <current_tilt_angle>
    13e8:	06 c0       	rjmp	.+12     	; 0x13f6 <adjust_tilt_angle+0x9e>
	{
		current_tilt_angle = MAX_ANGLE_VAL;
	}
	else if (current_tilt_angle < MIN_ANGLE_VAL)	// Min angle.
	{
		current_tilt_angle = MIN_ANGLE_VAL;
    13ea:	85 e4       	ldi	r24, 0x45	; 69
    13ec:	90 e0       	ldi	r25, 0x00	; 0
    13ee:	90 93 81 1d 	sts	0x1D81, r25	; 0x801d81 <current_tilt_angle+0x1>
    13f2:	80 93 80 1d 	sts	0x1D80, r24	; 0x801d80 <current_tilt_angle>
	}
	OCR3B = current_tilt_angle;
    13f6:	80 91 80 1d 	lds	r24, 0x1D80	; 0x801d80 <current_tilt_angle>
    13fa:	90 91 81 1d 	lds	r25, 0x1D81	; 0x801d81 <current_tilt_angle+0x1>
    13fe:	90 93 9b 00 	sts	0x009B, r25	; 0x80009b <__TEXT_REGION_LENGTH__+0x70009b>
    1402:	80 93 9a 00 	sts	0x009A, r24	; 0x80009a <__TEXT_REGION_LENGTH__+0x70009a>
    1406:	df 91       	pop	r29
    1408:	cf 91       	pop	r28
    140a:	ff 90       	pop	r15
    140c:	ef 90       	pop	r14
    140e:	df 90       	pop	r13
    1410:	cf 90       	pop	r12
    1412:	08 95       	ret

00001414 <Cir_Buf_Init>:
/** Initialize values in a Circular Buffer 
	@param	cb		Address of the circular buffer to initialize.
*/
inline void Cir_Buf_Init(volatile circular_buffer *cb)
{
	cb->size = cb->next_postion = cb->start_position = 0;
    1414:	fc 01       	movw	r30, r24
    1416:	e8 50       	subi	r30, 0x08	; 8
    1418:	fe 4f       	sbci	r31, 0xFE	; 254
    141a:	11 82       	std	Z+1, r1	; 0x01
    141c:	10 82       	st	Z, r1
    141e:	32 97       	sbiw	r30, 0x02	; 2
    1420:	11 82       	std	Z+1, r1	; 0x01
    1422:	10 82       	st	Z, r1
    1424:	32 97       	sbiw	r30, 0x02	; 2
    1426:	11 82       	std	Z+1, r1	; 0x01
    1428:	10 82       	st	Z, r1
    142a:	08 95       	ret

0000142c <Cir_Buf_Add>:
	@param	cb		Address of the circular buffer
	@param	byte	Byte to add to buffer
*/
void Cir_Buf_Add(volatile circular_buffer *cb, unsigned char byte)
{	
	*(cb->buffer + cb->next_postion) = byte;
    142c:	fc 01       	movw	r30, r24
    142e:	ea 50       	subi	r30, 0x0A	; 10
    1430:	fe 4f       	sbci	r31, 0xFE	; 254
    1432:	a0 81       	ld	r26, Z
    1434:	b1 81       	ldd	r27, Z+1	; 0x01
    1436:	a8 0f       	add	r26, r24
    1438:	b9 1f       	adc	r27, r25
    143a:	6c 93       	st	X, r22
	
	// Wrap around
	if(++cb->next_postion >= CIR_BUF_SIZE)
    143c:	20 81       	ld	r18, Z
    143e:	31 81       	ldd	r19, Z+1	; 0x01
    1440:	2f 5f       	subi	r18, 0xFF	; 255
    1442:	3f 4f       	sbci	r19, 0xFF	; 255
    1444:	31 83       	std	Z+1, r19	; 0x01
    1446:	20 83       	st	Z, r18
    1448:	24 3f       	cpi	r18, 0xF4	; 244
    144a:	31 40       	sbci	r19, 0x01	; 1
    144c:	10 f0       	brcs	.+4      	; 0x1452 <Cir_Buf_Add+0x26>
	{
		cb->next_postion = 0;
    144e:	11 82       	std	Z+1, r1	; 0x01
    1450:	10 82       	st	Z, r1
	}
	
	// Update size or start position
	if(cb->size < CIR_BUF_SIZE)
    1452:	fc 01       	movw	r30, r24
    1454:	ec 50       	subi	r30, 0x0C	; 12
    1456:	fe 4f       	sbci	r31, 0xFE	; 254
    1458:	20 81       	ld	r18, Z
    145a:	31 81       	ldd	r19, Z+1	; 0x01
    145c:	24 3f       	cpi	r18, 0xF4	; 244
    145e:	31 40       	sbci	r19, 0x01	; 1
    1460:	18 f0       	brcs	.+6      	; 0x1468 <Cir_Buf_Add+0x3c>
	{
		cb->size++;
	}
	else
	{
		cb->start_position++;
    1462:	fc 01       	movw	r30, r24
    1464:	e8 50       	subi	r30, 0x08	; 8
    1466:	fe 4f       	sbci	r31, 0xFE	; 254
    1468:	80 81       	ld	r24, Z
    146a:	91 81       	ldd	r25, Z+1	; 0x01
    146c:	01 96       	adiw	r24, 0x01	; 1
    146e:	91 83       	std	Z+1, r25	; 0x01
    1470:	80 83       	st	Z, r24
    1472:	08 95       	ret

00001474 <Cir_Buf_Read>:
*/
volatile unsigned char Cir_Buf_Read(volatile circular_buffer* cb)
{	
	volatile unsigned char *byte = NULL;
	
	if(cb->size == 0)
    1474:	dc 01       	movw	r26, r24
    1476:	ac 50       	subi	r26, 0x0C	; 12
    1478:	be 4f       	sbci	r27, 0xFE	; 254
    147a:	2d 91       	ld	r18, X+
    147c:	3c 91       	ld	r19, X
    147e:	11 97       	sbiw	r26, 0x01	; 1
    1480:	23 2b       	or	r18, r19
    1482:	f1 f0       	breq	.+60     	; 0x14c0 <Cir_Buf_Read+0x4c>
	{
		return 0;
	}

	byte = cb->buffer + cb->start_position++;
    1484:	fc 01       	movw	r30, r24
    1486:	e8 50       	subi	r30, 0x08	; 8
    1488:	fe 4f       	sbci	r31, 0xFE	; 254
    148a:	20 81       	ld	r18, Z
    148c:	31 81       	ldd	r19, Z+1	; 0x01
    148e:	a9 01       	movw	r20, r18
    1490:	4f 5f       	subi	r20, 0xFF	; 255
    1492:	5f 4f       	sbci	r21, 0xFF	; 255
    1494:	51 83       	std	Z+1, r21	; 0x01
    1496:	40 83       	st	Z, r20

	if(cb->start_position >= CIR_BUF_SIZE)
    1498:	40 81       	ld	r20, Z
    149a:	51 81       	ldd	r21, Z+1	; 0x01
    149c:	44 3f       	cpi	r20, 0xF4	; 244
    149e:	51 40       	sbci	r21, 0x01	; 1
    14a0:	10 f0       	brcs	.+4      	; 0x14a6 <Cir_Buf_Read+0x32>
	{
		cb->start_position = 0;
    14a2:	11 82       	std	Z+1, r1	; 0x01
    14a4:	10 82       	st	Z, r1
	}

	cb->size--;
    14a6:	4d 91       	ld	r20, X+
    14a8:	5c 91       	ld	r21, X
    14aa:	11 97       	sbiw	r26, 0x01	; 1
    14ac:	41 50       	subi	r20, 0x01	; 1
    14ae:	51 09       	sbc	r21, r1
    14b0:	11 96       	adiw	r26, 0x01	; 1
    14b2:	5c 93       	st	X, r21
    14b4:	4e 93       	st	-X, r20
	return *byte;
    14b6:	fc 01       	movw	r30, r24
    14b8:	e2 0f       	add	r30, r18
    14ba:	f3 1f       	adc	r31, r19
    14bc:	80 81       	ld	r24, Z
    14be:	08 95       	ret
{	
	volatile unsigned char *byte = NULL;
	
	if(cb->size == 0)
	{
		return 0;
    14c0:	80 e0       	ldi	r24, 0x00	; 0
		cb->start_position = 0;
	}

	cb->size--;
	return *byte;
    14c2:	08 95       	ret

000014c4 <init_uart_usb>:
	if(!(UART_STATUS_TRANSMITTING & blue_tooth_uart_status))
	{
		// Set status to transmitting.
		blue_tooth_uart_status |= UART_STATUS_TRANSMITTING;

		UDR1 = Cir_Buf_Read(&blue_tooth_tx_buff);
    14c4:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7000c5>
    14c8:	87 e6       	ldi	r24, 0x67	; 103
    14ca:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>
    14ce:	e0 ec       	ldi	r30, 0xC0	; 192
    14d0:	f0 e0       	ldi	r31, 0x00	; 0
    14d2:	80 81       	ld	r24, Z
    14d4:	8d 7f       	andi	r24, 0xFD	; 253
    14d6:	80 83       	st	Z, r24
    14d8:	86 e0       	ldi	r24, 0x06	; 6
    14da:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7000c2>
    14de:	88 e1       	ldi	r24, 0x18	; 24
    14e0:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
    14e4:	08 95       	ret

000014e6 <serial_write_usb>:
    14e6:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>
    14ea:	95 ff       	sbrs	r25, 5
    14ec:	fc cf       	rjmp	.-8      	; 0x14e6 <serial_write_usb>
    14ee:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    14f2:	08 95       	ret

000014f4 <init_uart_bt>:
    14f4:	10 92 cd 00 	sts	0x00CD, r1	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7000cd>
    14f8:	87 e6       	ldi	r24, 0x67	; 103
    14fa:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7000cc>
    14fe:	e8 ec       	ldi	r30, 0xC8	; 200
    1500:	f0 e0       	ldi	r31, 0x00	; 0
    1502:	80 e4       	ldi	r24, 0x40	; 64
    1504:	80 83       	st	Z, r24
    1506:	88 ed       	ldi	r24, 0xD8	; 216
    1508:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7000c9>
    150c:	86 e0       	ldi	r24, 0x06	; 6
    150e:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7000ca>
    1512:	80 81       	ld	r24, Z
    1514:	8d 7f       	andi	r24, 0xFD	; 253
    1516:	80 83       	st	Z, r24
    1518:	8e e7       	ldi	r24, 0x7E	; 126
    151a:	9b e1       	ldi	r25, 0x1B	; 27
    151c:	7b df       	rcall	.-266    	; 0x1414 <Cir_Buf_Init>
    151e:	84 e8       	ldi	r24, 0x84	; 132
    1520:	99 e1       	ldi	r25, 0x19	; 25
    1522:	78 df       	rcall	.-272    	; 0x1414 <Cir_Buf_Init>
    1524:	10 92 7d 1d 	sts	0x1D7D, r1	; 0x801d7d <rx_data_in_blue_tooth_buffer+0x1>
    1528:	10 92 7c 1d 	sts	0x1D7C, r1	; 0x801d7c <rx_data_in_blue_tooth_buffer>
    152c:	08 95       	ret

0000152e <serial_read_bt>:
    152e:	80 91 72 1d 	lds	r24, 0x1D72	; 0x801d72 <blue_tooth_rx_buff+0x1f4>
    1532:	90 91 73 1d 	lds	r25, 0x1D73	; 0x801d73 <blue_tooth_rx_buff+0x1f5>
    1536:	89 2b       	or	r24, r25
    1538:	69 f0       	breq	.+26     	; 0x1554 <serial_read_bt+0x26>
    153a:	80 91 72 1d 	lds	r24, 0x1D72	; 0x801d72 <blue_tooth_rx_buff+0x1f4>
    153e:	90 91 73 1d 	lds	r25, 0x1D73	; 0x801d73 <blue_tooth_rx_buff+0x1f5>
    1542:	01 97       	sbiw	r24, 0x01	; 1
    1544:	21 f4       	brne	.+8      	; 0x154e <serial_read_bt+0x20>
    1546:	10 92 7d 1d 	sts	0x1D7D, r1	; 0x801d7d <rx_data_in_blue_tooth_buffer+0x1>
    154a:	10 92 7c 1d 	sts	0x1D7C, r1	; 0x801d7c <rx_data_in_blue_tooth_buffer>
    154e:	8e e7       	ldi	r24, 0x7E	; 126
    1550:	9b e1       	ldi	r25, 0x1B	; 27
    1552:	90 cf       	rjmp	.-224    	; 0x1474 <Cir_Buf_Read>
    1554:	80 e0       	ldi	r24, 0x00	; 0
    1556:	08 95       	ret

00001558 <__vector_38>:
}

/*============================================================================*/
// Interrupt function called for transmit complete.
ISR(USART1_TX_vect)
{
    1558:	1f 92       	push	r1
    155a:	0f 92       	push	r0
    155c:	0f b6       	in	r0, 0x3f	; 63
    155e:	0f 92       	push	r0
    1560:	11 24       	eor	r1, r1
    1562:	0b b6       	in	r0, 0x3b	; 59
    1564:	0f 92       	push	r0
    1566:	2f 93       	push	r18
    1568:	3f 93       	push	r19
    156a:	4f 93       	push	r20
    156c:	5f 93       	push	r21
    156e:	6f 93       	push	r22
    1570:	7f 93       	push	r23
    1572:	8f 93       	push	r24
    1574:	9f 93       	push	r25
    1576:	af 93       	push	r26
    1578:	bf 93       	push	r27
    157a:	ef 93       	push	r30
    157c:	ff 93       	push	r31
	if(blue_tooth_tx_buff.size > 0)
    157e:	80 91 78 1b 	lds	r24, 0x1B78	; 0x801b78 <blue_tooth_tx_buff+0x1f4>
    1582:	90 91 79 1b 	lds	r25, 0x1B79	; 0x801b79 <blue_tooth_tx_buff+0x1f5>
    1586:	89 2b       	or	r24, r25
    1588:	31 f0       	breq	.+12     	; 0x1596 <__vector_38+0x3e>
	{
		UDR1 = Cir_Buf_Read(&blue_tooth_tx_buff);
    158a:	84 e8       	ldi	r24, 0x84	; 132
    158c:	99 e1       	ldi	r25, 0x19	; 25
    158e:	72 df       	rcall	.-284    	; 0x1474 <Cir_Buf_Read>
    1590:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
    1594:	09 c0       	rjmp	.+18     	; 0x15a8 <__vector_38+0x50>
	}
	else
	{
		blue_tooth_uart_status &= ~(UART_STATUS_TRANSMITTING);
    1596:	80 91 82 19 	lds	r24, 0x1982	; 0x801982 <blue_tooth_uart_status>
    159a:	90 91 83 19 	lds	r25, 0x1983	; 0x801983 <blue_tooth_uart_status+0x1>
    159e:	8e 7f       	andi	r24, 0xFE	; 254
    15a0:	90 93 83 19 	sts	0x1983, r25	; 0x801983 <blue_tooth_uart_status+0x1>
    15a4:	80 93 82 19 	sts	0x1982, r24	; 0x801982 <blue_tooth_uart_status>
	}
}
    15a8:	ff 91       	pop	r31
    15aa:	ef 91       	pop	r30
    15ac:	bf 91       	pop	r27
    15ae:	af 91       	pop	r26
    15b0:	9f 91       	pop	r25
    15b2:	8f 91       	pop	r24
    15b4:	7f 91       	pop	r23
    15b6:	6f 91       	pop	r22
    15b8:	5f 91       	pop	r21
    15ba:	4f 91       	pop	r20
    15bc:	3f 91       	pop	r19
    15be:	2f 91       	pop	r18
    15c0:	0f 90       	pop	r0
    15c2:	0b be       	out	0x3b, r0	; 59
    15c4:	0f 90       	pop	r0
    15c6:	0f be       	out	0x3f, r0	; 63
    15c8:	0f 90       	pop	r0
    15ca:	1f 90       	pop	r1
    15cc:	18 95       	reti

000015ce <__vector_36>:

/*============================================================================*/
// Interrupt function for data received.
ISR(USART1_RX_vect)
{
    15ce:	1f 92       	push	r1
    15d0:	0f 92       	push	r0
    15d2:	0f b6       	in	r0, 0x3f	; 63
    15d4:	0f 92       	push	r0
    15d6:	11 24       	eor	r1, r1
    15d8:	0b b6       	in	r0, 0x3b	; 59
    15da:	0f 92       	push	r0
    15dc:	2f 93       	push	r18
    15de:	3f 93       	push	r19
    15e0:	4f 93       	push	r20
    15e2:	5f 93       	push	r21
    15e4:	6f 93       	push	r22
    15e6:	7f 93       	push	r23
    15e8:	8f 93       	push	r24
    15ea:	9f 93       	push	r25
    15ec:	af 93       	push	r26
    15ee:	bf 93       	push	r27
    15f0:	ef 93       	push	r30
    15f2:	ff 93       	push	r31
	Cir_Buf_Add(&blue_tooth_rx_buff, UDR1);
    15f4:	60 91 ce 00 	lds	r22, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
    15f8:	8e e7       	ldi	r24, 0x7E	; 126
    15fa:	9b e1       	ldi	r25, 0x1B	; 27
    15fc:	17 df       	rcall	.-466    	; 0x142c <Cir_Buf_Add>
	rx_data_in_blue_tooth_buffer = 1;
    15fe:	81 e0       	ldi	r24, 0x01	; 1
    1600:	90 e0       	ldi	r25, 0x00	; 0
    1602:	90 93 7d 1d 	sts	0x1D7D, r25	; 0x801d7d <rx_data_in_blue_tooth_buffer+0x1>
    1606:	80 93 7c 1d 	sts	0x1D7C, r24	; 0x801d7c <rx_data_in_blue_tooth_buffer>
}
    160a:	ff 91       	pop	r31
    160c:	ef 91       	pop	r30
    160e:	bf 91       	pop	r27
    1610:	af 91       	pop	r26
    1612:	9f 91       	pop	r25
    1614:	8f 91       	pop	r24
    1616:	7f 91       	pop	r23
    1618:	6f 91       	pop	r22
    161a:	5f 91       	pop	r21
    161c:	4f 91       	pop	r20
    161e:	3f 91       	pop	r19
    1620:	2f 91       	pop	r18
    1622:	0f 90       	pop	r0
    1624:	0b be       	out	0x3b, r0	; 59
    1626:	0f 90       	pop	r0
    1628:	0f be       	out	0x3f, r0	; 63
    162a:	0f 90       	pop	r0
    162c:	1f 90       	pop	r1
    162e:	18 95       	reti

00001630 <init_uart_roomba>:

/*============================================================================*/
/*============================================================================*/
void init_uart_roomba()
{
	UBRR2H = 0b0000;		// This is for 19200 Baud.
    1630:	10 92 d5 00 	sts	0x00D5, r1	; 0x8000d5 <__TEXT_REGION_LENGTH__+0x7000d5>
	UBRR2L = 0b00110011;	// This is for 19200 Baud.
    1634:	83 e3       	ldi	r24, 0x33	; 51
    1636:	80 93 d4 00 	sts	0x00D4, r24	; 0x8000d4 <__TEXT_REGION_LENGTH__+0x7000d4>
	UCSR2C = _BV(UCSZ21) | _BV(UCSZ20); // 8-bit data
	UCSR2B = _BV(RXEN2) | _BV(TXEN2);   // Enable RX and TX
	*/
	
	// Clear USART Transmit complete flag, normal USART transmission speed
	UCSR2A = (1 << TXC2) | (0 << U2X2);
    163a:	e0 ed       	ldi	r30, 0xD0	; 208
    163c:	f0 e0       	ldi	r31, 0x00	; 0
    163e:	80 e4       	ldi	r24, 0x40	; 64
    1640:	80 83       	st	Z, r24

	// Enable receiver, transmitter, rx complete interrupt and tx complete interrupt.
	UCSR2B = (1 << RXEN2) | (1 << TXEN2) | (1 << RXCIE1);
    1642:	88 e9       	ldi	r24, 0x98	; 152
    1644:	80 93 d1 00 	sts	0x00D1, r24	; 0x8000d1 <__TEXT_REGION_LENGTH__+0x7000d1>

	// 8-bit data
	UCSR2C = ((1 << UCSZ21) | (1 << UCSZ20));
    1648:	86 e0       	ldi	r24, 0x06	; 6
    164a:	80 93 d2 00 	sts	0x00D2, r24	; 0x8000d2 <__TEXT_REGION_LENGTH__+0x7000d2>

	// Disable 2x speed
	UCSR2A &= ~(1 << U2X2);
    164e:	80 81       	ld	r24, Z
    1650:	8d 7f       	andi	r24, 0xFD	; 253
    1652:	80 83       	st	Z, r24

	Cir_Buf_Init(&roomba_rx_buff);
    1654:	88 e8       	ldi	r24, 0x88	; 136
    1656:	97 e1       	ldi	r25, 0x17	; 23
    1658:	dd de       	rcall	.-582    	; 0x1414 <Cir_Buf_Init>

	rx_data_in_roomba_buffer = 0;
    165a:	10 92 7f 1d 	sts	0x1D7F, r1	; 0x801d7f <rx_data_in_roomba_buffer+0x1>
    165e:	10 92 7e 1d 	sts	0x1D7E, r1	; 0x801d7e <rx_data_in_roomba_buffer>
    1662:	08 95       	ret

00001664 <serial_read_roomba>:
		return '\0';
	}
	return UDR2;
	*/
	
	if (roomba_rx_buff.size == 0)
    1664:	80 91 7c 19 	lds	r24, 0x197C	; 0x80197c <roomba_rx_buff+0x1f4>
    1668:	90 91 7d 19 	lds	r25, 0x197D	; 0x80197d <roomba_rx_buff+0x1f5>
    166c:	89 2b       	or	r24, r25
    166e:	69 f0       	breq	.+26     	; 0x168a <serial_read_roomba+0x26>
	{
		return 0;
	}
	else if (roomba_rx_buff.size == 1)
    1670:	80 91 7c 19 	lds	r24, 0x197C	; 0x80197c <roomba_rx_buff+0x1f4>
    1674:	90 91 7d 19 	lds	r25, 0x197D	; 0x80197d <roomba_rx_buff+0x1f5>
    1678:	01 97       	sbiw	r24, 0x01	; 1
    167a:	21 f4       	brne	.+8      	; 0x1684 <serial_read_roomba+0x20>
	{
		rx_data_in_roomba_buffer = 0;
    167c:	10 92 7f 1d 	sts	0x1D7F, r1	; 0x801d7f <rx_data_in_roomba_buffer+0x1>
    1680:	10 92 7e 1d 	sts	0x1D7E, r1	; 0x801d7e <rx_data_in_roomba_buffer>
	}
	return Cir_Buf_Read(&roomba_rx_buff);
    1684:	88 e8       	ldi	r24, 0x88	; 136
    1686:	97 e1       	ldi	r25, 0x17	; 23
    1688:	f5 ce       	rjmp	.-534    	; 0x1474 <Cir_Buf_Read>
}
    168a:	80 e0       	ldi	r24, 0x00	; 0
    168c:	08 95       	ret

0000168e <serial_write_roomba>:

/*============================================================================*/
void serial_write_roomba(unsigned char data_out)
{
	while ((UCSR2A & _BV(UDRE2)) == 0)		// while NOT ready to transmit
    168e:	90 91 d0 00 	lds	r25, 0x00D0	; 0x8000d0 <__TEXT_REGION_LENGTH__+0x7000d0>
    1692:	95 ff       	sbrs	r25, 5
    1694:	fc cf       	rjmp	.-8      	; 0x168e <serial_write_roomba>
	{;;}
	UDR2 = data_out;
    1696:	80 93 d6 00 	sts	0x00D6, r24	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
    169a:	08 95       	ret

0000169c <__vector_51>:
}

/*============================================================================*/
// Interrupt function for data received.
ISR(USART2_RX_vect)
{
    169c:	1f 92       	push	r1
    169e:	0f 92       	push	r0
    16a0:	0f b6       	in	r0, 0x3f	; 63
    16a2:	0f 92       	push	r0
    16a4:	11 24       	eor	r1, r1
    16a6:	0b b6       	in	r0, 0x3b	; 59
    16a8:	0f 92       	push	r0
    16aa:	2f 93       	push	r18
    16ac:	3f 93       	push	r19
    16ae:	4f 93       	push	r20
    16b0:	5f 93       	push	r21
    16b2:	6f 93       	push	r22
    16b4:	7f 93       	push	r23
    16b6:	8f 93       	push	r24
    16b8:	9f 93       	push	r25
    16ba:	af 93       	push	r26
    16bc:	bf 93       	push	r27
    16be:	ef 93       	push	r30
    16c0:	ff 93       	push	r31
	Cir_Buf_Add(&roomba_rx_buff, UDR2);
    16c2:	60 91 d6 00 	lds	r22, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
    16c6:	88 e8       	ldi	r24, 0x88	; 136
    16c8:	97 e1       	ldi	r25, 0x17	; 23
    16ca:	b0 de       	rcall	.-672    	; 0x142c <Cir_Buf_Add>
	rx_data_in_roomba_buffer = 1;
    16cc:	81 e0       	ldi	r24, 0x01	; 1
    16ce:	90 e0       	ldi	r25, 0x00	; 0
    16d0:	90 93 7f 1d 	sts	0x1D7F, r25	; 0x801d7f <rx_data_in_roomba_buffer+0x1>
    16d4:	80 93 7e 1d 	sts	0x1D7E, r24	; 0x801d7e <rx_data_in_roomba_buffer>
}
    16d8:	ff 91       	pop	r31
    16da:	ef 91       	pop	r30
    16dc:	bf 91       	pop	r27
    16de:	af 91       	pop	r26
    16e0:	9f 91       	pop	r25
    16e2:	8f 91       	pop	r24
    16e4:	7f 91       	pop	r23
    16e6:	6f 91       	pop	r22
    16e8:	5f 91       	pop	r21
    16ea:	4f 91       	pop	r20
    16ec:	3f 91       	pop	r19
    16ee:	2f 91       	pop	r18
    16f0:	0f 90       	pop	r0
    16f2:	0b be       	out	0x3b, r0	; 59
    16f4:	0f 90       	pop	r0
    16f6:	0f be       	out	0x3f, r0	; 63
    16f8:	0f 90       	pop	r0
    16fa:	1f 90       	pop	r1
    16fc:	18 95       	reti

000016fe <__cmpsf2>:
    16fe:	40 d0       	rcall	.+128    	; 0x1780 <__fp_cmp>
    1700:	08 f4       	brcc	.+2      	; 0x1704 <__cmpsf2+0x6>
    1702:	81 e0       	ldi	r24, 0x01	; 1
    1704:	08 95       	ret

00001706 <__floatunsisf>:
    1706:	e8 94       	clt
    1708:	09 c0       	rjmp	.+18     	; 0x171c <__floatsisf+0x12>

0000170a <__floatsisf>:
    170a:	97 fb       	bst	r25, 7
    170c:	3e f4       	brtc	.+14     	; 0x171c <__floatsisf+0x12>
    170e:	90 95       	com	r25
    1710:	80 95       	com	r24
    1712:	70 95       	com	r23
    1714:	61 95       	neg	r22
    1716:	7f 4f       	sbci	r23, 0xFF	; 255
    1718:	8f 4f       	sbci	r24, 0xFF	; 255
    171a:	9f 4f       	sbci	r25, 0xFF	; 255
    171c:	99 23       	and	r25, r25
    171e:	a9 f0       	breq	.+42     	; 0x174a <__floatsisf+0x40>
    1720:	f9 2f       	mov	r31, r25
    1722:	96 e9       	ldi	r25, 0x96	; 150
    1724:	bb 27       	eor	r27, r27
    1726:	93 95       	inc	r25
    1728:	f6 95       	lsr	r31
    172a:	87 95       	ror	r24
    172c:	77 95       	ror	r23
    172e:	67 95       	ror	r22
    1730:	b7 95       	ror	r27
    1732:	f1 11       	cpse	r31, r1
    1734:	f8 cf       	rjmp	.-16     	; 0x1726 <__floatsisf+0x1c>
    1736:	fa f4       	brpl	.+62     	; 0x1776 <__floatsisf+0x6c>
    1738:	bb 0f       	add	r27, r27
    173a:	11 f4       	brne	.+4      	; 0x1740 <__floatsisf+0x36>
    173c:	60 ff       	sbrs	r22, 0
    173e:	1b c0       	rjmp	.+54     	; 0x1776 <__floatsisf+0x6c>
    1740:	6f 5f       	subi	r22, 0xFF	; 255
    1742:	7f 4f       	sbci	r23, 0xFF	; 255
    1744:	8f 4f       	sbci	r24, 0xFF	; 255
    1746:	9f 4f       	sbci	r25, 0xFF	; 255
    1748:	16 c0       	rjmp	.+44     	; 0x1776 <__floatsisf+0x6c>
    174a:	88 23       	and	r24, r24
    174c:	11 f0       	breq	.+4      	; 0x1752 <__floatsisf+0x48>
    174e:	96 e9       	ldi	r25, 0x96	; 150
    1750:	11 c0       	rjmp	.+34     	; 0x1774 <__floatsisf+0x6a>
    1752:	77 23       	and	r23, r23
    1754:	21 f0       	breq	.+8      	; 0x175e <__floatsisf+0x54>
    1756:	9e e8       	ldi	r25, 0x8E	; 142
    1758:	87 2f       	mov	r24, r23
    175a:	76 2f       	mov	r23, r22
    175c:	05 c0       	rjmp	.+10     	; 0x1768 <__floatsisf+0x5e>
    175e:	66 23       	and	r22, r22
    1760:	71 f0       	breq	.+28     	; 0x177e <__floatsisf+0x74>
    1762:	96 e8       	ldi	r25, 0x86	; 134
    1764:	86 2f       	mov	r24, r22
    1766:	70 e0       	ldi	r23, 0x00	; 0
    1768:	60 e0       	ldi	r22, 0x00	; 0
    176a:	2a f0       	brmi	.+10     	; 0x1776 <__floatsisf+0x6c>
    176c:	9a 95       	dec	r25
    176e:	66 0f       	add	r22, r22
    1770:	77 1f       	adc	r23, r23
    1772:	88 1f       	adc	r24, r24
    1774:	da f7       	brpl	.-10     	; 0x176c <__floatsisf+0x62>
    1776:	88 0f       	add	r24, r24
    1778:	96 95       	lsr	r25
    177a:	87 95       	ror	r24
    177c:	97 f9       	bld	r25, 7
    177e:	08 95       	ret

00001780 <__fp_cmp>:
    1780:	99 0f       	add	r25, r25
    1782:	00 08       	sbc	r0, r0
    1784:	55 0f       	add	r21, r21
    1786:	aa 0b       	sbc	r26, r26
    1788:	e0 e8       	ldi	r30, 0x80	; 128
    178a:	fe ef       	ldi	r31, 0xFE	; 254
    178c:	16 16       	cp	r1, r22
    178e:	17 06       	cpc	r1, r23
    1790:	e8 07       	cpc	r30, r24
    1792:	f9 07       	cpc	r31, r25
    1794:	c0 f0       	brcs	.+48     	; 0x17c6 <__fp_cmp+0x46>
    1796:	12 16       	cp	r1, r18
    1798:	13 06       	cpc	r1, r19
    179a:	e4 07       	cpc	r30, r20
    179c:	f5 07       	cpc	r31, r21
    179e:	98 f0       	brcs	.+38     	; 0x17c6 <__fp_cmp+0x46>
    17a0:	62 1b       	sub	r22, r18
    17a2:	73 0b       	sbc	r23, r19
    17a4:	84 0b       	sbc	r24, r20
    17a6:	95 0b       	sbc	r25, r21
    17a8:	39 f4       	brne	.+14     	; 0x17b8 <__fp_cmp+0x38>
    17aa:	0a 26       	eor	r0, r26
    17ac:	61 f0       	breq	.+24     	; 0x17c6 <__fp_cmp+0x46>
    17ae:	23 2b       	or	r18, r19
    17b0:	24 2b       	or	r18, r20
    17b2:	25 2b       	or	r18, r21
    17b4:	21 f4       	brne	.+8      	; 0x17be <__fp_cmp+0x3e>
    17b6:	08 95       	ret
    17b8:	0a 26       	eor	r0, r26
    17ba:	09 f4       	brne	.+2      	; 0x17be <__fp_cmp+0x3e>
    17bc:	a1 40       	sbci	r26, 0x01	; 1
    17be:	a6 95       	lsr	r26
    17c0:	8f ef       	ldi	r24, 0xFF	; 255
    17c2:	81 1d       	adc	r24, r1
    17c4:	81 1d       	adc	r24, r1
    17c6:	08 95       	ret

000017c8 <__gesf2>:
    17c8:	db df       	rcall	.-74     	; 0x1780 <__fp_cmp>
    17ca:	08 f4       	brcc	.+2      	; 0x17ce <__gesf2+0x6>
    17cc:	8f ef       	ldi	r24, 0xFF	; 255
    17ce:	08 95       	ret

000017d0 <__udivmodhi4>:
    17d0:	aa 1b       	sub	r26, r26
    17d2:	bb 1b       	sub	r27, r27
    17d4:	51 e1       	ldi	r21, 0x11	; 17
    17d6:	07 c0       	rjmp	.+14     	; 0x17e6 <__udivmodhi4_ep>

000017d8 <__udivmodhi4_loop>:
    17d8:	aa 1f       	adc	r26, r26
    17da:	bb 1f       	adc	r27, r27
    17dc:	a6 17       	cp	r26, r22
    17de:	b7 07       	cpc	r27, r23
    17e0:	10 f0       	brcs	.+4      	; 0x17e6 <__udivmodhi4_ep>
    17e2:	a6 1b       	sub	r26, r22
    17e4:	b7 0b       	sbc	r27, r23

000017e6 <__udivmodhi4_ep>:
    17e6:	88 1f       	adc	r24, r24
    17e8:	99 1f       	adc	r25, r25
    17ea:	5a 95       	dec	r21
    17ec:	a9 f7       	brne	.-22     	; 0x17d8 <__udivmodhi4_loop>
    17ee:	80 95       	com	r24
    17f0:	90 95       	com	r25
    17f2:	bc 01       	movw	r22, r24
    17f4:	cd 01       	movw	r24, r26
    17f6:	08 95       	ret

000017f8 <__divmodhi4>:
    17f8:	97 fb       	bst	r25, 7
    17fa:	07 2e       	mov	r0, r23
    17fc:	16 f4       	brtc	.+4      	; 0x1802 <__divmodhi4+0xa>
    17fe:	00 94       	com	r0
    1800:	06 d0       	rcall	.+12     	; 0x180e <__divmodhi4_neg1>
    1802:	77 fd       	sbrc	r23, 7
    1804:	08 d0       	rcall	.+16     	; 0x1816 <__divmodhi4_neg2>
    1806:	e4 df       	rcall	.-56     	; 0x17d0 <__udivmodhi4>
    1808:	07 fc       	sbrc	r0, 7
    180a:	05 d0       	rcall	.+10     	; 0x1816 <__divmodhi4_neg2>
    180c:	3e f4       	brtc	.+14     	; 0x181c <__divmodhi4_exit>

0000180e <__divmodhi4_neg1>:
    180e:	90 95       	com	r25
    1810:	81 95       	neg	r24
    1812:	9f 4f       	sbci	r25, 0xFF	; 255
    1814:	08 95       	ret

00001816 <__divmodhi4_neg2>:
    1816:	70 95       	com	r23
    1818:	61 95       	neg	r22
    181a:	7f 4f       	sbci	r23, 0xFF	; 255

0000181c <__divmodhi4_exit>:
    181c:	08 95       	ret

0000181e <__tablejump2__>:
    181e:	ee 0f       	add	r30, r30
    1820:	ff 1f       	adc	r31, r31
    1822:	88 1f       	adc	r24, r24
    1824:	8b bf       	out	0x3b, r24	; 59
    1826:	07 90       	elpm	r0, Z+
    1828:	f6 91       	elpm	r31, Z
    182a:	e0 2d       	mov	r30, r0
    182c:	19 94       	eijmp

0000182e <atoi>:
    182e:	fc 01       	movw	r30, r24
    1830:	88 27       	eor	r24, r24
    1832:	99 27       	eor	r25, r25
    1834:	e8 94       	clt
    1836:	21 91       	ld	r18, Z+
    1838:	20 32       	cpi	r18, 0x20	; 32
    183a:	e9 f3       	breq	.-6      	; 0x1836 <atoi+0x8>
    183c:	29 30       	cpi	r18, 0x09	; 9
    183e:	10 f0       	brcs	.+4      	; 0x1844 <atoi+0x16>
    1840:	2e 30       	cpi	r18, 0x0E	; 14
    1842:	c8 f3       	brcs	.-14     	; 0x1836 <atoi+0x8>
    1844:	2b 32       	cpi	r18, 0x2B	; 43
    1846:	39 f0       	breq	.+14     	; 0x1856 <atoi+0x28>
    1848:	2d 32       	cpi	r18, 0x2D	; 45
    184a:	31 f4       	brne	.+12     	; 0x1858 <atoi+0x2a>
    184c:	68 94       	set
    184e:	03 c0       	rjmp	.+6      	; 0x1856 <atoi+0x28>
    1850:	0b d0       	rcall	.+22     	; 0x1868 <__mulhi_const_10>
    1852:	82 0f       	add	r24, r18
    1854:	91 1d       	adc	r25, r1
    1856:	21 91       	ld	r18, Z+
    1858:	20 53       	subi	r18, 0x30	; 48
    185a:	2a 30       	cpi	r18, 0x0A	; 10
    185c:	c8 f3       	brcs	.-14     	; 0x1850 <atoi+0x22>
    185e:	1e f4       	brtc	.+6      	; 0x1866 <atoi+0x38>
    1860:	90 95       	com	r25
    1862:	81 95       	neg	r24
    1864:	9f 4f       	sbci	r25, 0xFF	; 255
    1866:	08 95       	ret

00001868 <__mulhi_const_10>:
    1868:	7a e0       	ldi	r23, 0x0A	; 10
    186a:	97 9f       	mul	r25, r23
    186c:	90 2d       	mov	r25, r0
    186e:	87 9f       	mul	r24, r23
    1870:	80 2d       	mov	r24, r0
    1872:	91 0d       	add	r25, r1
    1874:	11 24       	eor	r1, r1
    1876:	08 95       	ret

00001878 <_exit>:
    1878:	f8 94       	cli

0000187a <__stop_program>:
    187a:	ff cf       	rjmp	.-2      	; 0x187a <__stop_program>
